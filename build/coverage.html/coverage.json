{"/home/travis/build/npmtest/node-npmtest-pg-promise/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_pg_promise */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - init-after","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - init-after","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/lib.npmtest_pg_promise.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/lib.npmtest_pg_promise.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":55}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":61}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_pg_promise */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_pg_promise = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_pg_promise = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":54}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":68},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-pg-promise && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_pg_promise */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_pg_promise","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // init-after","    // run browser js-env code - init-after","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_pg_promise.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_pg_promise.rollup.js'] =","            local.assetsDict['/assets.npmtest_pg_promise.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_pg_promise.__dirname + '/lib.npmtest_pg_promise.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{"1":[0,1]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":55}},"2":{"start":{"line":6,"column":0},"end":{"line":12,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":77},"skip":true},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":35}}},"branchMap":{"1":{"line":6,"type":"if","locations":[{"start":{"line":6,"column":0},"end":{"line":6,"column":0},"skip":true},{"start":{"line":6,"column":0},"end":{"line":6,"column":0}}]}},"code":["'use strict';","","var nodeHighVer = +process.versions.node.split('.')[0];","","// istanbul ignore if","if (nodeHighVer < 4) {","","    // Starting from pg-promise v5.6.0, the library no longer supports legacy","    // Node.js versions 0.10 and 0.12, requiring Node.js 4.x as the minimum.","","    throw new Error('Minimum Node.js version required by pg-promise is 4.x');","}","","module.exports = require('./main');",""],"l":{"3":1,"6":1,"11":1,"14":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/main.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/main.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":1,"39":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"$main","line":124,"loc":{"start":{"line":124,"column":0},"end":{"line":124,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":21,"column":2}},"2":{"start":{"line":124,"column":0},"end":{"line":238,"column":1}},"3":{"start":{"line":126,"column":4},"end":{"line":145,"column":5}},"4":{"start":{"line":127,"column":8},"end":{"line":127,"column":21}},"5":{"start":{"line":129,"column":8},"end":{"line":131,"column":9}},"6":{"start":{"line":130,"column":12},"end":{"line":130,"column":67}},"7":{"start":{"line":134,"column":8},"end":{"line":135,"column":96}},"8":{"start":{"line":137,"column":8},"end":{"line":144,"column":9}},"9":{"start":{"line":138,"column":12},"end":{"line":143,"column":13}},"10":{"start":{"line":139,"column":16},"end":{"line":142,"column":17}},"11":{"start":{"line":140,"column":20},"end":{"line":140,"column":138}},"12":{"start":{"line":141,"column":20},"end":{"line":141,"column":26}},"13":{"start":{"line":147,"column":4},"end":{"line":147,"column":59}},"14":{"start":{"line":149,"column":4},"end":{"line":153,"column":6}},"15":{"start":{"line":155,"column":4},"end":{"line":155,"column":53}},"16":{"start":{"line":158,"column":4},"end":{"line":158,"column":70}},"17":{"start":{"line":159,"column":4},"end":{"line":159,"column":68}},"18":{"start":{"line":161,"column":4},"end":{"line":161,"column":29}},"19":{"start":{"line":165,"column":4},"end":{"line":170,"column":5},"skip":true},"20":{"start":{"line":166,"column":8},"end":{"line":166,"column":28},"skip":true},"21":{"start":{"line":167,"column":8},"end":{"line":169,"column":9},"skip":true},"22":{"start":{"line":168,"column":12},"end":{"line":168,"column":69},"skip":true},"23":{"start":{"line":172,"column":4},"end":{"line":172,"column":49}},"24":{"start":{"line":174,"column":4},"end":{"line":179,"column":6}},"25":{"start":{"line":175,"column":8},"end":{"line":177,"column":9}},"26":{"start":{"line":176,"column":12},"end":{"line":176,"column":48}},"27":{"start":{"line":178,"column":8},"end":{"line":178,"column":59}},"28":{"start":{"line":181,"column":4},"end":{"line":181,"column":54}},"29":{"start":{"line":193,"column":4},"end":{"line":193,"column":43}},"30":{"start":{"line":203,"column":4},"end":{"line":205,"column":7}},"31":{"start":{"line":204,"column":8},"end":{"line":204,"column":17}},"32":{"start":{"line":217,"column":4},"end":{"line":217,"column":66}},"33":{"start":{"line":232,"column":4},"end":{"line":232,"column":59}},"34":{"start":{"line":234,"column":4},"end":{"line":234,"column":22}},"35":{"start":{"line":235,"column":4},"end":{"line":235,"column":26}},"36":{"start":{"line":237,"column":4},"end":{"line":237,"column":16}},"37":{"start":{"line":240,"column":0},"end":{"line":344,"column":2}},"38":{"start":{"line":346,"column":0},"end":{"line":346,"column":51}},"39":{"start":{"line":348,"column":0},"end":{"line":348,"column":23}}},"branchMap":{"1":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"2":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":8},"end":{"line":129,"column":8}},{"start":{"line":129,"column":8},"end":{"line":129,"column":8}}]},"3":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":8},"end":{"line":137,"column":8}},{"start":{"line":137,"column":8},"end":{"line":137,"column":8}}]},"4":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":16},"end":{"line":139,"column":16}},{"start":{"line":139,"column":16},"end":{"line":139,"column":16}}]},"5":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":4},"end":{"line":165,"column":4},"skip":true},{"start":{"line":165,"column":4},"end":{"line":165,"column":4},"skip":true}]},"6":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":167,"column":8},"skip":true},{"start":{"line":167,"column":8},"end":{"line":167,"column":8},"skip":true}]},"7":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":8},"end":{"line":175,"column":8}},{"start":{"line":175,"column":8},"end":{"line":175,"column":8}}]},"8":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":12},"end":{"line":175,"column":33}},{"start":{"line":175,"column":38},"end":{"line":175,"column":40}},{"start":{"line":175,"column":44},"end":{"line":175,"column":66}}]}},"code":["'use strict';","","var $npm = {","    con: require('manakin').local,","    path: require('path'),","    pg: require('pg'),","    minify: require('pg-minify'),","    array: require('./array'),","    adapter: require('./adapter'),","    result: require('./result'),","    promise: require('./promise'),","    formatting: require('./formatting'),","    helpers: require('./helpers'),","    queryFile: require('./queryFile'),","    errors: require('./errors'),","    utils: require('./utils'),","    pubUtils: require('./utils/public'),","    mode: require('./txMode'),","    types: require('./types'),","    package: require('../package.json')","};","","/**"," * @author Vitaly Tomilov"," * @module pg-promise"," *"," * @description"," * ### Initialization Options"," *"," * Below is the complete list of _Initialization Options_ for the library."," *"," * @param {object} [options]"," * Library Initialization Options."," *"," * @param {boolean} [options.pgFormatting=false]"," * Redirects query formatting to PG."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {boolean} [options.pgNative=false]"," * Use $[Native Bindings]. Library $[pg-native] must be installed, or else it will throw an error."," *"," * This is a static property (can only be set prior to initialization)."," *"," * @param {object|function} [options.promiseLib=Promise]"," * Overrides the default promise library."," *"," * This is a static property (can only be set prior to initialization)."," *"," * @param {boolean} [options.noLocking=false]"," * Prevents protocol locking."," *"," * By default, the library locks its protocol to read-only access, as a fool-proof mechanism."," * Specifically for the {@link event:extend extend} event this serves as a protection against overriding existing"," * properties or trying to set them at the wrong time."," *"," * If this provision gets in the way of using a mock-up framework for your tests, you can force"," * the library to deactivate most of the locks by setting `noLocking` = `true` within the options."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {boolean} [options.capSQL=false]"," * Capitalizes any SQL generated by the library."," *"," * By default, all internal SQL within the library is generated using the low case."," * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`."," *"," * This is purely a cosmetic feature."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {boolean} [options.noWarnings=false]"," * Disables all diagnostic warnings in the library (which is ill-advised)."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {function} [options.connect]"," * Global event {@link event:connect connect} handler."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {function} [options.disconnect]"," * Global event {@link event:disconnect disconnect} handler."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {function} [options.query]"," * Global event {@link event:query query} handler."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {function} [options.receive]"," * Global event {@link event:receive receive} handler."," *"," * @param {function} [options.task]"," * Global event {@link event:task task} handler."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {function} [options.transact]"," * Global event {@link event:transact transact} handler."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {function} [options.error]"," * Global event {@link event:error error} handler."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @param {function} [options.extend]"," * Global event {@link event:extend extend} handler."," *"," * This property can be set dynamically (before or after initialization)."," *"," * @example"," *"," * var options = {"," *   // Initialization Options"," * };"," *"," * var pgp = require('pg-promise')(options);"," *"," */","function $main(options) {","","    if ($npm.utils.isNull(options)) {","        options = {};","    } else {","        if (typeof options !== 'object') {","            throw new TypeError('Invalid initialization options.');","        }","","        // list of supported initialization options:","        var validOptions = ['pgFormatting', 'pgNative', 'promiseLib', 'noLocking', 'capSQL', 'noWarnings',","            'connect', 'disconnect', 'query', 'receive', 'task', 'transact', 'error', 'extend'];","","        if (!options.noWarnings) {","            for (var prop in options) {","                if (validOptions.indexOf(prop) === -1) {","                    $npm.con.warn('WARNING: Invalid property \\'%s\\' in initialization options.\\n%s\\n', prop, $npm.utils.getLocalStack(3));","                    break;","                }","            }","        }","    }","","    var pg = $npm.pg, p = $npm.promise(options.promiseLib);","","    var config = {","        version: $npm.package.version,","        promiseLib: p.promiseLib,","        promise: p.promise","    };","","    $npm.utils.addReadProp(config, '$npm', {}, true);","","    // Locking properties that cannot be changed later:","    $npm.utils.addReadProp(options, 'promiseLib', options.promiseLib);","    $npm.utils.addReadProp(options, 'pgNative', !!options.pgNative);","","    config.options = options;","","    // istanbul ignore next:","    // we do not cover code specific to Native Bindings","    if (options.pgNative) {","        pg = $npm.pg.native;","        if ($npm.utils.isNull(pg)) {","            throw new Error('Failed to initialize Native Bindings.');","        }","    }","","    var Database = require('./database')(config);","","    var inst = (cn, dc) => {","        if ($npm.utils.isText(cn) || (cn && typeof cn === 'object')) {","            return new Database(cn, dc, config);","        }","        throw new TypeError('Invalid connection details.');","    };","","    $npm.utils.addReadProperties(inst, rootNameSpace);","","    /**","     * @member {external:PG} pg","     * @readonly","     * @description","     * Instance of the $[PG] library that's being used, depending on initialization option `pgNative`:","     *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)","     *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.","     *","     * Available as `pgp.pg`, after initializing the library.","     */","    $npm.utils.addReadProp(inst, 'pg', pg);","","    /**","     * @member {function} end","     * @readonly","     * @description","     * Terminates pg library (call it when exiting the application).","     *","     * Available as `pgp.end`, after initializing the library.","     */","    $npm.utils.addReadProp(inst, 'end', () => {","        pg.end();","    });","","    /**","     * @member {helpers} helpers","     * @readonly","     * @description","     * Namespace for {@link helpers all query-formatting helper functions}.","     *","     * Available as `pgp.helpers`, after initializing the library.","     *","     * @see {@link helpers}.","     */","    $npm.utils.addReadProp(inst, 'helpers', $npm.helpers(config));","","    /**","     * @member {external:spex} spex","     * @readonly","     * @description","     * Initialized instance of the $[spex] module, used by the library within tasks and transactions.","     *","     * Available as `pgp.spex`, after initializing the library.","     *","     * @see","     * {@link Task.batch},","     * {@link Task.page},","     * {@link Task.sequence}","     */","    $npm.utils.addReadProp(inst, 'spex', config.$npm.spex);","","    config.pgp = inst;","    Object.freeze(config);","","    return inst;","}","","var rootNameSpace = {","","    /**","     * @member {formatting} as","     * @readonly","     * @description","     * Namespace for {@link formatting all query-formatting functions}.","     *","     * Available as `pgp.as`, before and after initializing the library.","     *","     * @see {@link formatting}.","     */","    as: $npm.formatting.as,","","    /**","     * @member {external:pg-minify} minify","     * @readonly","     * @description","     * Instance of the $[pg-minify] library that's used.","     *","     * Available as `pgp.minify`, before and after initializing the library.","     */","    minify: $npm.minify,","","    /**","     * @member {queryResult} queryResult","     * @readonly","     * @description","     * Query Result Mask enumerator.","     *","     * Available as `pgp.queryResult`, before and after initializing the library.","     */","    queryResult: $npm.result,","","    /**","     * @member {PromiseAdapter} PromiseAdapter","     * @readonly","     * @description","     * {@link PromiseAdapter} class.","     *","     * Available as `pgp.PromiseAdapter`, before and after initializing the library.","     */","    PromiseAdapter: $npm.adapter,","","    /**","     * @member {ParameterizedQuery} ParameterizedQuery","     * @readonly","     * @description","     * {@link ParameterizedQuery} class.","     *","     * Available as `pgp.ParameterizedQuery`, before and after initializing the library.","     */","    ParameterizedQuery: $npm.types.ParameterizedQuery,","","    /**","     * @member {PreparedStatement} PreparedStatement","     * @readonly","     * @description","     * {@link PreparedStatement} class.","     *","     * Available as `pgp.PreparedStatement`, before and after initializing the library.","     */","    PreparedStatement: $npm.types.PreparedStatement,","","    /**","     * @member {QueryFile} QueryFile","     * @readonly","     * @description","     * {@link QueryFile} class.","     *","     * Available as `pgp.QueryFile`, before and after initializing the library.","     */","    QueryFile: $npm.queryFile,","","","    /**","     * @member {errors} errors","     * @readonly","     * @description","     * {@link errors} - namespace for all error types.","     *","     * Available as `pgp.errors`, before and after initializing the library.","     */","    errors: $npm.errors,","","    /**","     * @member {utils} utils","     * @readonly","     * @description","     * {@link utils} - namespace for utility functions.","     *","     * Available as `pgp.utils`, before and after initializing the library.","     */","    utils: $npm.pubUtils,","","    /**","     * @member {txMode} txMode","     * @readonly","     * @description","     * {@link txMode Transaction Mode} namespace.","     *","     * Available as `pgp.txMode`, before and after initializing the library.","     */","    txMode: $npm.mode","};","","$npm.utils.addReadProperties($main, rootNameSpace);","","module.exports = $main;","","/**"," * @external Promise"," * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise"," */","","/**"," * @external PG"," * @see https://github.com/brianc/node-postgres/blob/master/lib/index.js#L17"," */","","/**"," * @external Client"," * @see https://github.com/brianc/node-postgres/blob/master/lib/client.js#L20"," */","","/**"," * @external pg-minify"," * @see https://github.com/vitaly-t/pg-minify"," */","","/**"," * @external spex"," * @see https://github.com/vitaly-t/spex"," */",""],"l":{"3":1,"124":1,"126":0,"127":0,"129":0,"130":0,"134":0,"137":0,"138":0,"139":0,"140":0,"141":0,"147":0,"149":0,"155":0,"158":0,"159":0,"161":0,"165":1,"166":1,"167":1,"168":1,"172":0,"174":0,"175":0,"176":0,"178":0,"181":0,"193":0,"203":0,"204":0,"217":0,"232":0,"234":0,"235":0,"237":0,"240":1,"346":1,"348":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/array.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/array.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"map","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}}},"2":{"name":"filter","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":30}}},"3":{"name":"forEach","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":31}}},"4":{"name":"countIf","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":31}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":22,"column":1}},"2":{"start":{"line":11,"column":4},"end":{"line":11,"column":36}},"3":{"start":{"line":12,"column":4},"end":{"line":20,"column":5}},"4":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"5":{"start":{"line":14,"column":12},"end":{"line":14,"column":50}},"6":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"7":{"start":{"line":18,"column":12},"end":{"line":18,"column":40}},"8":{"start":{"line":21,"column":4},"end":{"line":21,"column":15}},"9":{"start":{"line":31,"column":0},"end":{"line":47,"column":1}},"10":{"start":{"line":32,"column":4},"end":{"line":32,"column":17}},"11":{"start":{"line":33,"column":4},"end":{"line":45,"column":5}},"12":{"start":{"line":34,"column":8},"end":{"line":38,"column":9}},"13":{"start":{"line":35,"column":12},"end":{"line":37,"column":13}},"14":{"start":{"line":36,"column":16},"end":{"line":36,"column":33}},"15":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"16":{"start":{"line":41,"column":12},"end":{"line":43,"column":13}},"17":{"start":{"line":42,"column":16},"end":{"line":42,"column":33}},"18":{"start":{"line":46,"column":4},"end":{"line":46,"column":15}},"19":{"start":{"line":56,"column":0},"end":{"line":66,"column":1}},"20":{"start":{"line":57,"column":4},"end":{"line":65,"column":5}},"21":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"22":{"start":{"line":59,"column":12},"end":{"line":59,"column":41}},"23":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"24":{"start":{"line":63,"column":12},"end":{"line":63,"column":31}},"25":{"start":{"line":73,"column":0},"end":{"line":85,"column":1}},"26":{"start":{"line":74,"column":4},"end":{"line":74,"column":18}},"27":{"start":{"line":75,"column":4},"end":{"line":83,"column":5}},"28":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"29":{"start":{"line":77,"column":12},"end":{"line":77,"column":58}},"30":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"31":{"start":{"line":81,"column":12},"end":{"line":81,"column":48}},"32":{"start":{"line":84,"column":4},"end":{"line":84,"column":17}},"33":{"start":{"line":87,"column":0},"end":{"line":92,"column":2}},"34":{"start":{"line":94,"column":0},"end":{"line":94,"column":30}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":12}},{"start":{"line":35,"column":12},"end":{"line":35,"column":12}}]},"4":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":12}},{"start":{"line":41,"column":12},"end":{"line":41,"column":12}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"6":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"7":{"line":77,"type":"cond-expr","locations":[{"start":{"line":77,"column":52},"end":{"line":77,"column":53}},{"start":{"line":77,"column":56},"end":{"line":77,"column":57}}]},"8":{"line":81,"type":"cond-expr","locations":[{"start":{"line":81,"column":42},"end":{"line":81,"column":43}},{"start":{"line":81,"column":46},"end":{"line":81,"column":47}}]}},"code":["'use strict';","","// Number of times it is faster than the standard 'map', by Node.js versions:","// 0.10.44: ~2.8","// 0.11.16: ~3.8","// 0.12.13: ~3.8","// 4.4.4: ~1.38","// 5.11.0: ~1.44","// 6.1.0: ~8.25","function map(arr, cb, obj) {","    var res = new Array(arr.length);","    if (obj) {","        for (var i = 0; i < arr.length; i++) {","            res[i] = cb.call(obj, arr[i], i, arr);","        }","    } else {","        for (var k = 0; k < arr.length; k++) {","            res[k] = cb(arr[k], k, arr);","        }","    }","    return res;","}","","// Number of times it is faster than the standard 'filter', by Node.js versions:","// 0.10.44: ~2.42","// 0.11.16: ~2.83","// 0.12.13: ~2.78","// 4.4.4: ~1.12","// 5.11.0: ~1.14","// 6.1.0: ~7.54","function filter(arr, cb, obj) {","    var res = [];","    if (obj) {","        for (var i = 0; i < arr.length; i++) {","            if (cb.call(obj, arr[i], i, arr)) {","                res.push(arr[i]);","            }","        }","    } else {","        for (var k = 0; k < arr.length; k++) {","            if (cb(arr[k], k, arr)) {","                res.push(arr[k]);","            }","        }","    }","    return res;","}","","// Number of times it is faster than the standard 'forEach', by Node.js versions:","// 0.10.44: ~3.11","// 0.11.16: ~4.6","// 0.12.13: ~4.4","// 4.4.4: ~1.55","// 5.11.0: ~1.54","// 6.1.0: ~1.21","function forEach(arr, cb, obj) {","    if (obj) {","        for (var i = 0; i < arr.length; i++) {","            cb.call(obj, arr[i], i, arr);","        }","    } else {","        for (var k = 0; k < arr.length; k++) {","            cb(arr[k], k, arr);","        }","    }","}","","//////////////////////////","// Custom Methods","//////////////////////////","","// Counts elements based on a condition;","function countIf(arr, cb, obj) {","    var count = 0;","    if (obj) {","        for (var i = 0; i < arr.length; i++) {","            count += cb.call(obj, arr[i], i, arr) ? 1 : 0;","        }","    } else {","        for (var k = 0; k < arr.length; k++) {","            count += cb(arr[k], k, arr) ? 1 : 0;","        }","    }","    return count;","}","","module.exports = {","    map: map,","    filter: filter,","    forEach: forEach,","    countIf: countIf","};","","Object.freeze(module.exports);",""],"l":{"10":1,"11":0,"12":0,"13":0,"14":0,"17":0,"18":0,"21":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"40":0,"41":0,"42":0,"46":0,"56":1,"57":0,"58":0,"59":0,"62":0,"63":0,"73":1,"74":0,"75":0,"76":0,"77":0,"80":0,"81":0,"84":0,"87":1,"94":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/adapter.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/adapter.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"PromiseAdapter","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":49}}}},"statementMap":{"1":{"start":{"line":34,"column":0},"end":{"line":55,"column":1}},"2":{"start":{"line":36,"column":4},"end":{"line":38,"column":5}},"3":{"start":{"line":37,"column":8},"end":{"line":37,"column":59}},"4":{"start":{"line":40,"column":4},"end":{"line":40,"column":25}},"5":{"start":{"line":41,"column":4},"end":{"line":41,"column":27}},"6":{"start":{"line":42,"column":4},"end":{"line":42,"column":25}},"7":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"8":{"start":{"line":45,"column":8},"end":{"line":45,"column":80}},"9":{"start":{"line":48,"column":4},"end":{"line":50,"column":5}},"10":{"start":{"line":49,"column":8},"end":{"line":49,"column":81}},"11":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"12":{"start":{"line":53,"column":8},"end":{"line":53,"column":80}},"13":{"start":{"line":57,"column":0},"end":{"line":57,"column":32}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"3":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"4":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]}},"code":["'use strict';","","/**"," * @constructor PromiseAdapter"," * @summary Adapter for the primary promise operations."," * @description"," * Provides compatibility with promise libraries that cannot be recognized automatically,"," * via functions that implement the primary operations with promises:"," *"," *  - construct a new promise with a callback function"," *  - resolve a promise with some result data"," *  - reject a promise with a reason"," *"," * The type is available from the library's root: `pgp.PromiseAdapter`."," *"," * @param {function} create"," * A function that takes a callback parameter and returns a new promise object."," * The callback parameter is expected to be `function(resolve, reject)`."," *"," * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`"," *"," * @param {function} resolve"," * A function that takes an optional data parameter and resolves a promise with it."," *"," * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`"," *"," * @param {function} reject"," * A function that takes an optional error parameter and rejects a promise with it."," *"," * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`"," *"," * @returns {PromiseAdapter}"," */","function PromiseAdapter(create, resolve, reject) {","","    if (!(this instanceof PromiseAdapter)) {","        return new PromiseAdapter(create, resolve, reject);","    }","","    this.create = create;","    this.resolve = resolve;","    this.reject = reject;","","    if (typeof create !== 'function') {","        throw new TypeError('Adapter requires a function to create a promise.');","    }","","    if (typeof resolve !== 'function') {","        throw new TypeError('Adapter requires a function to resolve a promise.');","    }","","    if (typeof reject !== 'function') {","        throw new TypeError('Adapter requires a function to reject a promise.');","    }","}","","module.exports = PromiseAdapter;",""],"l":{"34":1,"36":0,"37":0,"40":0,"41":0,"42":0,"44":0,"45":0,"48":0,"49":0,"52":0,"53":0,"57":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/result.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/result.js","s":{"1":1,"2":1,"3":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":22,"column":0},"end":{"line":31,"column":2}},"2":{"start":{"line":33,"column":0},"end":{"line":33,"column":27}},"3":{"start":{"line":35,"column":0},"end":{"line":35,"column":29}}},"branchMap":{},"code":["'use strict';","","/**"," * @enum {number}"," * @alias queryResult"," * @readonly"," * @description"," * _Query Result Mask._"," *"," * Binary mask that represents the result expected from queries."," * It is used in the generic {@link Database.query query} method,"," * as well as method {@link Database.func func}."," *"," * The mask is always the last optional parameter, which defaults to `queryResult.any`."," *"," * Any combination of flags is supported, except for `one + many`."," *"," * The type is available from the library's root: `pgp.queryResult`."," *"," * @see {@link Database.query}, {@link Database.func}"," */","var queryResult = {","    /** Single row is expected. */","    one: 1,","    /** One or more rows expected. */","    many: 2,","    /** Expecting no rows. */","    none: 4,","    /** `many|none` - any result is expected. */","    any: 6","};","","Object.freeze(queryResult);","","module.exports = queryResult;",""],"l":{"22":1,"33":1,"35":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/promise.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/promise.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"parsePromiseLib","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":29}}},"2":{"name":"(anonymous_2)","line":11,"loc":{"start":{"line":11,"column":18},"end":{"line":11,"column":34}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":18},"end":{"line":21,"column":34}}},"4":{"name":"init","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":26}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"2":{"start":{"line":7,"column":0},"end":{"line":32,"column":1}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":16}},"4":{"start":{"line":10,"column":4},"end":{"line":17,"column":5}},"5":{"start":{"line":11,"column":8},"end":{"line":13,"column":10}},"6":{"start":{"line":12,"column":12},"end":{"line":12,"column":35}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":37}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":35}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":23}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":22}},"11":{"start":{"line":19,"column":4},"end":{"line":29,"column":5}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":70}},"13":{"start":{"line":21,"column":8},"end":{"line":23,"column":10}},"14":{"start":{"line":22,"column":12},"end":{"line":22,"column":34}},"15":{"start":{"line":24,"column":8},"end":{"line":24,"column":39}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":37}},"17":{"start":{"line":26,"column":8},"end":{"line":28,"column":9}},"18":{"start":{"line":27,"column":12},"end":{"line":27,"column":27}},"19":{"start":{"line":31,"column":4},"end":{"line":31,"column":62}},"20":{"start":{"line":34,"column":0},"end":{"line":45,"column":1}},"21":{"start":{"line":35,"column":4},"end":{"line":37,"column":6}},"22":{"start":{"line":38,"column":4},"end":{"line":43,"column":5}},"23":{"start":{"line":39,"column":8},"end":{"line":39,"column":53}},"24":{"start":{"line":41,"column":8},"end":{"line":41,"column":50}},"25":{"start":{"line":42,"column":8},"end":{"line":42,"column":36}},"26":{"start":{"line":44,"column":4},"end":{"line":44,"column":18}},"27":{"start":{"line":47,"column":0},"end":{"line":47,"column":22}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":4}},{"start":{"line":10,"column":4},"end":{"line":10,"column":4}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"3":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":24}},{"start":{"line":19,"column":28},"end":{"line":19,"column":42}}]},"4":{"line":20,"type":"cond-expr","locations":[{"start":{"line":20,"column":54},"end":{"line":20,"column":64}},{"start":{"line":20,"column":67},"end":{"line":20,"column":69}}]},"5":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":26,"column":8}},{"start":{"line":26,"column":8},"end":{"line":26,"column":8}}]},"6":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":49}},{"start":{"line":26,"column":53},"end":{"line":26,"column":89}}]},"7":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":4}},{"start":{"line":38,"column":4},"end":{"line":38,"column":4}}]}},"code":["'use strict';","","var PromiseAdapter = require('./adapter');","","//////////////////////////////////////////","// Parses and validates a promise library;","function parsePromiseLib(pl) {","","    var promise;","    if (pl instanceof PromiseAdapter) {","        promise = function (func) {","            return pl.create(func);","        };","        promise.resolve = pl.resolve;","        promise.reject = pl.reject;","        return promise;","    }","    var t = typeof pl;","    if (t === 'function' || t === 'object') {","        var Root = typeof pl.Promise === 'function' ? pl.Promise : pl;","        promise = function (func) {","            return new Root(func);","        };","        promise.resolve = Root.resolve;","        promise.reject = Root.reject;","        if (typeof promise.resolve === 'function' && typeof promise.reject === 'function') {","            return promise;","        }","    }","","    throw new TypeError('Invalid promise library specified.');","}","","function init(promiseLib) {","    var result = {","        promiseLib: promiseLib","    };","    if (promiseLib) {","        result.promise = parsePromiseLib(promiseLib);","    } else {","        result.promise = parsePromiseLib(Promise);","        result.promiseLib = Promise;","    }","    return result;","}","","module.exports = init;",""],"l":{"3":1,"7":1,"9":0,"10":0,"11":0,"12":0,"14":0,"15":0,"16":0,"18":0,"19":0,"20":0,"21":0,"22":0,"24":0,"25":0,"26":0,"27":0,"31":0,"34":1,"35":0,"38":0,"39":0,"41":0,"42":0,"44":0,"47":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/formatting.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/formatting.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":1,"82":0,"83":1,"84":0,"85":1,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":1,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":1,"194":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"formatValue","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":37}}},"2":{"name":"formatArray","line":89,"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":28}}},"3":{"name":"formatCSV","line":98,"loc":{"start":{"line":98,"column":0},"end":{"line":98,"column":27}}},"4":{"name":"isNull","line":175,"loc":{"start":{"line":175,"column":0},"end":{"line":175,"column":23}}},"5":{"name":"wrapText","line":181,"loc":{"start":{"line":181,"column":0},"end":{"line":181,"column":24}}},"6":{"name":"safeText","line":188,"loc":{"start":{"line":188,"column":0},"end":{"line":188,"column":24}}},"7":{"name":"throwIfRaw","line":194,"loc":{"start":{"line":194,"column":0},"end":{"line":194,"column":25}}},"8":{"name":"resolveFunc","line":203,"loc":{"start":{"line":203,"column":0},"end":{"line":203,"column":33}}},"9":{"name":"$formatQuery","line":227,"loc":{"start":{"line":227,"column":0},"end":{"line":227,"column":51}}},"10":{"name":"$formatFunction","line":251,"loc":{"start":{"line":251,"column":0},"end":{"line":251,"column":51}}},"11":{"name":"formatName","line":385,"loc":{"start":{"line":385,"column":8},"end":{"line":385,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":35}},"3":{"start":{"line":7,"column":0},"end":{"line":13,"column":2}},"4":{"start":{"line":16,"column":0},"end":{"line":25,"column":2}},"5":{"start":{"line":29,"column":0},"end":{"line":83,"column":1}},"6":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"7":{"start":{"line":32,"column":8},"end":{"line":32,"column":61}},"8":{"start":{"line":35,"column":4},"end":{"line":41,"column":5}},"9":{"start":{"line":36,"column":8},"end":{"line":36,"column":40}},"10":{"start":{"line":37,"column":8},"end":{"line":40,"column":9}},"11":{"start":{"line":38,"column":12},"end":{"line":38,"column":53}},"12":{"start":{"line":39,"column":12},"end":{"line":39,"column":65}},"13":{"start":{"line":43,"column":4},"end":{"line":43,"column":37}},"14":{"start":{"line":44,"column":4},"end":{"line":44,"column":23}},"15":{"start":{"line":46,"column":4},"end":{"line":57,"column":5}},"16":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"17":{"start":{"line":50,"column":12},"end":{"line":50,"column":42}},"18":{"start":{"line":52,"column":12},"end":{"line":52,"column":34}},"19":{"start":{"line":54,"column":12},"end":{"line":54,"column":36}},"20":{"start":{"line":56,"column":12},"end":{"line":56,"column":18}},"21":{"start":{"line":59,"column":4},"end":{"line":62,"column":5}},"22":{"start":{"line":60,"column":8},"end":{"line":60,"column":26}},"23":{"start":{"line":61,"column":8},"end":{"line":61,"column":22}},"24":{"start":{"line":64,"column":4},"end":{"line":82,"column":5}},"25":{"start":{"line":66,"column":12},"end":{"line":66,"column":42}},"26":{"start":{"line":68,"column":12},"end":{"line":68,"column":35}},"27":{"start":{"line":70,"column":12},"end":{"line":70,"column":37}},"28":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"29":{"start":{"line":73,"column":16},"end":{"line":73,"column":46}},"30":{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},"31":{"start":{"line":76,"column":16},"end":{"line":76,"column":40}},"32":{"start":{"line":78,"column":12},"end":{"line":80,"column":13}},"33":{"start":{"line":79,"column":16},"end":{"line":79,"column":48}},"34":{"start":{"line":81,"column":12},"end":{"line":81,"column":42}},"35":{"start":{"line":89,"column":0},"end":{"line":92,"column":1}},"36":{"start":{"line":90,"column":4},"end":{"line":90,"column":103}},"37":{"start":{"line":90,"column":20},"end":{"line":90,"column":102}},"38":{"start":{"line":90,"column":43},"end":{"line":90,"column":88}},"39":{"start":{"line":91,"column":4},"end":{"line":91,"column":33}},"40":{"start":{"line":98,"column":0},"end":{"line":103,"column":1}},"41":{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},"42":{"start":{"line":100,"column":8},"end":{"line":100,"column":60}},"43":{"start":{"line":100,"column":37},"end":{"line":100,"column":51}},"44":{"start":{"line":102,"column":4},"end":{"line":102,"column":59}},"45":{"start":{"line":107,"column":0},"end":{"line":171,"column":2}},"46":{"start":{"line":110,"column":8},"end":{"line":110,"column":72}},"47":{"start":{"line":111,"column":8},"end":{"line":111,"column":248}},"48":{"start":{"line":112,"column":8},"end":{"line":129,"column":11}},"49":{"start":{"line":113,"column":12},"end":{"line":113,"column":88}},"50":{"start":{"line":114,"column":12},"end":{"line":116,"column":13}},"51":{"start":{"line":115,"column":16},"end":{"line":115,"column":59}},"52":{"start":{"line":117,"column":12},"end":{"line":119,"column":13}},"53":{"start":{"line":118,"column":16},"end":{"line":118,"column":46}},"54":{"start":{"line":120,"column":12},"end":{"line":123,"column":13}},"55":{"start":{"line":121,"column":16},"end":{"line":121,"column":104}},"56":{"start":{"line":122,"column":16},"end":{"line":122,"column":53}},"57":{"start":{"line":124,"column":12},"end":{"line":126,"column":13}},"58":{"start":{"line":125,"column":16},"end":{"line":125,"column":28}},"59":{"start":{"line":128,"column":12},"end":{"line":128,"column":75}},"60":{"start":{"line":133,"column":8},"end":{"line":133,"column":72}},"61":{"start":{"line":134,"column":8},"end":{"line":148,"column":11}},"62":{"start":{"line":135,"column":12},"end":{"line":135,"column":60}},"63":{"start":{"line":136,"column":12},"end":{"line":136,"column":33}},"64":{"start":{"line":137,"column":12},"end":{"line":139,"column":13}},"65":{"start":{"line":138,"column":16},"end":{"line":138,"column":53}},"66":{"start":{"line":140,"column":12},"end":{"line":143,"column":13}},"67":{"start":{"line":141,"column":16},"end":{"line":141,"column":105}},"68":{"start":{"line":142,"column":16},"end":{"line":142,"column":48}},"69":{"start":{"line":144,"column":12},"end":{"line":146,"column":13}},"70":{"start":{"line":145,"column":16},"end":{"line":145,"column":28}},"71":{"start":{"line":147,"column":12},"end":{"line":147,"column":116}},"72":{"start":{"line":152,"column":8},"end":{"line":155,"column":11}},"73":{"start":{"line":153,"column":12},"end":{"line":153,"column":50}},"74":{"start":{"line":154,"column":12},"end":{"line":154,"column":44}},"75":{"start":{"line":159,"column":8},"end":{"line":159,"column":68}},"76":{"start":{"line":160,"column":8},"end":{"line":165,"column":9}},"77":{"start":{"line":161,"column":12},"end":{"line":164,"column":14}},"78":{"start":{"line":166,"column":8},"end":{"line":169,"column":10}},"79":{"start":{"line":175,"column":0},"end":{"line":177,"column":1}},"80":{"start":{"line":176,"column":4},"end":{"line":176,"column":49}},"81":{"start":{"line":181,"column":0},"end":{"line":183,"column":1}},"82":{"start":{"line":182,"column":4},"end":{"line":182,"column":30}},"83":{"start":{"line":188,"column":0},"end":{"line":190,"column":1}},"84":{"start":{"line":189,"column":4},"end":{"line":189,"column":38}},"85":{"start":{"line":194,"column":0},"end":{"line":198,"column":1}},"86":{"start":{"line":195,"column":4},"end":{"line":197,"column":5}},"87":{"start":{"line":196,"column":8},"end":{"line":196,"column":81}},"88":{"start":{"line":203,"column":0},"end":{"line":208,"column":1}},"89":{"start":{"line":204,"column":4},"end":{"line":206,"column":5}},"90":{"start":{"line":205,"column":8},"end":{"line":205,"column":48}},"91":{"start":{"line":207,"column":4},"end":{"line":207,"column":17}},"92":{"start":{"line":227,"column":0},"end":{"line":247,"column":1}},"93":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"94":{"start":{"line":229,"column":8},"end":{"line":229,"column":74}},"95":{"start":{"line":231,"column":4},"end":{"line":244,"column":5}},"96":{"start":{"line":232,"column":8},"end":{"line":232,"column":41}},"97":{"start":{"line":233,"column":8},"end":{"line":235,"column":9}},"98":{"start":{"line":234,"column":12},"end":{"line":234,"column":100}},"99":{"start":{"line":236,"column":8},"end":{"line":239,"column":9}},"100":{"start":{"line":238,"column":12},"end":{"line":238,"column":63}},"101":{"start":{"line":240,"column":8},"end":{"line":243,"column":9}},"102":{"start":{"line":242,"column":12},"end":{"line":242,"column":64}},"103":{"start":{"line":246,"column":4},"end":{"line":246,"column":77}},"104":{"start":{"line":251,"column":0},"end":{"line":254,"column":1}},"105":{"start":{"line":252,"column":4},"end":{"line":252,"column":59}},"106":{"start":{"line":253,"column":4},"end":{"line":253,"column":58}},"107":{"start":{"line":286,"column":0},"end":{"line":688,"column":2}},"108":{"start":{"line":315,"column":8},"end":{"line":315,"column":35}},"109":{"start":{"line":316,"column":8},"end":{"line":319,"column":9}},"110":{"start":{"line":317,"column":12},"end":{"line":317,"column":28}},"111":{"start":{"line":318,"column":12},"end":{"line":318,"column":26}},"112":{"start":{"line":320,"column":8},"end":{"line":322,"column":9}},"113":{"start":{"line":321,"column":12},"end":{"line":321,"column":37}},"114":{"start":{"line":323,"column":8},"end":{"line":323,"column":55}},"115":{"start":{"line":364,"column":8},"end":{"line":364,"column":33}},"116":{"start":{"line":365,"column":8},"end":{"line":381,"column":9}},"117":{"start":{"line":366,"column":12},"end":{"line":368,"column":13}},"118":{"start":{"line":367,"column":16},"end":{"line":367,"column":75}},"119":{"start":{"line":369,"column":12},"end":{"line":380,"column":13}},"120":{"start":{"line":370,"column":16},"end":{"line":370,"column":74}},"121":{"start":{"line":371,"column":16},"end":{"line":373,"column":17}},"122":{"start":{"line":372,"column":20},"end":{"line":372,"column":93}},"123":{"start":{"line":374,"column":16},"end":{"line":379,"column":26}},"124":{"start":{"line":375,"column":20},"end":{"line":377,"column":21}},"125":{"start":{"line":376,"column":24},"end":{"line":376,"column":86}},"126":{"start":{"line":378,"column":20},"end":{"line":378,"column":45}},"127":{"start":{"line":383,"column":8},"end":{"line":383,"column":73}},"128":{"start":{"line":385,"column":8},"end":{"line":387,"column":9}},"129":{"start":{"line":386,"column":12},"end":{"line":386,"column":56}},"130":{"start":{"line":405,"column":8},"end":{"line":405,"column":35}},"131":{"start":{"line":406,"column":8},"end":{"line":408,"column":9}},"132":{"start":{"line":407,"column":12},"end":{"line":407,"column":76}},"133":{"start":{"line":409,"column":8},"end":{"line":409,"column":57}},"134":{"start":{"line":428,"column":8},"end":{"line":428,"column":31}},"135":{"start":{"line":429,"column":8},"end":{"line":432,"column":9}},"136":{"start":{"line":430,"column":12},"end":{"line":430,"column":28}},"137":{"start":{"line":431,"column":12},"end":{"line":431,"column":26}},"138":{"start":{"line":433,"column":8},"end":{"line":436,"column":9}},"139":{"start":{"line":434,"column":12},"end":{"line":434,"column":48}},"140":{"start":{"line":435,"column":12},"end":{"line":435,"column":41}},"141":{"start":{"line":437,"column":8},"end":{"line":437,"column":72}},"142":{"start":{"line":451,"column":8},"end":{"line":451,"column":35}},"143":{"start":{"line":452,"column":8},"end":{"line":454,"column":9}},"144":{"start":{"line":453,"column":12},"end":{"line":453,"column":26}},"145":{"start":{"line":455,"column":8},"end":{"line":455,"column":40}},"146":{"start":{"line":473,"column":8},"end":{"line":473,"column":27}},"147":{"start":{"line":474,"column":8},"end":{"line":477,"column":9}},"148":{"start":{"line":475,"column":12},"end":{"line":475,"column":28}},"149":{"start":{"line":476,"column":12},"end":{"line":476,"column":26}},"150":{"start":{"line":478,"column":8},"end":{"line":481,"column":9}},"151":{"start":{"line":479,"column":12},"end":{"line":479,"column":45}},"152":{"start":{"line":480,"column":12},"end":{"line":480,"column":41}},"153":{"start":{"line":482,"column":8},"end":{"line":482,"column":68}},"154":{"start":{"line":497,"column":8},"end":{"line":497,"column":31}},"155":{"start":{"line":498,"column":8},"end":{"line":500,"column":9}},"156":{"start":{"line":499,"column":12},"end":{"line":499,"column":26}},"157":{"start":{"line":501,"column":8},"end":{"line":503,"column":9}},"158":{"start":{"line":502,"column":12},"end":{"line":502,"column":69}},"159":{"start":{"line":504,"column":8},"end":{"line":506,"column":9}},"160":{"start":{"line":505,"column":12},"end":{"line":505,"column":34}},"161":{"start":{"line":511,"column":8},"end":{"line":513,"column":9}},"162":{"start":{"line":512,"column":12},"end":{"line":512,"column":41}},"163":{"start":{"line":514,"column":8},"end":{"line":516,"column":9}},"164":{"start":{"line":515,"column":12},"end":{"line":515,"column":41}},"165":{"start":{"line":517,"column":8},"end":{"line":517,"column":31}},"166":{"start":{"line":532,"column":8},"end":{"line":532,"column":31}},"167":{"start":{"line":533,"column":8},"end":{"line":535,"column":9}},"168":{"start":{"line":534,"column":12},"end":{"line":534,"column":26}},"169":{"start":{"line":536,"column":8},"end":{"line":538,"column":9}},"170":{"start":{"line":537,"column":12},"end":{"line":537,"column":36}},"171":{"start":{"line":539,"column":8},"end":{"line":539,"column":72}},"172":{"start":{"line":553,"column":19},"end":{"line":553,"column":49}},"173":{"start":{"line":570,"column":8},"end":{"line":570,"column":31}},"174":{"start":{"line":571,"column":8},"end":{"line":574,"column":9}},"175":{"start":{"line":572,"column":12},"end":{"line":572,"column":28}},"176":{"start":{"line":573,"column":12},"end":{"line":573,"column":26}},"177":{"start":{"line":575,"column":8},"end":{"line":575,"column":36}},"178":{"start":{"line":576,"column":8},"end":{"line":576,"column":47}},"179":{"start":{"line":597,"column":8},"end":{"line":600,"column":9}},"180":{"start":{"line":598,"column":12},"end":{"line":598,"column":28}},"181":{"start":{"line":599,"column":12},"end":{"line":599,"column":26}},"182":{"start":{"line":601,"column":8},"end":{"line":603,"column":9}},"183":{"start":{"line":602,"column":12},"end":{"line":602,"column":72}},"184":{"start":{"line":604,"column":8},"end":{"line":604,"column":42}},"185":{"start":{"line":605,"column":8},"end":{"line":607,"column":9}},"186":{"start":{"line":606,"column":12},"end":{"line":606,"column":54}},"187":{"start":{"line":608,"column":8},"end":{"line":610,"column":9}},"188":{"start":{"line":609,"column":12},"end":{"line":609,"column":64}},"189":{"start":{"line":611,"column":8},"end":{"line":611,"column":66}},"190":{"start":{"line":683,"column":8},"end":{"line":685,"column":9}},"191":{"start":{"line":684,"column":12},"end":{"line":684,"column":41}},"192":{"start":{"line":686,"column":8},"end":{"line":686,"column":59}},"193":{"start":{"line":690,"column":0},"end":{"line":690,"column":19}},"194":{"start":{"line":692,"column":0},"end":{"line":696,"column":2}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"3":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":13}},{"start":{"line":35,"column":17},"end":{"line":35,"column":42}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"5":{"line":38,"type":"cond-expr","locations":[{"start":{"line":38,"column":37},"end":{"line":38,"column":48}},{"start":{"line":38,"column":51},"end":{"line":38,"column":52}}]},"6":{"line":46,"type":"switch","locations":[{"start":{"line":47,"column":8},"end":{"line":48,"column":35}},{"start":{"line":49,"column":8},"end":{"line":50,"column":42}},{"start":{"line":51,"column":8},"end":{"line":52,"column":34}},{"start":{"line":53,"column":8},"end":{"line":54,"column":36}},{"start":{"line":55,"column":8},"end":{"line":56,"column":18}}]},"7":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"8":{"line":64,"type":"switch","locations":[{"start":{"line":65,"column":8},"end":{"line":66,"column":42}},{"start":{"line":67,"column":8},"end":{"line":68,"column":35}},{"start":{"line":69,"column":8},"end":{"line":70,"column":37}},{"start":{"line":71,"column":8},"end":{"line":81,"column":42}}]},"9":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":72,"column":12}},{"start":{"line":72,"column":12},"end":{"line":72,"column":12}}]},"10":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":12}},{"start":{"line":75,"column":12},"end":{"line":75,"column":12}}]},"11":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":12},"end":{"line":78,"column":12}},{"start":{"line":78,"column":12},"end":{"line":78,"column":12}}]},"12":{"line":90,"type":"cond-expr","locations":[{"start":{"line":90,"column":64},"end":{"line":90,"column":71}},{"start":{"line":90,"column":74},"end":{"line":90,"column":88}}]},"13":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":4},"end":{"line":99,"column":4}},{"start":{"line":99,"column":4},"end":{"line":99,"column":4}}]},"14":{"line":102,"type":"cond-expr","locations":[{"start":{"line":102,"column":34},"end":{"line":102,"column":36}},{"start":{"line":102,"column":39},"end":{"line":102,"column":58}}]},"15":{"line":110,"type":"cond-expr","locations":[{"start":{"line":110,"column":59},"end":{"line":110,"column":66}},{"start":{"line":110,"column":69},"end":{"line":110,"column":71}}]},"16":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":18},"end":{"line":110,"column":25}},{"start":{"line":110,"column":29},"end":{"line":110,"column":56}}]},"17":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":12},"end":{"line":114,"column":12}},{"start":{"line":114,"column":12},"end":{"line":114,"column":12}}]},"18":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":12},"end":{"line":117,"column":12}},{"start":{"line":117,"column":12},"end":{"line":117,"column":12}}]},"19":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":12},"end":{"line":120,"column":12}},{"start":{"line":120,"column":12},"end":{"line":120,"column":12}}]},"20":{"line":121,"type":"cond-expr","locations":[{"start":{"line":121,"column":75},"end":{"line":121,"column":99}},{"start":{"line":121,"column":102},"end":{"line":121,"column":103}}]},"21":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":124,"column":12}},{"start":{"line":124,"column":12},"end":{"line":124,"column":12}}]},"22":{"line":133,"type":"cond-expr","locations":[{"start":{"line":133,"column":59},"end":{"line":133,"column":66}},{"start":{"line":133,"column":69},"end":{"line":133,"column":71}}]},"23":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":18},"end":{"line":133,"column":25}},{"start":{"line":133,"column":29},"end":{"line":133,"column":56}}]},"24":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":12},"end":{"line":137,"column":12}},{"start":{"line":137,"column":12},"end":{"line":137,"column":12}}]},"25":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":12},"end":{"line":140,"column":12}},{"start":{"line":140,"column":12},"end":{"line":140,"column":12}}]},"26":{"line":141,"type":"cond-expr","locations":[{"start":{"line":141,"column":75},"end":{"line":141,"column":100}},{"start":{"line":141,"column":103},"end":{"line":141,"column":104}}]},"27":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":12},"end":{"line":144,"column":12}},{"start":{"line":144,"column":12},"end":{"line":144,"column":12}}]},"28":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":8}},{"start":{"line":160,"column":8},"end":{"line":160,"column":8}}]},"29":{"line":163,"type":"cond-expr","locations":[{"start":{"line":163,"column":43},"end":{"line":163,"column":54}},{"start":{"line":163,"column":57},"end":{"line":163,"column":58}}]},"30":{"line":168,"type":"cond-expr","locations":[{"start":{"line":168,"column":22},"end":{"line":168,"column":33}},{"start":{"line":168,"column":36},"end":{"line":168,"column":40}}]},"31":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":11},"end":{"line":176,"column":30}},{"start":{"line":176,"column":34},"end":{"line":176,"column":48}}]},"32":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":4},"end":{"line":195,"column":4}},{"start":{"line":195,"column":4},"end":{"line":195,"column":4}}]},"33":{"line":205,"type":"cond-expr","locations":[{"start":{"line":205,"column":22},"end":{"line":205,"column":37}},{"start":{"line":205,"column":40},"end":{"line":205,"column":47}}]},"34":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":228,"column":4}},{"start":{"line":228,"column":4},"end":{"line":228,"column":4}}]},"35":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":4},"end":{"line":231,"column":4}},{"start":{"line":231,"column":4},"end":{"line":231,"column":4}}]},"36":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":8},"end":{"line":231,"column":14}},{"start":{"line":231,"column":18},"end":{"line":231,"column":44}}]},"37":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]},"38":{"line":234,"type":"binary-expr","locations":[{"start":{"line":234,"column":65},"end":{"line":234,"column":68}},{"start":{"line":234,"column":72},"end":{"line":234,"column":89}}]},"39":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":8},"end":{"line":236,"column":8}},{"start":{"line":236,"column":8},"end":{"line":236,"column":8}}]},"40":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":8},"end":{"line":240,"column":8}},{"start":{"line":240,"column":8},"end":{"line":240,"column":8}}]},"41":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":14},"end":{"line":240,"column":36}},{"start":{"line":240,"column":40},"end":{"line":240,"column":64}}]},"42":{"line":246,"type":"cond-expr","locations":[{"start":{"line":246,"column":34},"end":{"line":246,"column":39}},{"start":{"line":246,"column":42},"end":{"line":246,"column":76}}]},"43":{"line":252,"type":"cond-expr","locations":[{"start":{"line":252,"column":23},"end":{"line":252,"column":39}},{"start":{"line":252,"column":42},"end":{"line":252,"column":58}}]},"44":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":8},"end":{"line":316,"column":8}},{"start":{"line":316,"column":8},"end":{"line":316,"column":8}}]},"45":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":8},"end":{"line":320,"column":8}},{"start":{"line":320,"column":8},"end":{"line":320,"column":8}}]},"46":{"line":323,"type":"cond-expr","locations":[{"start":{"line":323,"column":21},"end":{"line":323,"column":26}},{"start":{"line":323,"column":29},"end":{"line":323,"column":54}}]},"47":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":8},"end":{"line":365,"column":8}},{"start":{"line":365,"column":8},"end":{"line":365,"column":8}}]},"48":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":12},"end":{"line":366,"column":12}},{"start":{"line":366,"column":12},"end":{"line":366,"column":12}}]},"49":{"line":367,"type":"cond-expr","locations":[{"start":{"line":367,"column":51},"end":{"line":367,"column":55}},{"start":{"line":367,"column":58},"end":{"line":367,"column":74}}]},"50":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":12},"end":{"line":369,"column":12}},{"start":{"line":369,"column":12},"end":{"line":369,"column":12}}]},"51":{"line":370,"type":"cond-expr","locations":[{"start":{"line":370,"column":49},"end":{"line":370,"column":53}},{"start":{"line":370,"column":56},"end":{"line":370,"column":73}}]},"52":{"line":371,"type":"if","locations":[{"start":{"line":371,"column":16},"end":{"line":371,"column":16}},{"start":{"line":371,"column":16},"end":{"line":371,"column":16}}]},"53":{"line":375,"type":"if","locations":[{"start":{"line":375,"column":20},"end":{"line":375,"column":20}},{"start":{"line":375,"column":20},"end":{"line":375,"column":20}}]},"54":{"line":375,"type":"binary-expr","locations":[{"start":{"line":375,"column":24},"end":{"line":375,"column":30}},{"start":{"line":375,"column":34},"end":{"line":375,"column":59}}]},"55":{"line":406,"type":"if","locations":[{"start":{"line":406,"column":8},"end":{"line":406,"column":8}},{"start":{"line":406,"column":8},"end":{"line":406,"column":8}}]},"56":{"line":429,"type":"if","locations":[{"start":{"line":429,"column":8},"end":{"line":429,"column":8}},{"start":{"line":429,"column":8},"end":{"line":429,"column":8}}]},"57":{"line":433,"type":"if","locations":[{"start":{"line":433,"column":8},"end":{"line":433,"column":8}},{"start":{"line":433,"column":8},"end":{"line":433,"column":8}}]},"58":{"line":435,"type":"cond-expr","locations":[{"start":{"line":435,"column":25},"end":{"line":435,"column":26}},{"start":{"line":435,"column":29},"end":{"line":435,"column":40}}]},"59":{"line":452,"type":"if","locations":[{"start":{"line":452,"column":8},"end":{"line":452,"column":8}},{"start":{"line":452,"column":8},"end":{"line":452,"column":8}}]},"60":{"line":455,"type":"cond-expr","locations":[{"start":{"line":455,"column":23},"end":{"line":455,"column":29}},{"start":{"line":455,"column":32},"end":{"line":455,"column":39}}]},"61":{"line":474,"type":"if","locations":[{"start":{"line":474,"column":8},"end":{"line":474,"column":8}},{"start":{"line":474,"column":8},"end":{"line":474,"column":8}}]},"62":{"line":478,"type":"if","locations":[{"start":{"line":478,"column":8},"end":{"line":478,"column":8}},{"start":{"line":478,"column":8},"end":{"line":478,"column":8}}]},"63":{"line":480,"type":"cond-expr","locations":[{"start":{"line":480,"column":25},"end":{"line":480,"column":26}},{"start":{"line":480,"column":29},"end":{"line":480,"column":40}}]},"64":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":8},"end":{"line":498,"column":8}},{"start":{"line":498,"column":8},"end":{"line":498,"column":8}}]},"65":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":8},"end":{"line":501,"column":8}},{"start":{"line":501,"column":8},"end":{"line":501,"column":8}}]},"66":{"line":504,"type":"if","locations":[{"start":{"line":504,"column":8},"end":{"line":504,"column":8}},{"start":{"line":504,"column":8},"end":{"line":504,"column":8}}]},"67":{"line":511,"type":"if","locations":[{"start":{"line":511,"column":8},"end":{"line":511,"column":8}},{"start":{"line":511,"column":8},"end":{"line":511,"column":8}}]},"68":{"line":514,"type":"if","locations":[{"start":{"line":514,"column":8},"end":{"line":514,"column":8}},{"start":{"line":514,"column":8},"end":{"line":514,"column":8}}]},"69":{"line":533,"type":"if","locations":[{"start":{"line":533,"column":8},"end":{"line":533,"column":8}},{"start":{"line":533,"column":8},"end":{"line":533,"column":8}}]},"70":{"line":536,"type":"if","locations":[{"start":{"line":536,"column":8},"end":{"line":536,"column":8}},{"start":{"line":536,"column":8},"end":{"line":536,"column":8}}]},"71":{"line":571,"type":"if","locations":[{"start":{"line":571,"column":8},"end":{"line":571,"column":8}},{"start":{"line":571,"column":8},"end":{"line":571,"column":8}}]},"72":{"line":576,"type":"cond-expr","locations":[{"start":{"line":576,"column":21},"end":{"line":576,"column":22}},{"start":{"line":576,"column":25},"end":{"line":576,"column":46}}]},"73":{"line":597,"type":"if","locations":[{"start":{"line":597,"column":8},"end":{"line":597,"column":8}},{"start":{"line":597,"column":8},"end":{"line":597,"column":8}}]},"74":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":8},"end":{"line":601,"column":8}},{"start":{"line":601,"column":8},"end":{"line":601,"column":8}}]},"75":{"line":604,"type":"cond-expr","locations":[{"start":{"line":604,"column":23},"end":{"line":604,"column":34}},{"start":{"line":604,"column":37},"end":{"line":604,"column":41}}]},"76":{"line":605,"type":"if","locations":[{"start":{"line":605,"column":8},"end":{"line":605,"column":8}},{"start":{"line":605,"column":8},"end":{"line":605,"column":8}}]},"77":{"line":608,"type":"if","locations":[{"start":{"line":608,"column":8},"end":{"line":608,"column":8}},{"start":{"line":608,"column":8},"end":{"line":608,"column":8}}]},"78":{"line":683,"type":"if","locations":[{"start":{"line":683,"column":8},"end":{"line":683,"column":8}},{"start":{"line":683,"column":8},"end":{"line":683,"column":8}}]},"79":{"line":683,"type":"binary-expr","locations":[{"start":{"line":683,"column":12},"end":{"line":683,"column":17}},{"start":{"line":683,"column":21},"end":{"line":683,"column":61}}]}},"code":["'use strict';","","var $pgUtils = require('pg/lib/utils');","var $arr = require('../lib/array');","","// Format Modification Flags;","var fmFlags = {","    raw: 1, // Raw-Text variable","    name: 2, // SQL Name/Identifier","    json: 4, // JSON modifier","    csv: 8, // CSV modifier","    value: 16 // escaped, but without ''","};","","// Format Modification Map;","var fmMap = {","    '^': fmFlags.raw,","    ':raw': fmFlags.raw,","    '~': fmFlags.name,","    ':name': fmFlags.name,","    ':json': fmFlags.json,","    ':csv': fmFlags.csv,","    ':value': fmFlags.value,","    '#': fmFlags.value","};","","////////////////////////////////////////////////////","// Converts a single value into its Postgres format.","function formatValue(value, fm, obj) {","","    if (typeof value === 'function') {","        return formatValue(resolveFunc(value, obj), fm, obj);","    }","","    if (value && typeof value === 'object') {","        var ctf = value['formatDBType']; // custom type formatting;","        if (typeof ctf === 'function') {","            fm |= value._rawDBType ? fmFlags.raw : 0;","            return formatValue(resolveFunc(ctf, value), fm, obj);","        }","    }","","    var isRaw = !!(fm & fmFlags.raw);","    fm &= ~fmFlags.raw;","","    switch (fm) {","        case fmFlags.name:","            return $as.name(value);","        case fmFlags.json:","            return $as.json(value, isRaw);","        case fmFlags.csv:","            return $as.csv(value);","        case fmFlags.value:","            return $as.value(value);","        default:","            break;","    }","","    if (isNull(value)) {","        throwIfRaw(isRaw);","        return 'null';","    }","","    switch (typeof value) {","        case 'string':","            return $as.text(value, isRaw);","        case 'boolean':","            return $as.bool(value);","        case 'number':","            return $as.number(value);","        default:","            if (value instanceof Date) {","                return $as.date(value, isRaw);","            }","            if (value instanceof Array) {","                return $as.array(value);","            }","            if (value instanceof Buffer) {","                return $as.buffer(value, isRaw);","            }","            return $as.json(value, isRaw);","    }","}","","//////////////////////////////////////////////////////////////////////////","// Converts array of values into PostgreSQL Array Constructor: array[...],","// as per PostgreSQL documentation: http://www.postgresql.org/docs/9.4/static/arrays.html","// Arrays of any depth/dimension are supported.","function formatArray(array) {","    var loop = a => '[' + $arr.map(a, v => v instanceof Array ? loop(v) : formatValue(v)).join() + ']';","    return 'array' + loop(array);","}","","///////////////////////////////////////////////////////////////","// Formats array of javascript-type parameters as a csv string,","// so it can be passed into a PostgreSQL function.","// Both single value and array or values are supported.","function formatCSV(values) {","    if (values instanceof Array) {","        return $arr.map(values, v => formatValue(v)).join();","    }","    return values === undefined ? '' : formatValue(values);","}","","///////////////////////////////","// Query formatting helpers;","var formatAs = {","","    object: (query, obj, raw, options) => {","        options = options && typeof options === 'object' ? options : {};","        var pattern = /\\$(?:({)|(\\()|(<)|(\\[)|(\\/))\\s*[a-zA-Z0-9\\$_]+(\\^|~|#|:raw|:name|:json|:csv|:value)?\\s*(?:(?=\\2)(?=\\3)(?=\\4)(?=\\5)}|(?=\\1)(?=\\3)(?=\\4)(?=\\5)\\)|(?=\\1)(?=\\2)(?=\\4)(?=\\5)>|(?=\\1)(?=\\2)(?=\\3)(?=\\5)]|(?=\\1)(?=\\2)(?=\\3)(?=\\4)\\/)/g;","        return query.replace(pattern, name => {","            var v = formatAs.stripName(name.replace(/^\\$[{(<[/]|[\\s})>\\]/]/g, ''), raw);","            if (v.name in obj) {","                return formatValue(obj[v.name], v.fm, obj);","            }","            if (v.name === 'this') {","                return formatValue(obj, v.fm);","            }","            if ('default' in options) {","                var d = options.default, value = typeof d === 'function' ? d.call(obj, v.name, obj) : d;","                return formatValue(value, v.fm, obj);","            }","            if (options.partial) {","                return name;","            }","            // property must exist as the object's own or inherited;","            throw new Error('Property \\'' + v.name + '\\' doesn\\'t exist.');","        });","    },","","    array: (query, array, raw, options) => {","        options = options && typeof options === 'object' ? options : {};","        return query.replace(/\\$([1-9][0-9]{0,3}(?![0-9])(\\^|~|#|:raw|:name|:json|:csv|:value)?)/g, name => {","            var v = formatAs.stripName(name.substr(1), raw);","            var idx = v.name - 1;","            if (idx < array.length) {","                return formatValue(array[idx], v.fm);","            }","            if ('default' in options) {","                var d = options.default, value = typeof d === 'function' ? d.call(array, idx, array) : d;","                return formatValue(value, v.fm);","            }","            if (options.partial) {","                return name;","            }","            throw new RangeError('Variable $' + v.name + ' out of range. Parameters array length: ' + array.length);","        });","    },","","    value: (query, value, raw) => {","        return query.replace(/\\$1(?![0-9])(\\^|~|#|:raw|:name|:json|:csv|:value)?/g, name => {","            var v = formatAs.stripName(name, raw);","            return formatValue(value, v.fm);","        });","    },","","    stripName: (name, raw) => {","        var mod = name.match(/\\^|~|#|:raw|:name|:json|:csv|:value/);","        if (mod) {","            return {","                name: name.substr(0, mod.index),","                fm: fmMap[mod[0]] | (raw ? fmFlags.raw : 0)","            };","        }","        return {","            name: name,","            fm: raw ? fmFlags.raw : null","        };","    }","};","","////////////////////////////////////////////","// Simpler check for null/undefined;","function isNull(value) {","    return value === undefined || value === null;","}","","/////////////////////////////////////////","// Wraps a text string in single quotes;","function wrapText(text) {","    return '\\'' + text + '\\'';","}","","////////////////////////////////////////////////","// Replaces each single-quote symbol ' with two,","// for compliance with PostgreSQL strings.","function safeText(text) {","    return text.replace(/'/g, '\\'\\'');","}","","/////////////////////////////////////////////","// Throws an exception, if flag 'raw' is set.","function throwIfRaw(raw) {","    if (raw) {","        throw new TypeError('Values null/undefined cannot be used as raw text.');","    }","}","","////////////////////////////////////////////","// Recursively resolves parameter-function,","// with the optional calling context.","function resolveFunc(value, obj) {","    while (typeof value === 'function') {","        value = obj ? value.call(obj) : value();","    }","    return value;","}","","///////////////////////////////////////////////////////////////////////////////////","// 'pg-promise' query formatting solution;","//","// It implements two types of formatting, depending on the 'values' passed:","//","// 1. format \"$1, $2, etc\", when 'values' is of type string, boolean, number, date,","//    function or null (or an array of the same types, plus undefined values);","// 2. format $*propName*, when 'values' is an object (not null and not Date),","//    and where * is any of the supported open-close pairs: {}, (), [], <>, //","//","// NOTES:","// 1. Raw-text values can be injected using syntax: $1^,$2^,... or $*propName^*","// 2. If 'values' is an object that supports function formatDBType, either its","//    own or inherited, the actual value and the formatting syntax are determined","//    by the result returned from that function.","//","// When formatting fails, the function throws an error.","function $formatQuery(query, values, raw, options) {","    if (typeof query !== 'string') {","        throw new TypeError('Parameter \\'query\\' must be a text string.');","    }","    if (values && typeof values === 'object') {","        var ctf = values['formatDBType']; // custom type formatting;","        if (typeof ctf === 'function') {","            return $formatQuery(query, resolveFunc(ctf, values), raw || values._rawDBType, options);","        }","        if (values instanceof Array) {","            // $1, $2,... formatting to be applied;","            return formatAs.array(query, values, raw, options);","        }","        if (!(values instanceof Date || values instanceof Buffer)) {","            // $*propName* formatting to be applied;","            return formatAs.object(query, values, raw, options);","        }","    }","    // $1 formatting to be applied, if values != undefined;","    return values === undefined ? query : formatAs.value(query, values, raw);","}","","//////////////////////////////////////////////////////","// Formats a standard PostgreSQL function call query;","function $formatFunction(funcName, values, capSQL) {","    var sql = capSQL ? 'SELECT * FROM ' : 'select * from ';","    return sql + funcName + '(' + formatCSV(values) + ')';","}","","/**"," * @namespace formatting"," * @description"," * Namespace for all query-formatting functions, available from `pgp.as`, before and after initializing the library."," *"," * @property {function} name"," * {@link formatting.name name} - formats an SQL name."," *"," * @property {function} text"," * {@link formatting.text text} - formats a text string."," *"," * @property {function} number"," * {@link formatting.number number} - formats a number."," *"," * @property {function} buffer"," * {@link formatting.buffer buffer} - formats a `Buffer` object."," *"," * @property {function} value"," * {@link formatting.value value} - formats text as an open value."," *"," * @property {function} json"," * {@link formatting.json json} - formats any value as JSON."," *"," * @property {function} func"," * {@link formatting.func func} - formats the value returned from a function."," *"," * @property {function} format"," * {@link formatting.format format} - formats a query according to parameters."," *"," */","var $as = {","","    /**","     * @method formatting.text","     * @description","     * Converts a value into PostgreSQL text presentation, escaped as required.","     *","     * Escaping the result means:","     *  1. Every single-quote (apostrophe) is replaced with two","     *  2. The resulting text is wrapped in apostrophes","     *","     * @param {value|function} value","     * Value to be converted, or a function that returns the value.","     *","     * If the `value` resolves as `null` or `undefined`, while `raw`=`true`,","     * it will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`","     *","     * @param {boolean} [raw=false]","     * Indicates when not to escape the resulting text.","     *","     * @returns {string}","     *","     * - `null` string, if the `value` resolves as `null` or `undefined`","     * - escaped result of `value.toString()`, if the `value` isn't a string","     * - escaped string version, if `value` is a string.","     *","     *  The result is not escaped, if `raw` was passed in as `true`.","     */","    text: (value, raw) => {","        value = resolveFunc(value);","        if (isNull(value)) {","            throwIfRaw(raw);","            return 'null';","        }","        if (typeof value !== 'string') {","            value = value.toString();","        }","        return raw ? value : wrapText(safeText(value));","    },","","    /**","     * @method formatting.name","     * @description","     * Properly escapes an sql name or identifier, fixing double-quote symbols and wrapping the result in double quotes.","     *","     * Implements a safe way to format SQL Names that neutralizes SQL Injection.","     *","     * @param {string|function|array|object} name","     * SQL name or identifier, or a function that returns it.","     *","     * The name must be at least 1 character long.","     *","     * If `name` doesn't resolve into a non-empty string, it throws {@link external:TypeError TypeError} = `Invalid sql name: ...`","     *","     * If the `name` contains only a single `*` (trailing spaces are ignored), then `name` is returned exactly as is (unescaped).","     *","     * **Added in v.5.2.1:**","     *","     * - If `name` is an Array, it is formatted as a comma-separated list of SQL names","     * - If `name` is a non-Array object, its keys are formatted as a comma-separated list of SQL names","     *","     * Passing in an empty array/object will throw {@link external:Error Error} = `Cannot retrieve sql names from an empty array/object.`","     *","     * @returns {string}","     * The SQL Name/Identifier properly escaped for compliance with the PostgreSQL standard for SQL names and identifiers.","     *","     * @example","     *","     * // example of using v5.2.1 feature:","     * // automatically list object properties as sql names:","     * format('INSERT INTO table(${this~}) VALUES(${one}, ${two})', {","     *     one: 1,","     *     two: 2","     * });","     * //=> INSERT INTO table(\"one\",\"two\") VALUES(1, 2)","     *","     */","    name: name => {","        name = resolveFunc(name);","        if (name) {","            if (typeof name === 'string') {","                return /^\\s*\\*(\\s*)$/.test(name) ? name : formatName(name);","            }","            if (typeof name === 'object') {","                var keys = Array.isArray(name) ? name : Object.keys(name);","                if (!keys.length) {","                    throw new Error('Cannot retrieve sql names from an empty array/object.');","                }","                return $arr.map(keys, value => {","                    if (!value || typeof value !== 'string') {","                        throw new Error('Invalid sql name: ' + JSON.stringify(value));","                    }","                    return formatName(value);","                }).join();","            }","        }","","        throw new TypeError('Invalid sql name: ' + JSON.stringify(name));","","        function formatName(name) {","            return '\"' + name.replace(/\"/g, '\"\"') + '\"';","        }","    },","","    /**","     * @method formatting.value","     * @description","     * Represents an open value, one to be formatted according to its type, properly escaped,","     * but without surrounding quotes for text types.","     *","     * @param {value|function} value","     * Value to be converted, or a function that returns the value.","     *","     * If `value` resolves as `null` or `undefined`, it will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`","     *","     * @returns {string}","     * Formatted and properly escaped string, but without surrounding quotes for text types.","     */","    value: value => {","        value = resolveFunc(value);","        if (isNull(value)) {","            throw new TypeError('Open values cannot be null or undefined.');","        }","        return safeText(formatValue(value, fmFlags.raw));","    },","","    /**","     * @method formatting.buffer","     * @description","     * Converts an object of type `Buffer` into a hex string compatible with PostgreSQL type `bytea`.","     *","     * @param {Buffer|function} obj","     * Object to be converted, or a function that returns one.","     *","     * @param {boolean} [raw=false]","     * Indicates when not to wrap the resulting string in quotes.","     *","     * The generated hex string doesn't need to be escaped.","     *","     * @returns {string}","     */","    buffer: (obj, raw) => {","        obj = resolveFunc(obj);","        if (isNull(obj)) {","            throwIfRaw(raw);","            return 'null';","        }","        if (obj instanceof Buffer) {","            var s = '\\\\x' + obj.toString('hex');","            return raw ? s : wrapText(s);","        }","        throw new TypeError(wrapText(obj) + ' is not a Buffer object.');","    },","","    /**","     * @method formatting.bool","     * @description","     * Converts a truthy value into PostgreSQL boolean presentation.","     *","     * @param {boolean|function} value","     * Value to be converted, or a function that returns the value.","     *","     * @returns {string}","     */","    bool: value => {","        value = resolveFunc(value);","        if (isNull(value)) {","            return 'null';","        }","        return value ? 'true' : 'false';","    },","","    /**","     * @method formatting.date","     * @description","     * Converts a `Date`-type value into PostgreSQL date/time presentation,","     * wrapped in quotes (unless flag `raw` is set).","     *","     * @param {date|function} d","     * Date object to be converted, or a function that returns one.","     *","     * @param {boolean} [raw=false]","     * Indicates when not to escape the value.","     *","     * @returns {string}","     */","    date: (d, raw) => {","        d = resolveFunc(d);","        if (isNull(d)) {","            throwIfRaw(raw);","            return 'null';","        }","        if (d instanceof Date) {","            var s = $pgUtils.prepareValue(d);","            return raw ? s : wrapText(s);","        }","        throw new TypeError(wrapText(d) + ' is not a Date object.');","    },","","    /**","     * @method formatting.number","     * @description","     * Converts a numeric value into its PostgreSQL number presentation,","     * with support for `NaN`, `+Infinity` and `-Infinity`.","     *","     * @param {number|function} num","     * Number to be converted, or a function that returns one.","     *","     * @returns {string}","     */","    number: num => {","        num = resolveFunc(num);","        if (isNull(num)) {","            return 'null';","        }","        if (typeof num !== 'number') {","            throw new TypeError(wrapText(num) + ' is not a number.');","        }","        if (isFinite(num)) {","            return num.toString();","        }","        // Converting NaN/+Infinity/-Infinity according to Postgres documentation:","        // http://www.postgresql.org/docs/9.4/static/datatype-numeric.html#DATATYPE-FLOAT","        //","        // NOTE: strings for 'NaN'/'+Infinity'/'-Infinity' are not case-sensitive.","        if (num === Number.POSITIVE_INFINITY) {","            return wrapText('+Infinity');","        }","        if (num === Number.NEGATIVE_INFINITY) {","            return wrapText('-Infinity');","        }","        return wrapText('NaN');","    },","","    /**","     * @method formatting.array","     * @description","     * Converts an array of values into its PostgreSQL presentation as an Array-Type","     * constructor string: `array[]`.","     *","     * @param {array|function} arr","     * Array to be converted, or a function that returns one.","     *","     * @returns {string}","     */","    array: arr => {","        arr = resolveFunc(arr);","        if (isNull(arr)) {","            return 'null';","        }","        if (arr instanceof Array) {","            return formatArray(arr);","        }","        throw new TypeError(wrapText(arr) + ' is not an Array object.');","    },","","    /**","     * @method formatting.csv","     * @description","     * Converts a single value or an array of values into a CSV string, with all values formatted","     * according to their type.","     *","     * @param {array|value|function} values","     * Value(s) to be converted, or a function that returns it.","     *","     * @returns {string}","     */","    csv: values => formatCSV(resolveFunc(values)),","","    /**","     * @method formatting.json","     * @description","     * Converts any value into JSON (using `JSON.stringify`), and returns it as","     * a valid string, with single-quote symbols fixed, unless flag `raw` is set.","     *","     * @param {object|function} obj","     * Object/Value to be converted, or a function that returns it.","     *","     * @param {boolean} [raw=false]","     * Indicates when not to escape the result.","     *","     * @returns {string}","     */","    json: (obj, raw) => {","        obj = resolveFunc(obj);","        if (isNull(obj)) {","            throwIfRaw(raw);","            return 'null';","        }","        var s = JSON.stringify(obj);","        return raw ? s : wrapText(safeText(s));","    },","","    /**","     * @method formatting.func","     * @description","     * Calls the function to get the actual value, and then formats the result","     * according to its type + `raw` flag.","     *","     * @param {function} func","     * Function to be called, with support for nesting.","     *","     * @param {boolean} [raw=false]","     * Indicates when not to escape the result.","     *","     * @param {object} [obj]","     * `this` context to be passed into the function on all nested levels.","     *","     * @returns {string}","     */","    func: (func, raw, obj) => {","        if (isNull(func)) {","            throwIfRaw(raw);","            return 'null';","        }","        if (typeof func !== 'function') {","            throw new TypeError(wrapText(func) + ' is not a function.');","        }","        var fm = raw ? fmFlags.raw : null;","        if (isNull(obj)) {","            return formatValue(resolveFunc(func), fm);","        }","        if (typeof obj === 'object') {","            return formatValue(resolveFunc(func, obj), fm, obj);","        }","        throw new TypeError(wrapText(obj) + ' is not an object.');","    },","","    /**","     * @method formatting.format","     * @description","     * Replaces variables in a string according to the type of `values`:","     *","     * - Replaces `$1` occurrences when `values` is of type `string`, `boolean`, `number`, `Date`, `Buffer` or when it is `null`.","     * - Replaces variables `$1`, `$2`, ...`$9999` when `values` is an array of parameters. When a variable is out of range,","     *   it throws {@link external:RangeError RangeError} = `Variable $n out of range. Parameters array length: x`, unless","     *   option `partial` is used.","     * - Replaces `$*propName*`, where `*` is any of `{}`, `()`, `[]`, `<>`, `//`, when `values` is an object that's not a","     * `Date`, `Buffer`, {@link QueryFile} or `null`. Special property name `this` refers to the formatting object itself,","     *   to be injected as a JSON string. When referencing a property that doesn't exist in the formatting object, it throws","     *   {@link external:Error Error} = `Property 'PropName' doesn't exist`, unless option `partial` is used.","     *","     * By default, each variable is automatically formatted according to its type, unless it is a special variable:","     * - Raw-text variables end with `:raw` or symbol `^`, and prevent escaping the text. Such variables are not","     *   allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`","     *   - `$1:raw`, `$2:raw`,..., and `$*propName:raw*` (see `*` above)","     *   - `$1^`, `$2^`,..., and `$*propName^*` (see `*` above)","     * - Open-value variables end with `:value` or symbol `#`, to be escaped, but not wrapped in quotes. Such variables are","     *   not allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`","     *   - `$1:value`, `$2:value`,..., and `$*propName:value*` (see `*` above)","     *   - `$1#`, `$2#`,..., and `$*propName#*` (see `*` above)","     * - SQL name variables end with `:name` or symbol `~` (tilde), and provide proper escaping for SQL names/identifiers:","     *   - `$1:name`, `$2:name`,..., and `$*propName:name*` (see `*` above)","     *   - `$1~`, `$2~`,..., and `$*propName~*` (see `*` above)","     * - JSON override ends with `:json` to format the value of any type as a JSON string","     * - CSV override ends with `:csv` to format an array as a properly escaped comma-separated list of values.","     *","     * @param {string|value|Object} query","     * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.","     *","     * **NOTE:** Support for $[Custom Type Formatting] was added in v5.2.7.","     *","     * @param {array|object|value} [values]","     * Formatting parameter(s) / variable value(s).","     *","     * @param {object} [options]","     * Formatting Options.","     *","     * @param {boolean} [options.partial=false]","     * Indicates that we intend to do only a partial replacement, i.e. throw no error when encountering a variable or","     * property name that's missing within the formatting parameters.","     *","     * This option has no meaning when option `default` is present.","     *","     * @param {} [options.default]","     * **Added in v.5.0.5**","     *","     * Sets a default value for every variable that's missing, consequently preventing errors when encountering a variable","     * or property name that's missing within the formatting parameters.","     *","     * It can also be set to a function, to be called with two parameters that depend on the type of formatting being used,","     * and to return the actual default value:","     *","     * - Named Parameters formatting:","     *   - `name` - name of the property missing in the formatting object","     *   - `obj` - the formatting object, and is the same as `this` context","     *","     * - Regular variable formatting:","     *   - `index` - element's index that's outside of the formatting array's range","     *   - `arr` - the formatting array, and is the same as `this` context","     *","     * @returns {string}","     * Formatted query string.","     *","     * The function will throw an error, if any occurs during formatting.","     */","    format: (query, values, options) => {","        if (query && typeof query.formatDBType === 'function') {","            query = query.formatDBType();","        }","        return $formatQuery(query, values, false, options);","    }","};","","Object.freeze($as);","","module.exports = {","    formatQuery: $formatQuery,","    formatFunction: $formatFunction,","    as: $as","};","","/**"," * @external Error"," * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"," */","","/**"," * @external TypeError"," * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError"," */","","/**"," * @external RangeError"," * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError"," */","",""],"l":{"3":1,"4":1,"7":1,"16":1,"29":1,"31":0,"32":0,"35":0,"36":0,"37":0,"38":0,"39":0,"43":0,"44":0,"46":0,"48":0,"50":0,"52":0,"54":0,"56":0,"59":0,"60":0,"61":0,"64":0,"66":0,"68":0,"70":0,"72":0,"73":0,"75":0,"76":0,"78":0,"79":0,"81":0,"89":1,"90":0,"91":0,"98":1,"99":0,"100":0,"102":0,"107":1,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"117":0,"118":0,"120":0,"121":0,"122":0,"124":0,"125":0,"128":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"140":0,"141":0,"142":0,"144":0,"145":0,"147":0,"152":0,"153":0,"154":0,"159":0,"160":0,"161":0,"166":0,"175":1,"176":0,"181":1,"182":0,"188":1,"189":0,"194":1,"195":0,"196":0,"203":1,"204":0,"205":0,"207":0,"227":1,"228":0,"229":0,"231":0,"232":0,"233":0,"234":0,"236":0,"238":0,"240":0,"242":0,"246":0,"251":1,"252":0,"253":0,"286":1,"315":0,"316":0,"317":0,"318":0,"320":0,"321":0,"323":0,"364":0,"365":0,"366":0,"367":0,"369":0,"370":0,"371":0,"372":0,"374":0,"375":0,"376":0,"378":0,"383":0,"385":1,"386":0,"405":0,"406":0,"407":0,"409":0,"428":0,"429":0,"430":0,"431":0,"433":0,"434":0,"435":0,"437":0,"451":0,"452":0,"453":0,"455":0,"473":0,"474":0,"475":0,"476":0,"478":0,"479":0,"480":0,"482":0,"497":0,"498":0,"499":0,"501":0,"502":0,"504":0,"505":0,"511":0,"512":0,"514":0,"515":0,"517":0,"532":0,"533":0,"534":0,"536":0,"537":0,"539":0,"553":0,"570":0,"571":0,"572":0,"573":0,"575":0,"576":0,"597":0,"598":0,"599":0,"601":0,"602":0,"604":0,"605":0,"606":0,"608":0,"609":0,"611":0,"683":0,"684":0,"686":0,"690":1,"692":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":12,"column":2}},"2":{"start":{"line":47,"column":0},"end":{"line":66,"column":2}},"3":{"start":{"line":48,"column":4},"end":{"line":63,"column":6}},"4":{"start":{"line":50,"column":12},"end":{"line":50,"column":65}},"5":{"start":{"line":51,"column":12},"end":{"line":51,"column":61}},"6":{"start":{"line":54,"column":12},"end":{"line":54,"column":65}},"7":{"start":{"line":55,"column":12},"end":{"line":55,"column":70}},"8":{"start":{"line":64,"column":4},"end":{"line":64,"column":23}},"9":{"start":{"line":65,"column":4},"end":{"line":65,"column":15}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":25},"end":{"line":50,"column":39}},{"start":{"line":50,"column":43},"end":{"line":50,"column":64}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":25},"end":{"line":54,"column":39}},{"start":{"line":54,"column":43},"end":{"line":54,"column":64}}]}},"code":["'use strict';","","var $npm = {","    concat: require('./methods/concat'),","    insert: require('./methods/insert'),","    update: require('./methods/update'),","    values: require('./methods/values'),","    sets: require('./methods/sets'),","    TableName: require('./tableName'),","    ColumnSet: require('./columnSet'),","    Column: require('./column')","};","","/**"," * @namespace helpers"," * @description"," * Namespace for query-formatting generators, available as `pgp.helpers`, after initializing the library."," *"," * It is a set of types and methods for generating queries in a fast, flexible and reliable way."," *"," * See also: $[Performance Boost]."," *"," * @property {function} TableName"," * {@link helpers.TableName TableName} class constructor."," *"," * @property {function} ColumnSet"," * {@link helpers.ColumnSet ColumnSet} class constructor."," *"," * @property {function} Column"," * {@link helpers.Column Column} class constructor."," *"," * @property {function} insert"," * {@link helpers.insert insert} static method."," *"," * @property {function} update"," * {@link helpers.update update} static method."," *"," * @property {function} values"," * {@link helpers.values values} static method."," *"," * @property {function} sets"," * {@link helpers.sets sets} static method."," *"," * @property {function} concat"," * {@link helpers.concat concat} static method."," */","module.exports = config => {","    var res = {","        insert: (data, columns, table) => {","            var capSQL = config.options && config.options.capSQL;","            return $npm.insert(data, columns, table, capSQL);","        },","        update: (data, columns, table, options) => {","            var capSQL = config.options && config.options.capSQL;","            return $npm.update(data, columns, table, options, capSQL);","        },","        concat: $npm.concat,","        values: $npm.values,","        sets: $npm.sets,","        TableName: $npm.TableName,","        ColumnSet: $npm.ColumnSet,","        Column: $npm.Column","    };","    Object.freeze(res);","    return res;","};",""],"l":{"3":1,"47":1,"48":0,"50":0,"51":0,"54":0,"55":0,"64":0,"65":0}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/concat.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/concat.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"concat","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":25}}},"2":{"name":"clean","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":18}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":6,"column":2}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"3":{"start":{"line":45,"column":0},"end":{"line":68,"column":1}},"4":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"5":{"start":{"line":47,"column":8},"end":{"line":47,"column":71}},"6":{"start":{"line":49,"column":4},"end":{"line":65,"column":7}},"7":{"start":{"line":50,"column":8},"end":{"line":53,"column":9}},"8":{"start":{"line":52,"column":12},"end":{"line":52,"column":28}},"9":{"start":{"line":54,"column":8},"end":{"line":63,"column":9}},"10":{"start":{"line":55,"column":12},"end":{"line":58,"column":13}},"11":{"start":{"line":57,"column":16},"end":{"line":57,"column":47}},"12":{"start":{"line":59,"column":12},"end":{"line":62,"column":13}},"13":{"start":{"line":61,"column":16},"end":{"line":61,"column":72}},"14":{"start":{"line":64,"column":8},"end":{"line":64,"column":73}},"15":{"start":{"line":67,"column":4},"end":{"line":67,"column":46}},"16":{"start":{"line":67,"column":33},"end":{"line":67,"column":34}},"17":{"start":{"line":70,"column":0},"end":{"line":73,"column":1}},"18":{"start":{"line":72,"column":4},"end":{"line":72,"column":45}},"19":{"start":{"line":75,"column":0},"end":{"line":75,"column":24}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"4":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":13}},{"start":{"line":54,"column":17},"end":{"line":54,"column":38}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":12}},{"start":{"line":55,"column":12},"end":{"line":55,"column":12}}]},"6":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]}},"code":["'use strict';","","var $npm = {","    format: require('../../formatting').as.format,","    QueryFile: require('../../queryFile')","};","","var $arr = require('../../array');","","/**"," * @method helpers.concat"," * @description"," * **Added in v.5.3.0**"," *"," * Concatenates multiple queries into a single query string."," *"," * - Before joining each query, the method removes from it all leading and trailing spaces, tabs and semi-colons."," * - Empty queries are skipped automatically."," *"," * @param {array<string|helpers.QueryFormat|QueryFile>} queries"," * Array of mixed-type elements:"," * - a simple query string, to be used as is"," * - a {@link helpers.QueryFormat QueryFormat}-like object = `{query, [values], [options]}`"," * - a {@link QueryFile} object"," *"," * @returns {string}"," * Concatenated string with all queries."," *"," * @example"," *"," * var pgp = require('pg-promise')();"," *"," * var qf1 = new pgp.QueryFile('./query1.sql', {minify: true});"," * var qf2 = new pgp.QueryFile('./query2.sql', {minify: true});"," *"," * var query = pgp.helpers.concat(["," *     {query: 'INSERT INTO Users(name, age) VALUES($1, $2)', values: ['John', 23]}, // QueryFormat-like object"," *     {query: qf1, values: [1, 'Name']}, // QueryFile with formatting parameters"," *     'SELECT count(*) FROM Users', // a simple-string query,"," *     qf2 // direct QueryFile object"," * ]);"," *"," * // query = concatenated string with all the queries"," */","function concat(queries) {","    if (!Array.isArray(queries)) {","        throw new TypeError('Parameter \\'queries\\' must be an array.');","    }","    var all = $arr.map(queries, (q, index) => {","        if (typeof q === 'string') {","            // a simple query string without parameters:","            return clean(q);","        }","        if (q && typeof q === 'object') {","            if (q instanceof $npm.QueryFile) {","                // QueryFile object:","                return clean(q.formatDBType());","            }","            if ('query' in q) {","                // object {query, values, options}:","                return clean($npm.format(q.query, q.values, q.options));","            }","        }","        throw new Error('Invalid query element at index ' + index + '.');","    });","","    return $arr.filter(all, q => q).join(';');","}","","function clean(q) {","    // removes from the query all leading and trailing symbols ' ', '\\t' and ';'","    return q.replace(/^[\\s;]*|[\\s;]*$/g, '');","}","","module.exports = concat;","","/**"," * @typedef helpers.QueryFormat"," * @description"," * A simple structure of parameters to be passed into method {@link formatting.format as.format} exactly as they are."," *"," * @property {string|value|object} query"," * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`."," *"," * @property {array|object|value} [values]"," * Optional formatting parameters for the query."," *"," * @property {object} [options]"," * Query formatting options, as supported by method {@link formatting.format as.format}."," *"," * @see"," * {@link formatting.format as.format}"," */",""],"l":{"3":1,"8":1,"45":1,"46":0,"47":0,"49":0,"50":0,"52":0,"54":0,"55":0,"57":0,"59":0,"61":0,"64":0,"67":0,"70":1,"72":0,"75":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/queryFile.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/queryFile.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"QueryFile","line":88,"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":34}}},"2":{"name":"(anonymous_2)","line":126,"loc":{"start":{"line":126,"column":24},"end":{"line":126,"column":36}}},"3":{"name":"(anonymous_3)","line":144,"loc":{"start":{"line":144,"column":19},"end":{"line":144,"column":42}}},"4":{"name":"(anonymous_4)","line":261,"loc":{"start":{"line":261,"column":31},"end":{"line":261,"column":48}}},"5":{"name":"(anonymous_5)","line":279,"loc":{"start":{"line":279,"column":30},"end":{"line":279,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":11,"column":2}},"2":{"start":{"line":88,"column":0},"end":{"line":247,"column":1}},"3":{"start":{"line":90,"column":4},"end":{"line":92,"column":5}},"4":{"start":{"line":91,"column":8},"end":{"line":91,"column":44}},"5":{"start":{"line":94,"column":4},"end":{"line":98,"column":6}},"6":{"start":{"line":100,"column":4},"end":{"line":117,"column":5}},"7":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"8":{"start":{"line":102,"column":12},"end":{"line":102,"column":40}},"9":{"start":{"line":104,"column":8},"end":{"line":107,"column":9}},"10":{"start":{"line":105,"column":12},"end":{"line":105,"column":47}},"11":{"start":{"line":106,"column":12},"end":{"line":106,"column":60}},"12":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"13":{"start":{"line":109,"column":12},"end":{"line":109,"column":46}},"14":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"15":{"start":{"line":112,"column":12},"end":{"line":112,"column":30}},"16":{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},"17":{"start":{"line":115,"column":12},"end":{"line":115,"column":40}},"18":{"start":{"line":119,"column":4},"end":{"line":119,"column":23}},"19":{"start":{"line":121,"column":4},"end":{"line":123,"column":5}},"20":{"start":{"line":122,"column":8},"end":{"line":122,"column":65}},"21":{"start":{"line":126,"column":4},"end":{"line":129,"column":6}},"22":{"start":{"line":127,"column":8},"end":{"line":127,"column":27}},"23":{"start":{"line":128,"column":8},"end":{"line":128,"column":26}},"24":{"start":{"line":144,"column":4},"end":{"line":189,"column":6}},"25":{"start":{"line":145,"column":8},"end":{"line":145,"column":20}},"26":{"start":{"line":146,"column":8},"end":{"line":164,"column":9}},"27":{"start":{"line":147,"column":12},"end":{"line":163,"column":13}},"28":{"start":{"line":148,"column":16},"end":{"line":148,"column":69}},"29":{"start":{"line":149,"column":16},"end":{"line":153,"column":17}},"30":{"start":{"line":152,"column":20},"end":{"line":152,"column":27},"skip":true},"31":{"start":{"line":154,"column":16},"end":{"line":154,"column":30}},"32":{"start":{"line":156,"column":16},"end":{"line":156,"column":32}},"33":{"start":{"line":157,"column":16},"end":{"line":157,"column":30}},"34":{"start":{"line":158,"column":16},"end":{"line":158,"column":26}},"35":{"start":{"line":159,"column":16},"end":{"line":161,"column":17}},"36":{"start":{"line":160,"column":20},"end":{"line":160,"column":32}},"37":{"start":{"line":162,"column":16},"end":{"line":162,"column":23}},"38":{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},"39":{"start":{"line":166,"column":12},"end":{"line":166,"column":19}},"40":{"start":{"line":168,"column":8},"end":{"line":188,"column":9}},"41":{"start":{"line":169,"column":12},"end":{"line":169,"column":57}},"42":{"start":{"line":170,"column":12},"end":{"line":170,"column":76}},"43":{"start":{"line":171,"column":12},"end":{"line":173,"column":13}},"44":{"start":{"line":172,"column":16},"end":{"line":172,"column":65}},"45":{"start":{"line":174,"column":12},"end":{"line":176,"column":13}},"46":{"start":{"line":175,"column":16},"end":{"line":175,"column":68}},"47":{"start":{"line":177,"column":12},"end":{"line":179,"column":13}},"48":{"start":{"line":178,"column":16},"end":{"line":178,"column":65}},"49":{"start":{"line":180,"column":12},"end":{"line":180,"column":25}},"50":{"start":{"line":181,"column":12},"end":{"line":181,"column":30}},"51":{"start":{"line":183,"column":12},"end":{"line":183,"column":28}},"52":{"start":{"line":184,"column":12},"end":{"line":184,"column":53}},"53":{"start":{"line":185,"column":12},"end":{"line":187,"column":13}},"54":{"start":{"line":186,"column":16},"end":{"line":186,"column":28}},"55":{"start":{"line":202,"column":4},"end":{"line":204,"column":7}},"56":{"start":{"line":203,"column":19},"end":{"line":203,"column":22}},"57":{"start":{"line":216,"column":4},"end":{"line":218,"column":7}},"58":{"start":{"line":217,"column":19},"end":{"line":217,"column":24}},"59":{"start":{"line":229,"column":4},"end":{"line":231,"column":7}},"60":{"start":{"line":230,"column":19},"end":{"line":230,"column":23}},"61":{"start":{"line":242,"column":4},"end":{"line":244,"column":7}},"62":{"start":{"line":243,"column":19},"end":{"line":243,"column":22}},"63":{"start":{"line":246,"column":4},"end":{"line":246,"column":19}},"64":{"start":{"line":261,"column":0},"end":{"line":277,"column":2}},"65":{"start":{"line":262,"column":4},"end":{"line":262,"column":44}},"66":{"start":{"line":263,"column":4},"end":{"line":263,"column":47}},"67":{"start":{"line":264,"column":4},"end":{"line":266,"column":6}},"68":{"start":{"line":267,"column":4},"end":{"line":267,"column":19}},"69":{"start":{"line":268,"column":4},"end":{"line":268,"column":50}},"70":{"start":{"line":269,"column":4},"end":{"line":269,"column":65}},"71":{"start":{"line":270,"column":4},"end":{"line":274,"column":5}},"72":{"start":{"line":271,"column":8},"end":{"line":271,"column":69}},"73":{"start":{"line":273,"column":8},"end":{"line":273,"column":56}},"74":{"start":{"line":275,"column":4},"end":{"line":275,"column":51}},"75":{"start":{"line":276,"column":4},"end":{"line":276,"column":35}},"76":{"start":{"line":279,"column":0},"end":{"line":281,"column":2}},"77":{"start":{"line":280,"column":4},"end":{"line":280,"column":27}},"78":{"start":{"line":283,"column":0},"end":{"line":283,"column":27}}},"branchMap":{"1":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"2":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"3":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":15}},{"start":{"line":100,"column":19},"end":{"line":100,"column":46}}]},"4":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":8}},{"start":{"line":101,"column":8},"end":{"line":101,"column":8}}]},"5":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":8},"end":{"line":104,"column":8}},{"start":{"line":104,"column":8},"end":{"line":104,"column":8}}]},"6":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":33},"end":{"line":106,"column":40}},{"start":{"line":106,"column":43},"end":{"line":106,"column":59}}]},"7":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"8":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":8}},{"start":{"line":111,"column":8},"end":{"line":111,"column":8}}]},"9":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":12},"end":{"line":111,"column":24}},{"start":{"line":111,"column":28},"end":{"line":111,"column":56}}]},"10":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":8}},{"start":{"line":114,"column":8},"end":{"line":114,"column":8}}]},"11":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"12":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":35}},{"start":{"line":121,"column":39},"end":{"line":121,"column":75}}]},"13":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"14":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":12},"end":{"line":146,"column":21}},{"start":{"line":146,"column":25},"end":{"line":146,"column":30}}]},"15":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":149,"column":16}},{"start":{"line":149,"column":16},"end":{"line":149,"column":16}}]},"16":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":16},"end":{"line":159,"column":16}},{"start":{"line":159,"column":16},"end":{"line":159,"column":16}}]},"17":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":8},"end":{"line":165,"column":8}},{"start":{"line":165,"column":8},"end":{"line":165,"column":8}}]},"18":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":22},"end":{"line":170,"column":29}},{"start":{"line":170,"column":33},"end":{"line":170,"column":75}}]},"19":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":12}},{"start":{"line":171,"column":12},"end":{"line":171,"column":12}}]},"20":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":16},"end":{"line":171,"column":26}},{"start":{"line":171,"column":30},"end":{"line":171,"column":36}}]},"21":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":12},"end":{"line":174,"column":12}},{"start":{"line":174,"column":12},"end":{"line":174,"column":12}}]},"22":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":12},"end":{"line":177,"column":12}},{"start":{"line":177,"column":12},"end":{"line":177,"column":12}}]},"23":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":16},"end":{"line":177,"column":26}},{"start":{"line":177,"column":30},"end":{"line":177,"column":35}}]},"24":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":12},"end":{"line":185,"column":12}},{"start":{"line":185,"column":12},"end":{"line":185,"column":12}}]},"25":{"line":262,"type":"cond-expr","locations":[{"start":{"line":262,"column":24},"end":{"line":262,"column":39}},{"start":{"line":262,"column":42},"end":{"line":262,"column":43}}]},"26":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":4},"end":{"line":270,"column":4}},{"start":{"line":270,"column":4},"end":{"line":270,"column":4}}]}},"code":["'use strict';","","var $npm = {","    fs: require('fs'),","    os: require('os'),","    path: require('path'),","    minify: require('pg-minify'),","    utils: require('./utils'),","    format: require('./formatting').as.format,","    QueryFileError: require('./errors/queryFile')","};","","/**"," * @constructor QueryFile"," * @description"," *"," * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`."," *"," * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required."," * The SQL can be of any complexity, with both single and multi-line comments."," *"," * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}"," * and {@link ParameterizedQuery}."," *"," * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}."," *"," * For any given SQL file you should only create a single instance of this class throughout the application."," *"," * @param {string} file"," * Path to the SQL file with the query, either absolute or relative to the application's entry point file."," *"," * If there is any problem reading the file, it will be reported when executing the query."," *"," * @param {QueryFile.Options} [options]"," * Set of configuration options, as documented by {@link QueryFile.Options}."," *"," * @returns {QueryFile}"," *"," * @see"," * {@link errors.QueryFileError QueryFileError},"," * {@link utils}"," *"," * @example"," * // File sql.js"," *"," * // Proper way to organize an sql provider:"," * //"," * // - have all sql files for Users in ./sql/users"," * // - have all sql files for Products in ./sql/products"," * // - have your sql provider module as ./sql/index.js"," *"," * var QueryFile = require('pg-promise').QueryFile;"," * var path = require('path');"," *"," * // Helper for linking to external query files:"," * function sql(file) {"," *     var fullPath = path.join(__dirname, file); // generating full path;"," *     return new QueryFile(fullPath, {minify: true});"," * }"," *"," * module.exports = {"," *     // external queries for Users:"," *     users: {"," *         add: sql('users/create.sql'),"," *         search: sql('users/search.sql'),"," *         report: sql('users/report.sql'),"," *     },"," *     // external queries for Products:"," *     products: {"," *         add: sql('products/add.sql'),"," *         quote: sql('products/quote.sql'),"," *         search: sql('products/search.sql'),"," *     }"," * };"," *"," * @example"," * // Testing our SQL provider"," *"," * var db = require('./db'); // our database module;"," * var sql = require('./sql').users; // our sql for users;"," *"," * module.exports = {"," *     addUser: (name, age) => db.none(sql.add, [name, age]),"," *     findUser: name => db.any(sql.search, name)"," * };"," *"," */","function QueryFile(file, options) {","","    if (!(this instanceof QueryFile)) {","        return new QueryFile(file, options);","    }","","    var sql, error, ready, modTime, after, filePath = file, opt = {","        debug: $npm.utils.isDev(),","        minify: false,","        compress: false","    };","","    if (options && typeof options === 'object') {","        if (options.debug !== undefined) {","            opt.debug = !!options.debug;","        }","        if (options.minify !== undefined) {","            after = options.minify === 'after';","            opt.minify = after ? 'after' : !!options.minify;","        }","        if (options.compress !== undefined) {","            opt.compress = !!options.compress;","        }","        if (opt.compress && options.minify === undefined) {","            opt.minify = true;","        }","        if (options.params !== undefined) {","            opt.params = options.params;","        }","    }","","    Object.freeze(opt);","","    if ($npm.utils.isText(filePath) && !$npm.utils.isPathAbsolute(filePath)) {","        filePath = $npm.path.join($npm.utils.startDir, filePath);","    }","","    // Custom Type Formatting support:","    this.formatDBType = function () {","        this.prepare(true);","        return this.query;","    };","","    /**","     * @method QueryFile.prepare","     * @summary Prepares the query for execution.","     * @description","     * If the the query hasn't been prepared yet, it will read the file and process the contents according","     * to the parameters passed into the constructor.","     *","     * This method is primarily for internal use by the library.","     *","     * @param {boolean} [throwErrors=false]","     * Throw any error encountered.","     *","     */","    this.prepare = function (throwErrors) {","        var lastMod;","        if (opt.debug && ready) {","            try {","                lastMod = $npm.fs.statSync(filePath).mtime.getTime();","                if (lastMod === modTime) {","                    // istanbul ignore next;","                    // coverage for this works differently under Windows and Linux","                    return;","                }","                ready = false;","            } catch (e) {","                sql = undefined;","                ready = false;","                error = e;","                if (throwErrors) {","                    throw error;","                }","                return;","            }","        }","        if (ready) {","            return;","        }","        try {","            sql = $npm.fs.readFileSync(filePath, 'utf8');","            modTime = lastMod || $npm.fs.statSync(filePath).mtime.getTime();","            if (opt.minify && !after) {","                sql = $npm.minify(sql, {compress: opt.compress});","            }","            if (opt.params !== undefined) {","                sql = $npm.format(sql, opt.params, {partial: true});","            }","            if (opt.minify && after) {","                sql = $npm.minify(sql, {compress: opt.compress});","            }","            ready = true;","            error = undefined;","        } catch (e) {","            sql = undefined;","            error = new $npm.QueryFileError(e, this);","            if (throwErrors) {","                throw error;","            }","        }","    };","","    /**","     * @name QueryFile#query","     * @type {string}","     * @default undefined","     * @readonly","     * @summary Prepared query string.","     * @description","     * When property {@link QueryFile#error error} is set, the query is `undefined`.","     *","     * This property is primarily for internal use by the library.","     */","    Object.defineProperty(this, 'query', {","        get: () => sql","    });","","    /**","     * @name QueryFile#error","     * @type {errors.QueryFileError}","     * @default undefined","     * @readonly","     * @description","     * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.","     *","     * This property is primarily for internal use by the library.","     */","    Object.defineProperty(this, 'error', {","        get: () => error","    });","","    /**","     * @name QueryFile#file","     * @type {string}","     * @readonly","     * @description","     * File name that was passed into the constructor.","     *","     * This property is primarily for internal use by the library.","     */","    Object.defineProperty(this, 'file', {","        get: () => file","    });","","    /**","     * @name QueryFile#options","     * @type {QueryFile.Options}","     * @readonly","     * @description","     * Set of options, as configured during the object's construction.","     *","     * This property is primarily for internal use by the library.","     */","    Object.defineProperty(this, 'options', {","        get: () => opt","    });","","    this.prepare();","}","","/**"," * @method QueryFile.toString"," * @description"," * Creates a well-formatted multi-line string that represents the object's current state."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","QueryFile.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap = $npm.utils.messageGap(level + 1);","    var lines = [","        'QueryFile {'","    ];","    this.prepare();","    lines.push(gap + 'file: \"' + this.file + '\"');","    lines.push(gap + 'options: ' + JSON.stringify(this.options));","    if (this.error) {","        lines.push(gap + 'error: ' + this.error.toString(level + 1));","    } else {","        lines.push(gap + 'query: \"' + this.query + '\"');","    }","    lines.push($npm.utils.messageGap(level) + '}');","    return lines.join($npm.os.EOL);","};","","QueryFile.prototype.inspect = function () {","    return this.toString();","};","","module.exports = QueryFile;","","/**"," * @typedef QueryFile.Options"," * @description"," * A set of configuration options as passed into the {@link QueryFile} constructor."," *"," * @property {boolean} debug"," * When in debug mode, the query file is checked for its last modification time on every query request,"," * so if it changes, the file is read afresh."," *"," * The default for this property is `true` when `NODE_ENV` = `development`,"," * or `false` otherwise."," *"," * @property {boolean|string} minify=false"," * Parses and minifies the SQL using $[pg-minify]:"," * - `false` - do not use $[pg-minify]"," * - `true` - use $[pg-minify] to parse and minify SQL"," * - `'after'` - use $[pg-minify] after applying static formatting parameters"," *   (option `params`), as opposed to before it (default)"," *"," * If option `compress` is set, then the default for `minify` is `true`."," *"," * Failure to parse SQL will result in $[SQLParsingError]."," *"," * @property {boolean} compress=false"," * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:"," * - `false` - no compression to be applied, keep minimum spaces for easier read"," * - `true` - remove all unnecessary spaces from SQL"," *"," * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not"," * specified and `compress` is specified as `true`, then `minify` defaults to `true`."," *"," * @property {array|object|value} params"," *"," * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},"," * but with option `partial` = `true`."," *"," * Most of the time query formatting is fully dynamic, and applied just before executing the query."," * In some cases though you may need to pre-format SQL with static values. Examples of it can be a"," * schema name, or a configurable table name."," *"," * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then"," * apply the second-step dynamic formatting when executing the query."," */",""],"l":{"3":1,"88":1,"90":0,"91":0,"94":0,"100":0,"101":0,"102":0,"104":0,"105":0,"106":0,"108":0,"109":0,"111":0,"112":0,"114":0,"115":0,"119":0,"121":0,"122":0,"126":0,"127":0,"128":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"152":1,"154":0,"156":0,"157":0,"158":0,"159":0,"160":0,"162":0,"165":0,"166":0,"168":0,"169":0,"170":0,"171":0,"172":0,"174":0,"175":0,"177":0,"178":0,"180":0,"181":0,"183":0,"184":0,"185":0,"186":0,"202":0,"203":0,"216":0,"217":0,"229":0,"230":0,"242":0,"243":0,"246":0,"261":1,"262":0,"263":0,"264":0,"267":0,"268":0,"269":0,"270":0,"271":0,"273":0,"275":0,"276":0,"279":1,"280":0,"283":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/utils/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/utils/index.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":10,"27":1,"28":10,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":1,"40":2,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":1,"53":0,"54":1,"55":1,"56":1,"57":1,"58":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[1,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":1,"7":10,"8":0,"9":0,"10":2,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"isNull","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":23}}},"2":{"name":"isText","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":21}}},"3":{"name":"isObject","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":37}}},"4":{"name":"isDev","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":17}}},"5":{"name":"lock","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":36}}},"6":{"name":"addReadProperties","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":43}}},"7":{"name":"addReadProp","line":74,"loc":{"start":{"line":74,"column":0},"end":{"line":74,"column":47}}},"8":{"name":"getSafeConnection","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":31}}},"9":{"name":"messageGap","line":102,"loc":{"start":{"line":102,"column":0},"end":{"line":102,"column":27}}},"10":{"name":"inherits","line":108,"loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":33}}},"11":{"name":"isPathAbsolute","line":119,"loc":{"start":{"line":119,"column":0},"end":{"line":119,"column":30}},"skip":true},"12":{"name":"getLocalStack","line":131,"loc":{"start":{"line":131,"column":0},"end":{"line":131,"column":33}}},"13":{"name":"InternalError","line":142,"loc":{"start":{"line":142,"column":0},"end":{"line":142,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":7,"column":0},"end":{"line":9,"column":1}},"3":{"start":{"line":8,"column":4},"end":{"line":8,"column":49}},"4":{"start":{"line":13,"column":0},"end":{"line":15,"column":1}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":60}},"6":{"start":{"line":20,"column":0},"end":{"line":30,"column":1}},"7":{"start":{"line":21,"column":4},"end":{"line":28,"column":5}},"8":{"start":{"line":22,"column":8},"end":{"line":26,"column":9}},"9":{"start":{"line":23,"column":12},"end":{"line":25,"column":13}},"10":{"start":{"line":24,"column":16},"end":{"line":24,"column":29}},"11":{"start":{"line":27,"column":8},"end":{"line":27,"column":20}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":17}},"13":{"start":{"line":37,"column":0},"end":{"line":40,"column":1}},"14":{"start":{"line":38,"column":4},"end":{"line":38,"column":48}},"15":{"start":{"line":39,"column":4},"end":{"line":39,"column":51}},"16":{"start":{"line":45,"column":0},"end":{"line":61,"column":1}},"17":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"18":{"start":{"line":47,"column":8},"end":{"line":47,"column":15}},"19":{"start":{"line":49,"column":4},"end":{"line":60,"column":5}},"20":{"start":{"line":50,"column":8},"end":{"line":50,"column":27}},"21":{"start":{"line":52,"column":8},"end":{"line":56,"column":10}},"22":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"23":{"start":{"line":58,"column":12},"end":{"line":58,"column":48}},"24":{"start":{"line":66,"column":0},"end":{"line":70,"column":1}},"25":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"26":{"start":{"line":68,"column":8},"end":{"line":68,"column":42}},"27":{"start":{"line":74,"column":0},"end":{"line":81,"column":1}},"28":{"start":{"line":75,"column":4},"end":{"line":80,"column":7}},"29":{"start":{"line":86,"column":0},"end":{"line":98,"column":1}},"30":{"start":{"line":87,"column":4},"end":{"line":93,"column":5}},"31":{"start":{"line":88,"column":8},"end":{"line":88,"column":50}},"32":{"start":{"line":89,"column":8},"end":{"line":91,"column":9}},"33":{"start":{"line":90,"column":12},"end":{"line":90,"column":61}},"34":{"start":{"line":92,"column":8},"end":{"line":92,"column":20}},"35":{"start":{"line":95,"column":4},"end":{"line":97,"column":7}},"36":{"start":{"line":96,"column":8},"end":{"line":96,"column":55}},"37":{"start":{"line":102,"column":0},"end":{"line":104,"column":1}},"38":{"start":{"line":103,"column":4},"end":{"line":103,"column":42}},"39":{"start":{"line":108,"column":0},"end":{"line":110,"column":1}},"40":{"start":{"line":109,"column":4},"end":{"line":109,"column":49}},"41":{"start":{"line":119,"column":0},"end":{"line":129,"column":1},"skip":true},"42":{"start":{"line":121,"column":4},"end":{"line":127,"column":5},"skip":true},"43":{"start":{"line":122,"column":8},"end":{"line":122,"column":97},"skip":true},"44":{"start":{"line":123,"column":8},"end":{"line":123,"column":46},"skip":true},"45":{"start":{"line":124,"column":8},"end":{"line":124,"column":37},"skip":true},"46":{"start":{"line":125,"column":8},"end":{"line":125,"column":57},"skip":true},"47":{"start":{"line":126,"column":8},"end":{"line":126,"column":36},"skip":true},"48":{"start":{"line":128,"column":4},"end":{"line":128,"column":34},"skip":true},"49":{"start":{"line":131,"column":0},"end":{"line":138,"column":1}},"50":{"start":{"line":135,"column":4},"end":{"line":137,"column":18}},"51":{"start":{"line":136,"column":8},"end":{"line":136,"column":47}},"52":{"start":{"line":142,"column":0},"end":{"line":144,"column":1}},"53":{"start":{"line":143,"column":4},"end":{"line":143,"column":23}},"54":{"start":{"line":146,"column":0},"end":{"line":160,"column":2}},"55":{"start":{"line":162,"column":0},"end":{"line":162,"column":31}},"56":{"start":{"line":165,"column":0},"end":{"line":165,"column":66},"skip":true},"57":{"start":{"line":167,"column":0},"end":{"line":167,"column":19}},"58":{"start":{"line":169,"column":0},"end":{"line":169,"column":21}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":11},"end":{"line":8,"column":25}},{"start":{"line":8,"column":29},"end":{"line":8,"column":48}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":11},"end":{"line":14,"column":14}},{"start":{"line":14,"column":18},"end":{"line":14,"column":41}},{"start":{"line":14,"column":45},"end":{"line":14,"column":59}}]},"3":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"4":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":13}},{"start":{"line":21,"column":17},"end":{"line":21,"column":42}}]},"5":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":23,"column":12}},{"start":{"line":23,"column":12},"end":{"line":23,"column":12}}]},"6":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":41}},{"start":{"line":38,"column":45},"end":{"line":38,"column":47}}]},"7":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"8":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":15}},{"start":{"line":46,"column":19},"end":{"line":46,"column":36}}]},"9":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"10":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"11":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8}},{"start":{"line":89,"column":8},"end":{"line":89,"column":8}}]},"12":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4},"skip":true},{"start":{"line":121,"column":4},"end":{"line":121,"column":4},"skip":true}]},"13":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":21},"end":{"line":124,"column":30},"skip":true},{"start":{"line":124,"column":34},"end":{"line":124,"column":36},"skip":true}]},"14":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":20},"end":{"line":125,"column":28},"skip":true},{"start":{"line":125,"column":32},"end":{"line":125,"column":56},"skip":true}]},"15":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":15},"end":{"line":126,"column":26},"skip":true},{"start":{"line":126,"column":30},"end":{"line":126,"column":35},"skip":true}]},"16":{"line":165,"type":"cond-expr","locations":[{"start":{"line":165,"column":26},"end":{"line":165,"column":49},"skip":true},{"start":{"line":165,"column":52},"end":{"line":165,"column":65},"skip":true}]}},"code":["'use strict';","","var $path = require('path');","","////////////////////////////////////////////","// Simpler check for null/undefined;","function isNull(value) {","    return value === null || value === undefined;","}","","////////////////////////////////////////////////////////","// Verifies parameter for being a non-empty text string;","function isText(txt) {","    return txt && typeof txt === 'string' && /\\S/.test(txt);","}","","//////////////////////////////////////","// Verifies value for being an object,","// based on type and property names.","function isObject(value, properties) {","    if (value && typeof value === 'object') {","        for (var i = 0; i < properties.length; i++) {","            if (!(properties[i] in value)) {","                return false;","            }","        }","        return true;","    }","    return false;","}","","///////////////////////////////////////////////////////////","// Approximates the environment as being for development.","//","// Proper configuration is having NODE_ENV = 'development', but this","// method only checks for 'dev' being present, and regardless of the case.","function isDev() {","    var env = global.process.env.NODE_ENV || '';","    return env.toLowerCase().indexOf('dev') !== -1;","}","","///////////////////////////////////////////////////","// Locks all properties in an object to read-only,","// or freezes the entire object for any changes.","function lock(obj, freeze, options) {","    if (options && options.noLocking) {","        return;","    }","    if (freeze) {","        Object.freeze(obj); // freeze the entire object, permanently;","    } else {","        var desc = {","            writable: false,","            configurable: false,","            enumerable: true","        };","        for (var p in obj) {","            Object.defineProperty(obj, p, desc);","        }","    }","}","","/////////////////////////////////////////////","// Adds properties from source to the target,","// making them read-only and enumerable.","function addReadProperties(target, source) {","    for (var p in source) {","        addReadProp(target, p, source[p]);","    }","}","","///////////////////////////////////////////////////////","// Adds a read-only, non-deletable enumerable property.","function addReadProp(obj, name, value, hidden) {","    Object.defineProperty(obj, name, {","        value: value,","        configurable: false,","        enumerable: !hidden,","        writable: false","    });","}","","//////////////////////////////////////////////////////////////","// Converts a connection string or object into its safe copy:","// if password is present, it is masked with symbol '#'.","function getSafeConnection(cn) {","    if (typeof cn === 'object') {","        var copy = JSON.parse(JSON.stringify(cn));","        if (typeof copy.password === 'string') {","            copy.password = copy.password.replace(/./g, '#');","        }","        return copy;","    }","    // or else it is a connection string;","    return cn.replace(/:(?![\\/])([^@]+)/, (_, m) => {","        return ':' + new Array(m.length + 1).join('#');","    });","}","","///////////////////////////////////////////","// Returns a space gap for console output;","function messageGap(level) {","    return Array(1 + level * 4).join(' ');","}","","/////////////////////////////////////////","// Provides platform-neutral inheritance;","function inherits(child, parent) {","    child.prototype.__proto__ = parent.prototype;","}","","///////////////////////////////////////////////////////////////////////////","// Checks if the path is absolute;","//","// We exclude this from the coverage, because the code is platform-specific,","// and while most of its code is for Windows, Travis CI is a linux platform.","//","// istanbul ignore next","function isPathAbsolute(path) {","    // Based on: https://github.com/sindresorhus/path-is-absolute","    if (process.platform === 'win32') {","        var splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;","        var result = splitDeviceRe.exec(path);","        var device = result[1] || '';","        var isUnc = !!device && device.charAt(1) !== ':';","        return !!result[2] || isUnc;","    }","    return path.charAt(0) === '/';","}","","function getLocalStack(startIdx) {","    // from the call stack, we take only lines starting with the client's","    // source code, and only those that contain a full path inside brackets,","    // indicating a reference to the client's source code:","    return new Error().stack.split('\\n').slice(startIdx).filter(line => {","        return line.match(/\\(.*(\\\\+|\\/+).*\\)/); // contains \\ or / inside ()","    }).join('\\n');","}","","//////////////////////////////","// Internal error container;","function InternalError(error) {","    this.error = error;","}","","var exp = {","    InternalError: InternalError,","    getLocalStack: getLocalStack,","    isPathAbsolute: isPathAbsolute,","    lock: lock,","    isText: isText,","    isNull: isNull,","    isDev: isDev,","    isObject: isObject,","    addReadProp: addReadProp,","    addReadProperties: addReadProperties,","    getSafeConnection: getSafeConnection,","    messageGap: messageGap,","    inherits: inherits","};","","var mainFile = process.argv[1];","","// istanbul ignore next","exp.startDir = mainFile ? $path.dirname(mainFile) : process.cwd();","","Object.freeze(exp);","","module.exports = exp;",""],"l":{"3":1,"7":1,"8":0,"13":1,"14":0,"20":1,"21":0,"22":0,"23":0,"24":0,"27":0,"29":0,"37":1,"38":0,"39":0,"45":1,"46":0,"47":0,"49":0,"50":0,"52":0,"57":0,"58":0,"66":1,"67":1,"68":10,"74":1,"75":10,"86":1,"87":0,"88":0,"89":0,"90":0,"92":0,"95":0,"96":0,"102":1,"103":0,"108":1,"109":2,"119":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"128":1,"131":1,"135":0,"136":0,"142":1,"143":0,"146":1,"162":1,"165":1,"167":1,"169":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/queryFile.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/queryFile.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"QueryFileError","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":35}}},"2":{"name":"(anonymous_2)","line":74,"loc":{"start":{"line":74,"column":36},"end":{"line":74,"column":53}}},"3":{"name":"(anonymous_3)","line":91,"loc":{"start":{"line":91,"column":35},"end":{"line":91,"column":47}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":40,"column":0},"end":{"line":52,"column":1}},"3":{"start":{"line":41,"column":4},"end":{"line":41,"column":44}},"4":{"start":{"line":42,"column":4},"end":{"line":42,"column":45}},"5":{"start":{"line":43,"column":4},"end":{"line":43,"column":28}},"6":{"start":{"line":44,"column":4},"end":{"line":49,"column":5}},"7":{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},"8":{"start":{"line":46,"column":8},"end":{"line":46,"column":50}},"9":{"start":{"line":48,"column":8},"end":{"line":48,"column":37}},"10":{"start":{"line":50,"column":4},"end":{"line":50,"column":24}},"11":{"start":{"line":51,"column":4},"end":{"line":51,"column":30}},"12":{"start":{"line":54,"column":0},"end":{"line":60,"column":3}},"13":{"start":{"line":74,"column":0},"end":{"line":89,"column":2}},"14":{"start":{"line":75,"column":4},"end":{"line":75,"column":44}},"15":{"start":{"line":76,"column":4},"end":{"line":83,"column":10}},"16":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"17":{"start":{"line":85,"column":8},"end":{"line":85,"column":70}},"18":{"start":{"line":87,"column":4},"end":{"line":87,"column":27}},"19":{"start":{"line":88,"column":4},"end":{"line":88,"column":35}},"20":{"start":{"line":91,"column":0},"end":{"line":93,"column":2}},"21":{"start":{"line":92,"column":4},"end":{"line":92,"column":27}},"22":{"start":{"line":95,"column":0},"end":{"line":95,"column":32}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":75,"type":"cond-expr","locations":[{"start":{"line":75,"column":24},"end":{"line":75,"column":39}},{"start":{"line":75,"column":42},"end":{"line":75,"column":43}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils'),","    minify: require('pg-minify')","};","","/**"," * @interface errors.QueryFileError"," * @augments external:Error"," * @description"," * {@link errors.QueryFileError QueryFileError} interface, available from the {@link errors} namespace."," *"," * This type represents all errors related to {@link QueryFile}."," *"," * @property {string} name"," * Standard {@link external:Error Error} property - error type name = `QueryFileError`."," *"," * @property {string} message"," * Standard {@link external:Error Error} property - the error message."," *"," * @property {string} stack"," * Standard {@link external:Error Error} property - the stack trace."," *"," * @property {string} file"," * File path/name that was passed into the {@link QueryFile} constructor."," *"," * @property {object} options"," * Set of options that was used by the {@link QueryFile} object."," *"," * @property {SQLParsingError} error"," * Internal $[SQLParsingError] object."," *"," * It is set only when the error was thrown by $[pg-minify] while parsing the SQL file."," *"," * @see QueryFile"," *"," */","function QueryFileError(error, qf) {","    var temp = Error.apply(this, arguments);","    temp.name = this.name = 'QueryFileError';","    this.stack = temp.stack;","    if (error instanceof $npm.minify.SQLParsingError) {","        this.error = error;","        this.message = 'Failed to parse the SQL.';","    } else {","        this.message = error.message;","    }","    this.file = qf.file;","    this.options = qf.options;","}","","QueryFileError.prototype = Object.create(Error.prototype, {","    constructor: {","        value: QueryFileError,","        writable: true,","        configurable: true","    }","});","","/**"," * @method errors.QueryFileError.toString"," * @description"," * Creates a well-formatted multi-line string that represents the error."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","QueryFileError.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap0 = $npm.utils.messageGap(level),","        gap1 = $npm.utils.messageGap(level + 1),","        lines = [","            'QueryFileError {',","            gap1 + 'message: \"' + this.message + '\"',","            gap1 + 'options: ' + JSON.stringify(this.options),","            gap1 + 'file: \"' + this.file + '\"'","        ];","    if (this.error) {","        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));","    }","    lines.push(gap0 + '}');","    return lines.join($npm.os.EOL);","};","","QueryFileError.prototype.inspect = function () {","    return this.toString();","};","","module.exports = QueryFileError;","",""],"l":{"3":1,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"48":0,"50":0,"51":0,"54":1,"74":1,"75":0,"76":0,"84":0,"85":0,"87":0,"88":0,"91":1,"92":0,"95":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/insert.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/insert.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"insert","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":8,"column":2}},"2":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"3":{"start":{"line":85,"column":0},"end":{"line":134,"column":1}},"4":{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},"5":{"start":{"line":88,"column":8},"end":{"line":88,"column":69}},"6":{"start":{"line":91,"column":4},"end":{"line":91,"column":38}},"7":{"start":{"line":93,"column":4},"end":{"line":95,"column":5}},"8":{"start":{"line":94,"column":8},"end":{"line":94,"column":78}},"9":{"start":{"line":97,"column":4},"end":{"line":106,"column":5}},"10":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"11":{"start":{"line":99,"column":12},"end":{"line":99,"column":34}},"12":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"13":{"start":{"line":103,"column":12},"end":{"line":103,"column":102}},"14":{"start":{"line":105,"column":8},"end":{"line":105,"column":54}},"15":{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},"16":{"start":{"line":109,"column":8},"end":{"line":109,"column":74}},"17":{"start":{"line":112,"column":4},"end":{"line":114,"column":5}},"18":{"start":{"line":113,"column":8},"end":{"line":113,"column":50}},"19":{"start":{"line":116,"column":4},"end":{"line":118,"column":5}},"20":{"start":{"line":117,"column":8},"end":{"line":117,"column":42}},"21":{"start":{"line":120,"column":4},"end":{"line":120,"column":51}},"22":{"start":{"line":122,"column":4},"end":{"line":122,"column":43}},"23":{"start":{"line":123,"column":4},"end":{"line":123,"column":55}},"24":{"start":{"line":125,"column":4},"end":{"line":132,"column":5}},"25":{"start":{"line":126,"column":8},"end":{"line":131,"column":22}},"26":{"start":{"line":127,"column":16},"end":{"line":129,"column":17}},"27":{"start":{"line":128,"column":20},"end":{"line":128,"column":85}},"28":{"start":{"line":130,"column":16},"end":{"line":130,"column":81}},"29":{"start":{"line":133,"column":4},"end":{"line":133,"column":80}},"30":{"start":{"line":136,"column":0},"end":{"line":139,"column":2}},"31":{"start":{"line":141,"column":0},"end":{"line":141,"column":24}}},"branchMap":{"1":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"2":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":13}},{"start":{"line":87,"column":17},"end":{"line":87,"column":41}}]},"3":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":4},"end":{"line":93,"column":4}},{"start":{"line":93,"column":4},"end":{"line":93,"column":4}}]},"4":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":15}},{"start":{"line":93,"column":19},"end":{"line":93,"column":31}}]},"5":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"6":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]},"7":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":8}},{"start":{"line":102,"column":8},"end":{"line":102,"column":8}}]},"8":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":12},"end":{"line":102,"column":19}},{"start":{"line":102,"column":23},"end":{"line":102,"column":49}}]},"9":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":37},"end":{"line":105,"column":44}},{"start":{"line":105,"column":48},"end":{"line":105,"column":52}}]},"10":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"11":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"12":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]},"13":{"line":120,"type":"cond-expr","locations":[{"start":{"line":120,"column":25},"end":{"line":120,"column":36}},{"start":{"line":120,"column":39},"end":{"line":120,"column":50}}]},"14":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":125,"column":4}},{"start":{"line":125,"column":4},"end":{"line":125,"column":4}}]},"15":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":16},"end":{"line":127,"column":16}},{"start":{"line":127,"column":16},"end":{"line":127,"column":16}}]},"16":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":20},"end":{"line":127,"column":22}},{"start":{"line":127,"column":26},"end":{"line":127,"column":47}}]}},"code":["'use strict';","","var $npm = {","    TableName: require('../tableName'),","    ColumnSet: require('../columnSet'),","    formatting: require('../../formatting'),","    utils: require('../../utils')","};","","var $arr = require('../../array');","","/**"," * @method helpers.insert"," * @description"," * Generates an `INSERT` query for either one object or an array of objects."," *"," * @param {object|object[]} data"," * An insert object with properties for insert values, or an array of such objects."," *"," * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`"," *"," * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`"," *"," * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} ="," * `Invalid insert object at index N.`"," *"," * @param {array|helpers.Column|helpers.ColumnSet} [columns]"," * Set of columns to be inserted."," *"," * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array"," * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`"," *"," * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}"," * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array)."," *"," * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw"," * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`"," *"," * @param {helpers.TableName|string|{table,schema}} [table]"," * Destination table."," *"," * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object"," * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method"," * will throw {@link external:Error Error} = `Table name is unknown.`"," *"," * @returns {string}"," * The resulting query string."," *"," * @see"," *  {@link helpers.Column Column},"," *  {@link helpers.ColumnSet ColumnSet},"," *  {@link helpers.TableName TableName}"," *"," * @example"," *"," * var pgp = require('pg-promise')({"," *    capSQL: true // if you want all generated SQL capitalized"," * });"," *"," * var dataSingle = {val: 123, msg: 'hello'};"," * var dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];"," *"," * // Column details can be taken from the data object:"," *"," * pgp.helpers.insert(dataSingle, null, 'my-table');"," * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')"," *"," * @example"," *"," * // Column details are required for a multi-row `INSERT`:"," *"," * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');"," * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')"," *"," * @example"," *"," * // Column details from a reusable ColumnSet (recommended for performance):"," *"," * var cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});"," *"," * pgp.helpers.insert(dataMulti, cs);"," * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')"," *"," */","function insert(data, columns, table, capSQL) {","","    if (!data || typeof data !== 'object') {","        throw new TypeError('Invalid parameter \\'data\\' specified.');","    }","","    var isArray = Array.isArray(data);","","    if (isArray && !data.length) {","        throw new TypeError('Cannot generate an INSERT from an empty array.');","    }","","    if (columns instanceof $npm.ColumnSet) {","        if ($npm.utils.isNull(table)) {","            table = columns.table;","        }","    } else {","        if (isArray && $npm.utils.isNull(columns)) {","            throw new TypeError('Parameter \\'columns\\' is required when inserting multiple records.');","        }","        columns = new $npm.ColumnSet(columns || data);","    }","","    if (!columns.columns.length) {","        throw new Error('Cannot generate an INSERT without any columns.');","    }","","    if (!table) {","        throw new Error('Table name is unknown.');","    }","","    if (!(table instanceof $npm.TableName)) {","        table = new $npm.TableName(table);","    }","","    var query = capSQL ? sql.capCase : sql.lowCase;","","    var format = $npm.formatting.as.format;","    query = format(query, [table.name, columns.names]);","","    if (isArray) {","        return query + $arr.map(data, (d, index) => {","                if (!d || typeof d !== 'object') {","                    throw new Error('Invalid insert object at index ' + index + '.');","                }","                return '(' + format(columns.variables, columns.prepare(d)) + ')';","            }).join();","    }","    return query + '(' + format(columns.variables, columns.prepare(data)) + ')';","}","","var sql = {","    lowCase: 'insert into $1^($2^) values',","    capCase: 'INSERT INTO $1^($2^) VALUES'","};","","module.exports = insert;",""],"l":{"3":1,"10":1,"85":1,"87":0,"88":0,"91":0,"93":0,"94":0,"97":0,"98":0,"99":0,"102":0,"103":0,"105":0,"108":0,"109":0,"112":0,"113":0,"116":0,"117":0,"120":0,"122":0,"123":0,"125":0,"126":0,"127":0,"128":0,"130":0,"133":0,"136":1,"141":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/tableName.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/tableName.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"TableName","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":34}}},"2":{"name":"(anonymous_2)","line":92,"loc":{"start":{"line":92,"column":35},"end":{"line":92,"column":47}}},"3":{"name":"(anonymous_3)","line":105,"loc":{"start":{"line":105,"column":31},"end":{"line":105,"column":43}}},"4":{"name":"(anonymous_4)","line":109,"loc":{"start":{"line":109,"column":30},"end":{"line":109,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":6,"column":2}},"2":{"start":{"line":56,"column":0},"end":{"line":90,"column":1}},"3":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"4":{"start":{"line":59,"column":8},"end":{"line":59,"column":44}},"5":{"start":{"line":62,"column":4},"end":{"line":65,"column":5}},"6":{"start":{"line":63,"column":8},"end":{"line":63,"column":30}},"7":{"start":{"line":64,"column":8},"end":{"line":64,"column":28}},"8":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"9":{"start":{"line":68,"column":8},"end":{"line":68,"column":75}},"10":{"start":{"line":71,"column":4},"end":{"line":78,"column":5}},"11":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"12":{"start":{"line":73,"column":12},"end":{"line":73,"column":56}},"13":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"14":{"start":{"line":76,"column":12},"end":{"line":76,"column":33}},"15":{"start":{"line":80,"column":4},"end":{"line":80,"column":23}},"16":{"start":{"line":81,"column":4},"end":{"line":81,"column":47}},"17":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"18":{"start":{"line":84,"column":8},"end":{"line":84,"column":70}},"19":{"start":{"line":87,"column":4},"end":{"line":87,"column":27}},"20":{"start":{"line":89,"column":4},"end":{"line":89,"column":24}},"21":{"start":{"line":92,"column":0},"end":{"line":94,"column":2}},"22":{"start":{"line":93,"column":4},"end":{"line":93,"column":21}},"23":{"start":{"line":105,"column":0},"end":{"line":107,"column":2}},"24":{"start":{"line":106,"column":4},"end":{"line":106,"column":21}},"25":{"start":{"line":109,"column":0},"end":{"line":111,"column":2}},"26":{"start":{"line":110,"column":4},"end":{"line":110,"column":27}},"27":{"start":{"line":113,"column":0},"end":{"line":113,"column":27}}},"branchMap":{"1":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"2":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"3":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":13}},{"start":{"line":62,"column":17},"end":{"line":62,"column":42}},{"start":{"line":62,"column":46},"end":{"line":62,"column":62}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"6":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"7":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":75,"column":8}},{"start":{"line":75,"column":8},"end":{"line":75,"column":8}}]},"8":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]}},"code":["'use strict';","","var $npm = {","    utils: require('../utils'),","    formatting: require('../formatting')","};","","/**"," * @class helpers.TableName"," * @description"," *"," * **Alternative Syntax:** `TableName({table, [schema]})` &#8658; {@link helpers.TableName}"," *"," * Prepares and escapes a full table name that can be injected into queries directly."," *"," * This is a read-only type that can be used wherever parameter `table` is supported."," *"," * It supports $[Custom Type Formatting], which means you can use the type directly as a formatting"," * parameter, without specifying any escaping."," *"," * @param {String|Object} table"," * Table name details, depending on the type:"," *"," * - table name, if `table` is a string"," * - object `{table, [schema]}`"," *"," * @param {string} [schema]"," * Database schema name."," *"," * When `table` is passed in as `{table, [schema]}`, this parameter is ignored."," *"," * @property {string} name"," * Formatted/escaped full table name, based on properties `schema` + `table`."," *"," * @property {string} table"," * Table name."," *"," * @property {string} schema"," * Database schema name."," *"," * It is `undefined` when no schema was specified (or if it was an empty string)."," *"," * @returns {helpers.TableName}"," *"," * @example"," *"," * var table = new pgp.helpers.TableName('my-table', 'my-schema');"," * console.log(table);"," * //=> \"my-schema\".\"my-table\""," *"," * // Formatting the type directly:"," * pgp.as.format(\"SELECT * FROM $1\", table);"," * //=> SELECT * FROM \"my-schema\".\"my-table\""," *"," */","function TableName(table, schema) {","","    if (!(this instanceof TableName)) {","        return new TableName(table, schema);","    }","","    if (table && typeof table === 'object' && 'table' in table) {","        schema = table.schema;","        table = table.table;","    }","","    if (!$npm.utils.isText(table)) {","        throw new TypeError('Table name must be a non-empty text string.');","    }","","    if (!$npm.utils.isNull(schema)) {","        if (typeof schema !== 'string') {","            throw new TypeError('Invalid schema name.');","        }","        if (schema.length > 0) {","            this.schema = schema;","        }","    }","","    this.table = table;","    this.name = $npm.formatting.as.name(table);","","    if (this.schema) {","        this.name = $npm.formatting.as.name(schema) + '.' + this.name;","    }","","    this._rawDBType = true;","","    Object.freeze(this);","}","","TableName.prototype.formatDBType = function () {","    return this.name;","};","","/**"," * @method helpers.TableName.toString"," * @description"," * Creates a well-formatted string that represents the object."," *"," * It is called automatically when writing the object into the console."," *"," * @returns {string}"," */","TableName.prototype.toString = function () {","    return this.name;","};","","TableName.prototype.inspect = function () {","    return this.toString();","};","","module.exports = TableName;",""],"l":{"3":1,"56":1,"58":0,"59":0,"62":0,"63":0,"64":0,"67":0,"68":0,"71":0,"72":0,"73":0,"75":0,"76":0,"80":0,"81":0,"83":0,"84":0,"87":0,"89":0,"92":1,"93":0,"105":1,"106":0,"109":1,"110":0,"113":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/columnSet.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/columnSet.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1,"116":0,"117":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"ColumnSet","line":156,"loc":{"start":{"line":156,"column":0},"end":{"line":156,"column":37}}},"2":{"name":"colDesc","line":514,"loc":{"start":{"line":514,"column":4},"end":{"line":514,"column":37}}},"3":{"name":"(anonymous_3)","line":541,"loc":{"start":{"line":541,"column":31},"end":{"line":541,"column":48}}},"4":{"name":"(anonymous_4)","line":564,"loc":{"start":{"line":564,"column":30},"end":{"line":564,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":9,"column":2}},"2":{"start":{"line":11,"column":0},"end":{"line":11,"column":31}},"3":{"start":{"line":156,"column":0},"end":{"line":527,"column":1}},"4":{"start":{"line":158,"column":4},"end":{"line":160,"column":5}},"5":{"start":{"line":159,"column":8},"end":{"line":159,"column":47}},"6":{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},"7":{"start":{"line":163,"column":8},"end":{"line":163,"column":72}},"8":{"start":{"line":166,"column":4},"end":{"line":166,"column":60}},"9":{"start":{"line":168,"column":4},"end":{"line":180,"column":5}},"10":{"start":{"line":169,"column":8},"end":{"line":171,"column":9}},"11":{"start":{"line":170,"column":12},"end":{"line":170,"column":76}},"12":{"start":{"line":172,"column":8},"end":{"line":178,"column":9}},"13":{"start":{"line":173,"column":12},"end":{"line":177,"column":13}},"14":{"start":{"line":174,"column":16},"end":{"line":174,"column":43}},"15":{"start":{"line":176,"column":16},"end":{"line":176,"column":63}},"16":{"start":{"line":179,"column":8},"end":{"line":179,"column":34}},"17":{"start":{"line":201,"column":4},"end":{"line":222,"column":5}},"18":{"start":{"line":202,"column":8},"end":{"line":202,"column":26}},"19":{"start":{"line":203,"column":8},"end":{"line":210,"column":11}},"20":{"start":{"line":204,"column":12},"end":{"line":204,"column":74}},"21":{"start":{"line":205,"column":12},"end":{"line":207,"column":13}},"22":{"start":{"line":206,"column":16},"end":{"line":206,"column":77}},"23":{"start":{"line":208,"column":12},"end":{"line":208,"column":38}},"24":{"start":{"line":209,"column":12},"end":{"line":209,"column":23}},"25":{"start":{"line":212,"column":8},"end":{"line":221,"column":9}},"26":{"start":{"line":213,"column":12},"end":{"line":213,"column":37}},"27":{"start":{"line":215,"column":12},"end":{"line":215,"column":30}},"28":{"start":{"line":216,"column":12},"end":{"line":220,"column":13}},"29":{"start":{"line":217,"column":16},"end":{"line":219,"column":17}},"30":{"start":{"line":218,"column":20},"end":{"line":218,"column":61}},"31":{"start":{"line":224,"column":4},"end":{"line":224,"column":32}},"32":{"start":{"line":226,"column":4},"end":{"line":234,"column":5}},"33":{"start":{"line":227,"column":8},"end":{"line":227,"column":32}},"34":{"start":{"line":230,"column":8},"end":{"line":233,"column":9}},"35":{"start":{"line":231,"column":12},"end":{"line":231,"column":29}},"36":{"start":{"line":232,"column":12},"end":{"line":232,"column":18}},"37":{"start":{"line":252,"column":4},"end":{"line":259,"column":7}},"38":{"start":{"line":254,"column":12},"end":{"line":256,"column":13}},"39":{"start":{"line":255,"column":16},"end":{"line":255,"column":74}},"40":{"start":{"line":255,"column":52},"end":{"line":255,"column":65}},"41":{"start":{"line":257,"column":12},"end":{"line":257,"column":25}},"42":{"start":{"line":277,"column":4},"end":{"line":284,"column":7}},"43":{"start":{"line":279,"column":12},"end":{"line":281,"column":13}},"44":{"start":{"line":280,"column":16},"end":{"line":280,"column":88}},"45":{"start":{"line":280,"column":56},"end":{"line":280,"column":79}},"46":{"start":{"line":282,"column":12},"end":{"line":282,"column":29}},"47":{"start":{"line":300,"column":4},"end":{"line":325,"column":6}},"48":{"start":{"line":301,"column":8},"end":{"line":303,"column":9}},"49":{"start":{"line":302,"column":12},"end":{"line":302,"column":27}},"50":{"start":{"line":304,"column":8},"end":{"line":304,"column":20}},"51":{"start":{"line":305,"column":8},"end":{"line":317,"column":11}},"52":{"start":{"line":306,"column":12},"end":{"line":308,"column":13}},"53":{"start":{"line":307,"column":16},"end":{"line":307,"column":29}},"54":{"start":{"line":309,"column":12},"end":{"line":315,"column":13}},"55":{"start":{"line":310,"column":16},"end":{"line":310,"column":31}},"56":{"start":{"line":311,"column":16},"end":{"line":311,"column":43}},"57":{"start":{"line":312,"column":16},"end":{"line":314,"column":17}},"58":{"start":{"line":313,"column":20},"end":{"line":313,"column":33}},"59":{"start":{"line":316,"column":12},"end":{"line":316,"column":24}},"60":{"start":{"line":319,"column":8},"end":{"line":319,"column":89}},"61":{"start":{"line":319,"column":35},"end":{"line":319,"column":80}},"62":{"start":{"line":321,"column":8},"end":{"line":323,"column":9}},"63":{"start":{"line":322,"column":12},"end":{"line":322,"column":27}},"64":{"start":{"line":324,"column":8},"end":{"line":324,"column":20}},"65":{"start":{"line":382,"column":4},"end":{"line":389,"column":6}},"66":{"start":{"line":383,"column":8},"end":{"line":383,"column":25}},"67":{"start":{"line":384,"column":8},"end":{"line":386,"column":9}},"68":{"start":{"line":385,"column":12},"end":{"line":385,"column":40}},"69":{"start":{"line":388,"column":8},"end":{"line":388,"column":83}},"70":{"start":{"line":451,"column":4},"end":{"line":469,"column":6}},"71":{"start":{"line":452,"column":8},"end":{"line":452,"column":25}},"72":{"start":{"line":453,"column":8},"end":{"line":455,"column":9}},"73":{"start":{"line":454,"column":12},"end":{"line":454,"column":40}},"74":{"start":{"line":456,"column":8},"end":{"line":456,"column":37}},"75":{"start":{"line":457,"column":8},"end":{"line":460,"column":11}},"76":{"start":{"line":458,"column":12},"end":{"line":458,"column":25}},"77":{"start":{"line":459,"column":12},"end":{"line":459,"column":35}},"78":{"start":{"line":461,"column":8},"end":{"line":467,"column":11}},"79":{"start":{"line":462,"column":12},"end":{"line":466,"column":13}},"80":{"start":{"line":463,"column":16},"end":{"line":463,"column":43}},"81":{"start":{"line":465,"column":16},"end":{"line":465,"column":29}},"82":{"start":{"line":468,"column":8},"end":{"line":468,"column":56}},"83":{"start":{"line":494,"column":4},"end":{"line":510,"column":6}},"84":{"start":{"line":495,"column":8},"end":{"line":497,"column":9}},"85":{"start":{"line":496,"column":12},"end":{"line":496,"column":26}},"86":{"start":{"line":498,"column":8},"end":{"line":498,"column":24}},"87":{"start":{"line":499,"column":8},"end":{"line":508,"column":11}},"88":{"start":{"line":500,"column":12},"end":{"line":500,"column":39}},"89":{"start":{"line":501,"column":12},"end":{"line":507,"column":13}},"90":{"start":{"line":502,"column":16},"end":{"line":502,"column":56}},"91":{"start":{"line":504,"column":16},"end":{"line":506,"column":17}},"92":{"start":{"line":505,"column":20},"end":{"line":505,"column":45}},"93":{"start":{"line":509,"column":8},"end":{"line":509,"column":22}},"94":{"start":{"line":512,"column":4},"end":{"line":512,"column":24}},"95":{"start":{"line":514,"column":4},"end":{"line":526,"column":5}},"96":{"start":{"line":515,"column":8},"end":{"line":518,"column":10}},"97":{"start":{"line":519,"column":8},"end":{"line":519,"column":36}},"98":{"start":{"line":520,"column":8},"end":{"line":524,"column":9}},"99":{"start":{"line":521,"column":12},"end":{"line":521,"column":37}},"100":{"start":{"line":523,"column":12},"end":{"line":523,"column":63}},"101":{"start":{"line":525,"column":8},"end":{"line":525,"column":17}},"102":{"start":{"line":541,"column":0},"end":{"line":562,"column":2}},"103":{"start":{"line":542,"column":4},"end":{"line":542,"column":44}},"104":{"start":{"line":543,"column":4},"end":{"line":547,"column":10}},"105":{"start":{"line":548,"column":4},"end":{"line":550,"column":5}},"106":{"start":{"line":549,"column":8},"end":{"line":549,"column":50}},"107":{"start":{"line":551,"column":4},"end":{"line":559,"column":5}},"108":{"start":{"line":552,"column":8},"end":{"line":552,"column":40}},"109":{"start":{"line":553,"column":8},"end":{"line":555,"column":11}},"110":{"start":{"line":554,"column":12},"end":{"line":554,"column":38}},"111":{"start":{"line":556,"column":8},"end":{"line":556,"column":31}},"112":{"start":{"line":558,"column":8},"end":{"line":558,"column":41}},"113":{"start":{"line":560,"column":4},"end":{"line":560,"column":27}},"114":{"start":{"line":561,"column":4},"end":{"line":561,"column":35}},"115":{"start":{"line":564,"column":0},"end":{"line":566,"column":2}},"116":{"start":{"line":565,"column":4},"end":{"line":565,"column":27}},"117":{"start":{"line":568,"column":0},"end":{"line":568,"column":27}}},"branchMap":{"1":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":4},"end":{"line":158,"column":4}},{"start":{"line":158,"column":4},"end":{"line":158,"column":4}}]},"2":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":4},"end":{"line":162,"column":4}},{"start":{"line":162,"column":4},"end":{"line":162,"column":4}}]},"3":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":8},"end":{"line":162,"column":16}},{"start":{"line":162,"column":20},"end":{"line":162,"column":47}}]},"4":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":4},"end":{"line":168,"column":4}},{"start":{"line":168,"column":4},"end":{"line":168,"column":4}}]},"5":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":8}},{"start":{"line":169,"column":8},"end":{"line":169,"column":8}}]},"6":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":8},"end":{"line":172,"column":8}},{"start":{"line":172,"column":8},"end":{"line":172,"column":8}}]},"7":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":12}},{"start":{"line":173,"column":12},"end":{"line":173,"column":12}}]},"8":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":201,"column":4}},{"start":{"line":201,"column":4},"end":{"line":201,"column":4}}]},"9":{"line":204,"type":"cond-expr","locations":[{"start":{"line":204,"column":51},"end":{"line":204,"column":52}},{"start":{"line":204,"column":55},"end":{"line":204,"column":73}}]},"10":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":12},"end":{"line":205,"column":12}},{"start":{"line":205,"column":12},"end":{"line":205,"column":12}}]},"11":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":212,"column":8}},{"start":{"line":212,"column":8},"end":{"line":212,"column":8}}]},"12":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":16},"end":{"line":217,"column":16}},{"start":{"line":217,"column":16},"end":{"line":217,"column":16}}]},"13":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":20},"end":{"line":217,"column":27}},{"start":{"line":217,"column":31},"end":{"line":217,"column":82}}]},"14":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":8},"end":{"line":230,"column":8}},{"start":{"line":230,"column":8},"end":{"line":230,"column":8}}]},"15":{"line":230,"type":"binary-expr","locations":[{"start":{"line":230,"column":12},"end":{"line":230,"column":18}},{"start":{"line":230,"column":22},"end":{"line":230,"column":28}},{"start":{"line":230,"column":32},"end":{"line":230,"column":42}}]},"16":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":12},"end":{"line":254,"column":12}},{"start":{"line":254,"column":12},"end":{"line":254,"column":12}}]},"17":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":12},"end":{"line":279,"column":12}},{"start":{"line":279,"column":12},"end":{"line":279,"column":12}}]},"18":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":8},"end":{"line":301,"column":8}},{"start":{"line":301,"column":8},"end":{"line":301,"column":8}}]},"19":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":12},"end":{"line":306,"column":12}},{"start":{"line":306,"column":12},"end":{"line":306,"column":12}}]},"20":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":12},"end":{"line":309,"column":12}},{"start":{"line":309,"column":12},"end":{"line":309,"column":12}}]},"21":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":16},"end":{"line":312,"column":16}},{"start":{"line":312,"column":16},"end":{"line":312,"column":16}}]},"22":{"line":321,"type":"if","locations":[{"start":{"line":321,"column":8},"end":{"line":321,"column":8}},{"start":{"line":321,"column":8},"end":{"line":321,"column":8}}]},"23":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":8},"end":{"line":384,"column":8}},{"start":{"line":384,"column":8},"end":{"line":384,"column":8}}]},"24":{"line":453,"type":"if","locations":[{"start":{"line":453,"column":8},"end":{"line":453,"column":8}},{"start":{"line":453,"column":8},"end":{"line":453,"column":8}}]},"25":{"line":462,"type":"if","locations":[{"start":{"line":462,"column":12},"end":{"line":462,"column":12}},{"start":{"line":462,"column":12},"end":{"line":462,"column":12}}]},"26":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":8},"end":{"line":495,"column":8}},{"start":{"line":495,"column":8},"end":{"line":495,"column":8}}]},"27":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":12},"end":{"line":501,"column":12}},{"start":{"line":501,"column":12},"end":{"line":501,"column":12}}]},"28":{"line":504,"type":"if","locations":[{"start":{"line":504,"column":16},"end":{"line":504,"column":16}},{"start":{"line":504,"column":16},"end":{"line":504,"column":16}}]},"29":{"line":504,"type":"binary-expr","locations":[{"start":{"line":504,"column":20},"end":{"line":504,"column":28}},{"start":{"line":504,"column":32},"end":{"line":504,"column":42}}]},"30":{"line":517,"type":"binary-expr","locations":[{"start":{"line":517,"column":18},"end":{"line":517,"column":29}},{"start":{"line":517,"column":33},"end":{"line":517,"column":44}}]},"31":{"line":520,"type":"if","locations":[{"start":{"line":520,"column":8},"end":{"line":520,"column":8}},{"start":{"line":520,"column":8},"end":{"line":520,"column":8}}]},"32":{"line":523,"type":"cond-expr","locations":[{"start":{"line":523,"column":40},"end":{"line":523,"column":50}},{"start":{"line":523,"column":53},"end":{"line":523,"column":62}}]},"33":{"line":542,"type":"cond-expr","locations":[{"start":{"line":542,"column":24},"end":{"line":542,"column":39}},{"start":{"line":542,"column":42},"end":{"line":542,"column":43}}]},"34":{"line":548,"type":"if","locations":[{"start":{"line":548,"column":4},"end":{"line":548,"column":4}},{"start":{"line":548,"column":4},"end":{"line":548,"column":4}}]},"35":{"line":551,"type":"if","locations":[{"start":{"line":551,"column":4},"end":{"line":551,"column":4}},{"start":{"line":551,"column":4},"end":{"line":551,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils'),","    formatting: require('../formatting'),","    TableName: require('./tableName'),","    Column: require('./column')","};","","var $arr = require('../array');","","/**"," * @class helpers.ColumnSet"," * @description"," *"," * Performance-optimized, read-only structure with query-formatting columns."," *"," * For performance-oriented applications this type should be created globally, to be reused by all methods."," *"," * @param {object|helpers.Column|array} columns"," * Columns information object, depending on the type:"," *"," * - When it is a simple object, its properties are enumerated to represent both column names and property names"," *   within the source objects. See also option `inherit` that's applicable in this case."," *"," * - When it is a single {@link helpers.Column Column} object, property {@link helpers.ColumnSet#columns columns} is initialized with"," *   just a single column. It is not a unique situation when only a single column is required for an update operation."," *"," * - When it is an array, each element is assumed to represent details for a column. If the element is already of type {@link helpers.Column Column},"," *   it is used directly; otherwise the element is passed into {@link helpers.Column Column} constructor for initialization."," *   On any duplicate column name (case-sensitive) it will throw {@link external:Error Error} = `Duplicate column name \"name\".`"," *"," * - When it is none of the above, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'columns' specified.`"," *"," * @param {object} [options]"," *"," * @param {helpers.TableName|string|{table,schema}} [options.table]"," * Table details."," *"," * When it is a non-null value, and not a {@link helpers.TableName TableName} object, a new {@link helpers.TableName TableName} is constructed from the value."," *"," * It can be used as the default for methods {@link helpers.insert insert} and {@link helpers.update update} when their parameter"," * `table` is omitted, and for logging purposes."," *"," * @param {boolean} [options.inherit = false]"," * Use inherited properties in addition to the object's own properties."," *"," * By default, only the object's own properties are enumerated for column names."," *"," * @returns {helpers.ColumnSet}"," *"," * @see"," *"," * {@link helpers.ColumnSet#columns columns},"," * {@link helpers.ColumnSet#names names},"," * {@link helpers.ColumnSet#table table},"," * {@link helpers.ColumnSet#variables variables} |"," * {@link helpers.ColumnSet.extend extend},"," * {@link helpers.ColumnSet.merge merge},"," * {@link helpers.ColumnSet.prepare prepare}"," *"," * @example"," *"," * // A complex insert/update object scenario for table 'purchases' in schema 'fiscal'."," * // For a good performance, you should declare such objects once and then reuse them."," * //"," * // Column Requirements:"," * //"," * // 1. Property 'id' is only to be used for a WHERE condition in updates"," * // 2. Property 'list' needs to be formatted as a csv"," * // 3. Property 'code' is to be used as raw text, and to be defaulted to 0 when the"," * //    property is missing in the source object"," * // 4. Property 'log' is a JSON object with 'log-entry' for the column name"," * // 5. Property 'data' requires SQL type casting '::int[]'"," * // 6. Property 'amount' needs to be set to 100, if it is 0"," * // 7. Property 'total' must be skipped during updates, if 'amount' was 0, plus its"," * //    column name is 'total-val'"," *"," * var cs = new pgp.helpers.ColumnSet(["," *     '?id', // ColumnConfig equivalent: {name: 'id', cnd: true}"," *     'list:csv', // ColumnConfig equivalent: {name: 'list', mod: ':csv'}"," *     {"," *         name: 'code',"," *         mod: '^', // format as raw text"," *         def: 0 // default to 0 when the property doesn't exist"," *     },"," *     {"," *         name: 'log-entry',"," *         prop: 'log',"," *         mod: ':json' // format as JSON"," *     },"," *     {"," *         name: 'data',"," *         cast: 'int[]' // use SQL type casting '::int[]'"," *     },"," *     {"," *         name: 'amount',"," *         init: col => {"," *             // set to 100, if the value is 0:"," *             return col.value === 0 ? 100 : col.value;"," *         }"," *     },"," *     {"," *         name: 'total-val',"," *         prop: 'total',"," *         skip: col => {"," *             // skip from updates, if 'amount' is 0:"," *             return col.source.amount === 0;"," *         }"," *     }"," * ], {table: {table: 'purchases', schema: 'fiscal'}});"," *"," * // Alternatively, you could take the table declaration out:"," * // var table = new pgp.helpers.TableName('purchases', 'fiscal');"," *"," * console.log(cs); // console output for the object:"," * //=>"," * // ColumnSet {"," * //    table: \"fiscal\".\"purchases\""," * //    columns: ["," * //        Column {"," * //            name: \"id\""," * //            cnd: true"," * //        }"," * //        Column {"," * //            name: \"list\""," * //            mod: \":csv\""," * //        }"," * //        Column {"," * //            name: \"code\""," * //            mod: \"^\""," * //            def: 0"," * //        }"," * //        Column {"," * //            name: \"log-entry\""," * //            prop: \"log\""," * //            mod: \":json\""," * //        }"," * //        Column {"," * //            name: \"data\""," * //            cast: \"int[]\""," * //        }"," * //        Column {"," * //            name: \"amount\""," * //            init: [Function]"," * //        }"," * //        Column {"," * //            name: \"total-val\""," * //            prop: \"total\""," * //            skip: [Function]"," * //        }"," * //    ]"," * // }"," */","function ColumnSet(columns, options) {","","    if (!(this instanceof ColumnSet)) {","        return new ColumnSet(columns, options);","    }","","    if (!columns || typeof columns !== 'object') {","        throw new TypeError('Invalid parameter \\'columns\\' specified.');","    }","","    var inherit, names, variables, updates, isSimple = true;","","    if (!$npm.utils.isNull(options)) {","        if (typeof options !== 'object') {","            throw new TypeError('Invalid parameter \\'options\\' specified.');","        }","        if (!$npm.utils.isNull(options.table)) {","            if (options.table instanceof $npm.TableName) {","                this.table = options.table;","            } else {","                this.table = new $npm.TableName(options.table);","            }","        }","        inherit = options.inherit;","    }","","    /**","     * @name helpers.ColumnSet#table","     * @type {helpers.TableName}","     * @readonly","     * @description","     * Destination table. It can be specified for two purposes:","     *","     * - **primary:** to be used as the default table when it is omitted during a call into methods {@link helpers.insert insert} and {@link helpers.update update}","     * - **secondary:** to be automatically written into the console (for logging purposes).","     */","","","    /**","     * @name helpers.ColumnSet#columns","     * @type helpers.Column[]","     * @readonly","     * @description","     * Array of {@link helpers.Column Column} objects.","     */","    if (Array.isArray(columns)) {","        var colNames = {};","        this.columns = $arr.map(columns, c => {","            var col = (c instanceof $npm.Column) ? c : new $npm.Column(c);","            if (col.name in colNames) {","                throw new Error('Duplicate column name \"' + col.name + '\".');","            }","            colNames[col.name] = true;","            return col;","        });","    } else {","        if (columns instanceof $npm.Column) {","            this.columns = [columns];","        } else {","            this.columns = [];","            for (var name in columns) {","                if (inherit || Object.prototype.hasOwnProperty.call(columns, name)) {","                    this.columns.push(new $npm.Column(name));","                }","            }","        }","    }","","    Object.freeze(this.columns);","","    for (var i = 0; i < this.columns.length; i++) {","        var c = this.columns[i];","        // ColumnSet is simple when the source objects require no preparation,","        // and should be used directly:","        if (c.prop || c.init || 'def' in c) {","            isSimple = false;","            break;","        }","    }","","    /**","     * @name helpers.ColumnSet#names","     * @type String","     * @readonly","     * @description","     * **Added in v5.5.5**","     *","     * Returns a string - comma-separated list of all column names, properly escaped.","     *","     * This method is primarily for internal use.","     *","     * @example","     * var cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);","     * console.log(cs.names);","     * //=> \"id\",\"cells\",\"doc\"","     */","    Object.defineProperty(this, 'names', {","        get: () => {","            if (!names) {","                names = $arr.map(this.columns, c => c.escapedName).join();","            }","            return names;","        }","    });","","    /**","     * @name helpers.ColumnSet#variables","     * @type String","     * @readonly","     * @description","     * **Added in v5.5.5**","     *","     * Returns a string - formatting template for all column values.","     *","     * This method is primarily for internal use.","     *","     * @example","     * var cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);","     * console.log(cs.variables);","     * //=> ${id^},${cells}::int[],${doc:json}","     */","    Object.defineProperty(this, 'variables', {","        get: () => {","            if (!variables) {","                variables = $arr.map(this.columns, c => c.variable + c.castText).join();","            }","            return variables;","        }","    });","","    /**","     * @method helpers.ColumnSet.assign","     * @private","     * @description","     * Returns a formatting template of SET assignments for a single object.","     *","     * This method is for internal use only.","     *","     * @param {object} source","     * Source object that contains values for columns.","     *","     * @returns {string}","     * Comma-separated list of variable-to-column assignments.","     */","    this.assign = source => {","        if (updates) {","            return updates;","        }","        var dynamic;","        var list = $arr.filter(this.columns, c => {","            if (c.cnd) {","                return false;","            }","            if (c.skip) {","                dynamic = true;","                var a = colDesc(c, source);","                if (c.skip.call(source, a)) {","                    return false;","                }","            }","            return true;","        });","","        list = $arr.map(list, c => c.escapedName + '=' + c.variable + c.castText).join();","","        if (!dynamic) {","            updates = list;","        }","        return list;","    };","","    /**","     * @method helpers.ColumnSet.extend","     * @description","     * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.","     *","     * If the two sets contain a column with the same `name` (case-sensitive), an error is thrown.","     *","     * @param {helpers.Column|helpers.ColumnSet|array} columns","     * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:","     * - it can also be of type {@link helpers.ColumnSet ColumnSet}","     * - it cannot be a simple object (properties enumeration is not supported here)","     *","     * @returns {helpers.ColumnSet}","     * New {@link helpers.ColumnSet ColumnSet} object with the extended/concatenated list of columns.","     *","     * @see","     * {@link helpers.Column Column},","     * {@link helpers.ColumnSet.merge merge}","     *","     * @example","     *","     * var pgp = require('pg-promise')();","     *","     * var cs = new pgp.helpers.ColumnSet(['one', 'two'], {table: 'my-table'});","     * console.log(cs);","     * //=>","     * // ColumnSet {","     * //    table: \"my-table\"","     * //    columns: [","     * //        Column {","     * //            name: \"one\"","     * //        }","     * //        Column {","     * //            name: \"two\"","     * //        }","     * //    ]","     * // }","     * var csExtended = cs.extend(['three']);","     * console.log(csExtended);","     * //=>","     * // ColumnSet {","     * //    table: \"my-table\"","     * //    columns: [","     * //        Column {","     * //            name: \"one\"","     * //        }","     * //        Column {","     * //            name: \"two\"","     * //        }","     * //        Column {","     * //            name: \"three\"","     * //        }","     * //    ]","     * // }","     */","    this.extend = columns => {","        var cs = columns;","        if (!(cs instanceof ColumnSet)) {","            cs = new ColumnSet(columns);","        }","        // Any duplicate column will throw Error = 'Duplicate column name \"name\".',","        return new ColumnSet(this.columns.concat(cs.columns), {table: this.table});","    };","","    /**","     * @method helpers.ColumnSet.merge","     * @description","     * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.","     *","     * Items in `columns` with the same `name` (case-sensitive) override the original columns.","     *","     * @param {helpers.Column|helpers.ColumnSet|array} columns","     * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:","     * - it can also be of type {@link helpers.ColumnSet ColumnSet}","     * - it cannot be a simple object (properties enumeration is not supported here)","     *","     * @see","     * {@link helpers.Column Column},","     * {@link helpers.ColumnSet.extend extend}","     *","     * @returns {helpers.ColumnSet}","     * New {@link helpers.ColumnSet ColumnSet} object with the merged list of columns.","     *","     * @example","     *","     * var pgp = require('pg-promise')();","     *","     * var cs = new pgp.helpers.ColumnSet(['?one', 'two:json'], {table: 'my-table'});","     * console.log(cs);","     * //=>","     * // ColumnSet {","     * //    table: \"my-table\"","     * //    columns: [","     * //        Column {","     * //            name: \"one\"","     * //            cnd: true","     * //        }","     * //        Column {","     * //            name: \"two\"","     * //            mod: \":json\"","     * //        }","     * //    ]","     * // }","     * var csMerged = cs.merge(['two', 'three^']);","     * console.log(csMerged);","     * //=>","     * // ColumnSet {","     * //    table: \"my-table\"","     * //    columns: [","     * //        Column {","     * //            name: \"one\"","     * //            cnd: true","     * //        }","     * //        Column {","     * //            name: \"two\"","     * //        }","     * //        Column {","     * //            name: \"three\"","     * //            mod: \"^\"","     * //        }","     * //    ]","     * // }","     *","     */","    this.merge = columns => {","        var cs = columns;","        if (!(cs instanceof ColumnSet)) {","            cs = new ColumnSet(columns);","        }","        var colNames = {}, cols = [];","        $arr.forEach(this.columns, (c, idx) => {","            cols.push(c);","            colNames[c.name] = idx;","        });","        $arr.forEach(cs.columns, c => {","            if (c.name in colNames) {","                cols[colNames[c.name]] = c;","            } else {","                cols.push(c);","            }","        });","        return new ColumnSet(cols, {table: this.table});","    };","","    /**","     * @method helpers.ColumnSet.prepare","     * @description","     * **Added in v5.5.6**","     *","     * Prepares a source object to be formatted, by cloning it and applying the rules","     * as set by the columns configuration.","     *","     * This method is primarily for internal use, and as such it does not validate","     * its input parameters.","     *","     * @param {object} source","     * The source object to be prepared, if required.","     *","     * It must be a non-`null` object, which the method does not validate, as it is","     * intended primarily for internal use by the library.","     *","     * @returns {object}","     * When the object needs to be prepared, the method returns a clone of the source object,","     * with all properties and values set according to the columns configuration.","     *","     * When the object does not need to be prepared, the original object is returned.","     */","    this.prepare = source => {","        if (isSimple) {","            return source; // a simple ColumnSet requires no object preparation;","        }","        var target = {};","        $arr.forEach(this.columns, c => {","            var a = colDesc(c, source);","            if (c.init) {","                target[a.name] = c.init.call(source, a);","            } else {","                if (a.exists || 'def' in c) {","                    target[a.name] = a.value;","                }","            }","        });","        return target;","    };","","    Object.freeze(this);","","    function colDesc(column, source) {","        var a = {","            source: source,","            name: column.prop || column.name","        };","        a.exists = a.name in source;","        if (a.exists) {","            a.value = source[a.name];","        } else {","            a.value = 'def' in column ? column.def : undefined;","        }","        return a;","    }","}","","/**"," * @method helpers.ColumnSet.toString"," * @description"," * Creates a well-formatted multi-line string that represents the object."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","ColumnSet.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap0 = $npm.utils.messageGap(level),","        gap1 = $npm.utils.messageGap(level + 1),","        lines = [","            'ColumnSet {'","        ];","    if (this.table) {","        lines.push(gap1 + 'table: ' + this.table);","    }","    if (this.columns.length) {","        lines.push(gap1 + 'columns: [');","        $arr.forEach(this.columns, c => {","            lines.push(c.toString(2));","        });","        lines.push(gap1 + ']');","    } else {","        lines.push(gap1 + 'columns: []');","    }","    lines.push(gap0 + '}');","    return lines.join($npm.os.EOL);","};","","ColumnSet.prototype.inspect = function () {","    return this.toString();","};","","module.exports = ColumnSet;",""],"l":{"3":1,"11":1,"156":1,"158":0,"159":0,"162":0,"163":0,"166":0,"168":0,"169":0,"170":0,"172":0,"173":0,"174":0,"176":0,"179":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"208":0,"209":0,"212":0,"213":0,"215":0,"216":0,"217":0,"218":0,"224":0,"226":0,"227":0,"230":0,"231":0,"232":0,"252":0,"254":0,"255":0,"257":0,"277":0,"279":0,"280":0,"282":0,"300":0,"301":0,"302":0,"304":0,"305":0,"306":0,"307":0,"309":0,"310":0,"311":0,"312":0,"313":0,"316":0,"319":0,"321":0,"322":0,"324":0,"382":0,"383":0,"384":0,"385":0,"388":0,"451":0,"452":0,"453":0,"454":0,"456":0,"457":0,"458":0,"459":0,"461":0,"462":0,"463":0,"465":0,"468":0,"494":0,"495":0,"496":0,"498":0,"499":0,"500":0,"501":0,"502":0,"504":0,"505":0,"509":0,"512":0,"514":1,"515":0,"519":0,"520":0,"521":0,"523":0,"525":0,"541":1,"542":0,"543":0,"548":0,"549":0,"551":0,"552":0,"553":0,"554":0,"556":0,"558":0,"560":0,"561":0,"564":1,"565":0,"568":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/column.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/column.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":1,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":1,"91":0,"92":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"Column","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":21}}},"2":{"name":"parseCast","line":200,"loc":{"start":{"line":200,"column":0},"end":{"line":200,"column":25}}},"3":{"name":"parseColumn","line":210,"loc":{"start":{"line":210,"column":0},"end":{"line":210,"column":27}}},"4":{"name":"isValidMod","line":230,"loc":{"start":{"line":230,"column":0},"end":{"line":230,"column":25}}},"5":{"name":"isValidVariable","line":235,"loc":{"start":{"line":235,"column":0},"end":{"line":235,"column":31}}},"6":{"name":"(anonymous_6)","line":252,"loc":{"start":{"line":252,"column":28},"end":{"line":252,"column":45}}},"7":{"name":"(anonymous_7)","line":285,"loc":{"start":{"line":285,"column":27},"end":{"line":285,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":115,"column":0},"end":{"line":198,"column":1}},"3":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"4":{"start":{"line":118,"column":8},"end":{"line":118,"column":31}},"5":{"start":{"line":121,"column":4},"end":{"line":176,"column":5}},"6":{"start":{"line":122,"column":8},"end":{"line":122,"column":36}},"7":{"start":{"line":123,"column":8},"end":{"line":123,"column":30}},"8":{"start":{"line":124,"column":8},"end":{"line":126,"column":9}},"9":{"start":{"line":125,"column":12},"end":{"line":125,"column":32}},"10":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"11":{"start":{"line":128,"column":12},"end":{"line":128,"column":32}},"12":{"start":{"line":131,"column":8},"end":{"line":175,"column":9}},"13":{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},"14":{"start":{"line":133,"column":16},"end":{"line":133,"column":130}},"15":{"start":{"line":135,"column":12},"end":{"line":137,"column":13}},"16":{"start":{"line":136,"column":16},"end":{"line":136,"column":134}},"17":{"start":{"line":138,"column":12},"end":{"line":138,"column":33}},"18":{"start":{"line":140,"column":12},"end":{"line":151,"column":13}},"19":{"start":{"line":141,"column":16},"end":{"line":143,"column":17}},"20":{"start":{"line":142,"column":20},"end":{"line":142,"column":134}},"21":{"start":{"line":144,"column":16},"end":{"line":146,"column":17}},"22":{"start":{"line":145,"column":20},"end":{"line":145,"column":138}},"23":{"start":{"line":147,"column":16},"end":{"line":150,"column":17}},"24":{"start":{"line":149,"column":20},"end":{"line":149,"column":41}},"25":{"start":{"line":152,"column":12},"end":{"line":157,"column":13}},"26":{"start":{"line":153,"column":16},"end":{"line":155,"column":17}},"27":{"start":{"line":154,"column":20},"end":{"line":154,"column":99}},"28":{"start":{"line":156,"column":16},"end":{"line":156,"column":35}},"29":{"start":{"line":158,"column":12},"end":{"line":160,"column":13}},"30":{"start":{"line":159,"column":16},"end":{"line":159,"column":48}},"31":{"start":{"line":161,"column":12},"end":{"line":163,"column":13}},"32":{"start":{"line":162,"column":16},"end":{"line":162,"column":37}},"33":{"start":{"line":164,"column":12},"end":{"line":166,"column":13}},"34":{"start":{"line":165,"column":16},"end":{"line":165,"column":35}},"35":{"start":{"line":167,"column":12},"end":{"line":169,"column":13}},"36":{"start":{"line":168,"column":16},"end":{"line":168,"column":37}},"37":{"start":{"line":170,"column":12},"end":{"line":172,"column":13}},"38":{"start":{"line":171,"column":16},"end":{"line":171,"column":37}},"39":{"start":{"line":174,"column":12},"end":{"line":174,"column":59}},"40":{"start":{"line":178,"column":4},"end":{"line":180,"column":57}},"41":{"start":{"line":182,"column":4},"end":{"line":185,"column":7}},"42":{"start":{"line":187,"column":4},"end":{"line":190,"column":7}},"43":{"start":{"line":192,"column":4},"end":{"line":195,"column":7}},"44":{"start":{"line":197,"column":4},"end":{"line":197,"column":24}},"45":{"start":{"line":200,"column":0},"end":{"line":208,"column":1}},"46":{"start":{"line":201,"column":4},"end":{"line":206,"column":5}},"47":{"start":{"line":202,"column":8},"end":{"line":202,"column":50}},"48":{"start":{"line":203,"column":8},"end":{"line":205,"column":9}},"49":{"start":{"line":204,"column":12},"end":{"line":204,"column":21}},"50":{"start":{"line":207,"column":4},"end":{"line":207,"column":81}},"51":{"start":{"line":210,"column":0},"end":{"line":228,"column":1}},"52":{"start":{"line":211,"column":4},"end":{"line":211,"column":83}},"53":{"start":{"line":212,"column":4},"end":{"line":226,"column":5}},"54":{"start":{"line":213,"column":8},"end":{"line":213,"column":21}},"55":{"start":{"line":214,"column":8},"end":{"line":217,"column":9}},"56":{"start":{"line":215,"column":12},"end":{"line":215,"column":27}},"57":{"start":{"line":216,"column":12},"end":{"line":216,"column":34}},"58":{"start":{"line":218,"column":8},"end":{"line":218,"column":68}},"59":{"start":{"line":219,"column":8},"end":{"line":224,"column":9}},"60":{"start":{"line":220,"column":12},"end":{"line":220,"column":49}},"61":{"start":{"line":221,"column":12},"end":{"line":221,"column":29}},"62":{"start":{"line":223,"column":12},"end":{"line":223,"column":28}},"63":{"start":{"line":225,"column":8},"end":{"line":225,"column":19}},"64":{"start":{"line":227,"column":4},"end":{"line":227,"column":80}},"65":{"start":{"line":230,"column":0},"end":{"line":233,"column":1}},"66":{"start":{"line":231,"column":4},"end":{"line":231,"column":77}},"67":{"start":{"line":232,"column":4},"end":{"line":232,"column":38}},"68":{"start":{"line":235,"column":0},"end":{"line":238,"column":1}},"69":{"start":{"line":236,"column":4},"end":{"line":236,"column":50}},"70":{"start":{"line":237,"column":4},"end":{"line":237,"column":32}},"71":{"start":{"line":252,"column":0},"end":{"line":283,"column":2}},"72":{"start":{"line":253,"column":4},"end":{"line":253,"column":44}},"73":{"start":{"line":254,"column":4},"end":{"line":259,"column":10}},"74":{"start":{"line":260,"column":4},"end":{"line":262,"column":5}},"75":{"start":{"line":261,"column":8},"end":{"line":261,"column":64}},"76":{"start":{"line":263,"column":4},"end":{"line":265,"column":5}},"77":{"start":{"line":264,"column":8},"end":{"line":264,"column":62}},"78":{"start":{"line":266,"column":4},"end":{"line":268,"column":5}},"79":{"start":{"line":267,"column":8},"end":{"line":267,"column":64}},"80":{"start":{"line":269,"column":4},"end":{"line":271,"column":5}},"81":{"start":{"line":270,"column":8},"end":{"line":270,"column":62}},"82":{"start":{"line":272,"column":4},"end":{"line":274,"column":5}},"83":{"start":{"line":273,"column":8},"end":{"line":273,"column":62}},"84":{"start":{"line":275,"column":4},"end":{"line":277,"column":5}},"85":{"start":{"line":276,"column":8},"end":{"line":276,"column":46}},"86":{"start":{"line":278,"column":4},"end":{"line":280,"column":5}},"87":{"start":{"line":279,"column":8},"end":{"line":279,"column":46}},"88":{"start":{"line":281,"column":4},"end":{"line":281,"column":27}},"89":{"start":{"line":282,"column":4},"end":{"line":282,"column":35}},"90":{"start":{"line":285,"column":0},"end":{"line":287,"column":2}},"91":{"start":{"line":286,"column":4},"end":{"line":286,"column":27}},"92":{"start":{"line":401,"column":0},"end":{"line":401,"column":24}}},"branchMap":{"1":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":117,"column":4}},{"start":{"line":117,"column":4},"end":{"line":117,"column":4}}]},"2":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"3":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":8},"end":{"line":124,"column":8}},{"start":{"line":124,"column":8},"end":{"line":124,"column":8}}]},"4":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":8}},{"start":{"line":127,"column":8},"end":{"line":127,"column":8}}]},"5":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":8},"end":{"line":131,"column":8}},{"start":{"line":131,"column":8},"end":{"line":131,"column":8}}]},"6":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":12},"end":{"line":131,"column":15}},{"start":{"line":131,"column":19},"end":{"line":131,"column":42}},{"start":{"line":131,"column":46},"end":{"line":131,"column":59}}]},"7":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":12}},{"start":{"line":132,"column":12},"end":{"line":132,"column":12}}]},"8":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":12},"end":{"line":135,"column":12}},{"start":{"line":135,"column":12},"end":{"line":135,"column":12}}]},"9":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":16},"end":{"line":135,"column":43}},{"start":{"line":135,"column":47},"end":{"line":135,"column":73}}]},"10":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":12},"end":{"line":140,"column":12}},{"start":{"line":140,"column":12},"end":{"line":140,"column":12}}]},"11":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":16},"end":{"line":141,"column":16}},{"start":{"line":141,"column":16},"end":{"line":141,"column":16}}]},"12":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":16},"end":{"line":144,"column":16}},{"start":{"line":144,"column":16},"end":{"line":144,"column":16}}]},"13":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":16}},{"start":{"line":147,"column":16},"end":{"line":147,"column":16}}]},"14":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":12},"end":{"line":152,"column":12}},{"start":{"line":152,"column":12},"end":{"line":152,"column":12}}]},"15":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":16},"end":{"line":153,"column":16}},{"start":{"line":153,"column":16},"end":{"line":153,"column":16}}]},"16":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":20},"end":{"line":153,"column":47}},{"start":{"line":153,"column":51},"end":{"line":153,"column":71}}]},"17":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":12},"end":{"line":158,"column":12}},{"start":{"line":158,"column":12},"end":{"line":158,"column":12}}]},"18":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":12},"end":{"line":161,"column":12}},{"start":{"line":161,"column":12},"end":{"line":161,"column":12}}]},"19":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":12},"end":{"line":164,"column":12}},{"start":{"line":164,"column":12},"end":{"line":164,"column":12}}]},"20":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":12},"end":{"line":167,"column":12}},{"start":{"line":167,"column":12},"end":{"line":167,"column":12}}]},"21":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":12},"end":{"line":170,"column":12}},{"start":{"line":170,"column":12},"end":{"line":170,"column":12}}]},"22":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":27},"end":{"line":178,"column":36}},{"start":{"line":178,"column":40},"end":{"line":178,"column":49}}]},"23":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":54},"end":{"line":178,"column":62}},{"start":{"line":178,"column":66},"end":{"line":178,"column":68}}]},"24":{"line":179,"type":"cond-expr","locations":[{"start":{"line":179,"column":32},"end":{"line":179,"column":48}},{"start":{"line":179,"column":52},"end":{"line":179,"column":54}}]},"25":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":201,"column":4}},{"start":{"line":201,"column":4},"end":{"line":201,"column":4}}]},"26":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":8},"end":{"line":203,"column":8}},{"start":{"line":203,"column":8},"end":{"line":203,"column":8}}]},"27":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":212,"column":4}},{"start":{"line":212,"column":4},"end":{"line":212,"column":4}}]},"28":{"line":212,"type":"binary-expr","locations":[{"start":{"line":212,"column":8},"end":{"line":212,"column":9}},{"start":{"line":212,"column":13},"end":{"line":212,"column":26}}]},"29":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":8},"end":{"line":214,"column":8}},{"start":{"line":214,"column":8},"end":{"line":214,"column":8}}]},"30":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":8},"end":{"line":219,"column":8}},{"start":{"line":219,"column":8},"end":{"line":219,"column":8}}]},"31":{"line":237,"type":"binary-expr","locations":[{"start":{"line":237,"column":11},"end":{"line":237,"column":14}},{"start":{"line":237,"column":18},"end":{"line":237,"column":31}}]},"32":{"line":253,"type":"cond-expr","locations":[{"start":{"line":253,"column":24},"end":{"line":253,"column":39}},{"start":{"line":253,"column":42},"end":{"line":253,"column":43}}]},"33":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":4},"end":{"line":260,"column":4}},{"start":{"line":260,"column":4},"end":{"line":260,"column":4}}]},"34":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":4},"end":{"line":263,"column":4}},{"start":{"line":263,"column":4},"end":{"line":263,"column":4}}]},"35":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":4},"end":{"line":266,"column":4}},{"start":{"line":266,"column":4},"end":{"line":266,"column":4}}]},"36":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":4},"end":{"line":269,"column":4}},{"start":{"line":269,"column":4},"end":{"line":269,"column":4}}]},"37":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":4},"end":{"line":272,"column":4}},{"start":{"line":272,"column":4},"end":{"line":272,"column":4}}]},"38":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":4},"end":{"line":275,"column":4}},{"start":{"line":275,"column":4},"end":{"line":275,"column":4}}]},"39":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":4},"end":{"line":278,"column":4}},{"start":{"line":278,"column":4},"end":{"line":278,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils'),","    formatting: require('../formatting')","};","","/**"," *"," * @class helpers.Column"," * @description"," *"," * It is a read-only structure that contains details for a single column, to be primarily used by {@link helpers.ColumnSet ColumnSet}."," *"," * The class parses and validates all the details, and prepares them for high-performance query generation."," *"," * @param {String|helpers.ColumnConfig} col"," * Column details, depending on the type."," *"," * When it is a string, it is expected to contain a name for both the column and the source property, assuming that the two are the same."," * The name must adhere to JavaScript syntax for variable names. The name can be appended with any format modifier as supported by"," * {@link formatting.format as.format} (`^`, `~`, `#`, `:csv`, `:json`, `:name`, `:raw`, `:value`), which is then removed from the name and put"," * into property `mod`. If the name starts with `?`, it is removed, while setting flag `cnd` = `true`."," *"," * If the string doesn't adhere to the above requirements, the method will throw {@link external:TypeError TypeError} = `Invalid column syntax`."," *"," * When `col` is a simple {@link helpers.ColumnConfig ColumnConfig}-like object, it is used as an input configurator to set all the properties"," * of the class."," *"," * @property {string} name"," * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,"," * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any string."," *"," * @property {string} [prop]"," * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables."," *"," * It is ignored when it is the same as `name`."," *"," * @property {string} [mod]"," * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:json`, `:name`, `:raw`, `:value`."," *"," * @property {string} [cast]"," * Server-side type casting, without `::` in front."," *"," * @property {boolean} [cnd]"," * Conditional column flag."," *"," * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and"," * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated."," *"," * It can be set from a string initialization, by adding `?` in front of the name."," *"," * @property {} [def]"," * Default value for the property, to be used only when the source object doesn't have the property."," * It is ignored when property `init` is set."," *"," * @property {helpers.initCB} [init]"," * Override callback for the value."," *"," * @property {helpers.skipCB} [skip]"," * An override for skipping columns dynamically."," *"," * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods"," * {@link helpers.insert insert} and {@link helpers.values values}."," *"," * It is also ignored when conditional flag `cnd` is set."," *"," * @returns {helpers.Column}"," *"," * @see {@link helpers.ColumnConfig ColumnConfig}"," *"," * @example"," *"," * var pgp = require('pg-promise')({"," *     capSQL: true // if you want all generated SQL capitalized"," * });"," *"," * var Column = pgp.helpers.Column;"," *"," * // creating a column from just a name:"," * var col1 = new Column('colName');"," * console.log(col1);"," * //=>"," * // Column {"," * //    name: \"colName\""," * // }"," *"," * // creating a column from a name + modifier:"," * var col2 = new Column('colName:csv');"," * console.log(col2);"," * //=>"," * // Column {"," * //    name: \"colName\""," * //    mod: \":csv\""," * // }"," *"," * // creating a column from a configurator:"," * var col3 = new Column({"," *     name: 'colName', // required"," *     prop: 'propName', // optional"," *     mod: '^', // optional"," *     def: 123 // optional"," * });"," * console.log(col3);"," * //=>"," * // Column {"," * //    name: \"colName\""," * //    prop: \"propName\""," * //    mod: \"^\""," * //    def: 123"," * // }"," *"," */","function Column(col) {","","    if (!(this instanceof Column)) {","        return new Column(col);","    }","","    if (typeof col === 'string') {","        var info = parseColumn(col);","        this.name = info.name;","        if ('mod' in info) {","            this.mod = info.mod;","        }","        if ('cnd' in info) {","            this.cnd = info.cnd;","        }","    } else {","        if (col && typeof col === 'object' && 'name' in col) {","            if (!$npm.utils.isText(col.name)) {","                throw new TypeError('Invalid \\'name\\' value: ' + JSON.stringify(col.name) + '. A non-empty string was expected.');","            }","            if ($npm.utils.isNull(col.prop) && !isValidVariable(col.name)) {","                throw new TypeError('Invalid \\'name\\' syntax: ' + JSON.stringify(col.name) + '. A valid variable name was expected.');","            }","            this.name = col.name; // column name + property name (if 'prop' isn't specified)","","            if (!$npm.utils.isNull(col.prop)) {","                if (!$npm.utils.isText(col.prop)) {","                    throw new TypeError('Invalid \\'prop\\' value: ' + JSON.stringify(col.prop) + '. A non-empty string was expected.');","                }","                if (!isValidVariable(col.prop)) {","                    throw new TypeError('Invalid \\'prop\\' syntax: ' + JSON.stringify(col.prop) + '. A valid variable name was expected.');","                }","                if (col.prop !== col.name) {","                    // optional property name, if different from the column's name;","                    this.prop = col.prop;","                }","            }","            if (!$npm.utils.isNull(col.mod)) {","                if (typeof col.mod !== 'string' || !isValidMod(col.mod)) {","                    throw new TypeError('Invalid \\'mod\\' value: ' + JSON.stringify(col.mod) + '.');","                }","                this.mod = col.mod; // optional format modifier;","            }","            if (!$npm.utils.isNull(col.cast)) {","                this.cast = parseCast(col.cast); // optional SQL type casting","            }","            if ('cnd' in col) {","                this.cnd = !!col.cnd;","            }","            if ('def' in col) {","                this.def = col.def; // optional default","            }","            if (typeof col.init === 'function') {","                this.init = col.init; // optional value override (overrides 'def' also)","            }","            if (typeof col.skip === 'function') {","                this.skip = col.skip;","            }","        } else {","            throw new TypeError('Invalid column details.');","        }","    }","","    var variable = '${' + (this.prop || this.name) + (this.mod || '') + '}',","        castText = this.cast ? ('::' + this.cast) : '',","        escapedName = $npm.formatting.as.name(this.name);","","    Object.defineProperty(this, 'variable', {","        enumerable: false,","        value: variable","    });","","    Object.defineProperty(this, 'castText', {","        enumerable: false,","        value: castText","    });","","    Object.defineProperty(this, 'escapedName', {","        enumerable: false,","        value: escapedName","    });","","    Object.freeze(this);","}","","function parseCast(name) {","    if (typeof name === 'string') {","        var s = name.replace(/^[:\\s]*|\\s*$/g, '');","        if (s) {","            return s;","        }","    }","    throw new TypeError('Invalid \\'cast\\' value: ' + JSON.stringify(name) + '.');","}","","function parseColumn(name) {","    var m = name.match(/\\??[a-zA-Z0-9\\$_]+(\\^|~|#|:raw|:name|:json|:csv|:value)?/);","    if (m && m[0] === name) {","        var res = {};","        if (name[0] === '?') {","            res.cnd = true;","            name = name.substr(1);","        }","        var mod = name.match(/\\^|~|#|:raw|:name|:json|:csv|:value/);","        if (mod) {","            res.name = name.substr(0, mod.index);","            res.mod = mod[0];","        } else {","            res.name = name;","        }","        return res;","    }","    throw new TypeError('Invalid column syntax: ' + JSON.stringify(name) + '.');","}","","function isValidMod(mod) {","    var values = ['^', '~', '#', ':raw', ':name', ':json', ':csv', ':value'];","    return values.indexOf(mod) !== -1;","}","","function isValidVariable(name) {","    var m = name.match(/^[0-9]+|[a-zA-Z0-9\\$_]+/);","    return !!m && m[0] === name;","}","","/**"," * @method helpers.Column.toString"," * @description"," * Creates a well-formatted multi-line string that represents the object."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","Column.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap0 = $npm.utils.messageGap(level),","        gap1 = $npm.utils.messageGap(level + 1),","        lines = [","            gap0 + 'Column {',","            gap1 + 'name: ' + JSON.stringify(this.name)","        ];","    if ('prop' in this) {","        lines.push(gap1 + 'prop: ' + JSON.stringify(this.prop));","    }","    if ('mod' in this) {","        lines.push(gap1 + 'mod: ' + JSON.stringify(this.mod));","    }","    if ('cast' in this) {","        lines.push(gap1 + 'cast: ' + JSON.stringify(this.cast));","    }","    if ('cnd' in this) {","        lines.push(gap1 + 'cnd: ' + JSON.stringify(this.cnd));","    }","    if ('def' in this) {","        lines.push(gap1 + 'def: ' + JSON.stringify(this.def));","    }","    if ('init' in this) {","        lines.push(gap1 + 'init: [Function]');","    }","    if ('skip' in this) {","        lines.push(gap1 + 'skip: [Function]');","    }","    lines.push(gap0 + '}');","    return lines.join($npm.os.EOL);","};","","Column.prototype.inspect = function () {","    return this.toString();","};","","/**"," * @typedef helpers.ColumnConfig"," * @description"," * A simple structure with column details, to be passed into the {@link helpers.Column Column} constructor for initialization."," *"," * @property {string} name"," * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,"," * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any string."," *"," * @property {string} [prop]"," * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables."," *"," * It is ignored when it is the same as `name`."," *"," * @property {string} [mod]"," * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:json`, `:name`, `:raw`, `:value`."," *"," * @property {string} [cast]"," * Server-side type casting. Leading `::` is allowed, but not needed (automatically removed when specified)."," *"," * @property {boolean} [cnd]"," * Conditional column flag."," *"," * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and"," * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated."," *"," * It can be set from a string initialization, by adding `?` in front of the name."," *"," * @property {} [def]"," * Default value for the property, to be used only when the source object doesn't have the property."," * It is ignored when property `init` is set."," *"," * @property {helpers.initCB} [init]"," * Override callback for the value."," *"," * @property {helpers.skipCB} [skip]"," * An override for skipping columns dynamically."," *"," * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods"," * {@link helpers.insert insert} and {@link helpers.values values}."," *"," * It is also ignored when conditional flag `cnd` is set."," *"," */","","/**"," * @callback helpers.initCB"," * @description"," * A callback function type used by parameter `init` within {@link helpers.ColumnConfig ColumnConfig}."," *"," * It works as an override for the corresponding property value in the `source` object."," *"," * The function is called with `this` set to the `source` object."," *"," * @param {} col"," * Column-to-property descriptor."," *"," * @param {object} col.source"," * The source object, equals to `this` that's passed into the function."," *"," * @param {string} col.name"," * Name of the property within the `source` object."," *"," * @param {} col.value"," *"," * Property value, set to one of the following:"," *"," * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists"," * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`"," * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`"," *"," * @param {boolean} col.exists"," * Indicates whether the property exists in the `source` object (`exists = name in source`)."," *"," * @returns {}"," * The new value to be used for the corresponding column."," */","","/**"," * @callback helpers.skipCB"," * @description"," * A callback function type used by parameter `skip` within {@link helpers.ColumnConfig ColumnConfig}."," *"," * It is to dynamically determine when the property with specified `name` in the `source` object is to be skipped."," *"," * The function is called with `this` set to the `source` object."," *"," * @param {} col"," * Column-to-property descriptor."," *"," * @param {object} col.source"," * The source object, equals to `this` that's passed into the function."," *"," * @param {string} col.name"," * Name of the property within the `source` object."," *"," * @param {} col.value"," *"," * Property value, set to one of the following:"," *"," * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists"," * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`"," * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`"," *"," * @param {boolean} col.exists"," * Indicates whether the property exists in the `source` object (`exists = name in source`)."," *"," * @returns {boolean}"," * A truthy value that indicates whether the column is to be skipped."," *"," */","","module.exports = Column;",""],"l":{"3":1,"115":1,"117":0,"118":0,"121":0,"122":0,"123":0,"124":0,"125":0,"127":0,"128":0,"131":0,"132":0,"133":0,"135":0,"136":0,"138":0,"140":0,"141":0,"142":0,"144":0,"145":0,"147":0,"149":0,"152":0,"153":0,"154":0,"156":0,"158":0,"159":0,"161":0,"162":0,"164":0,"165":0,"167":0,"168":0,"170":0,"171":0,"174":0,"178":0,"182":0,"187":0,"192":0,"197":0,"200":1,"201":0,"202":0,"203":0,"204":0,"207":0,"210":1,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"218":0,"219":0,"220":0,"221":0,"223":0,"225":0,"227":0,"230":1,"231":0,"232":0,"235":1,"236":0,"237":0,"252":1,"253":0,"254":0,"260":0,"261":0,"263":0,"264":0,"266":0,"267":0,"269":0,"270":0,"272":0,"273":0,"275":0,"276":0,"278":0,"279":0,"281":0,"282":0,"285":1,"286":0,"401":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/update.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/update.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":1,"53":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"update","line":140,"loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":55}}},"2":{"name":"checkTable","line":211,"loc":{"start":{"line":211,"column":4},"end":{"line":211,"column":26}}},"3":{"name":"checkColumns","line":220,"loc":{"start":{"line":220,"column":4},"end":{"line":220,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":8,"column":2}},"2":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"3":{"start":{"line":140,"column":0},"end":{"line":228,"column":1}},"4":{"start":{"line":142,"column":4},"end":{"line":144,"column":5}},"5":{"start":{"line":143,"column":8},"end":{"line":143,"column":69}},"6":{"start":{"line":146,"column":4},"end":{"line":146,"column":38}},"7":{"start":{"line":148,"column":4},"end":{"line":150,"column":5}},"8":{"start":{"line":149,"column":8},"end":{"line":149,"column":78}},"9":{"start":{"line":152,"column":4},"end":{"line":161,"column":5}},"10":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"11":{"start":{"line":154,"column":12},"end":{"line":154,"column":34}},"12":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"13":{"start":{"line":158,"column":12},"end":{"line":158,"column":101}},"14":{"start":{"line":160,"column":8},"end":{"line":160,"column":54}},"15":{"start":{"line":163,"column":4},"end":{"line":163,"column":28}},"16":{"start":{"line":165,"column":4},"end":{"line":166,"column":50}},"17":{"start":{"line":168,"column":4},"end":{"line":197,"column":5}},"18":{"start":{"line":169,"column":8},"end":{"line":169,"column":47}},"19":{"start":{"line":170,"column":8},"end":{"line":172,"column":9}},"20":{"start":{"line":171,"column":12},"end":{"line":171,"column":44}},"21":{"start":{"line":173,"column":8},"end":{"line":175,"column":9}},"22":{"start":{"line":174,"column":12},"end":{"line":174,"column":44}},"23":{"start":{"line":177,"column":8},"end":{"line":177,"column":63}},"24":{"start":{"line":179,"column":8},"end":{"line":179,"column":70}},"25":{"start":{"line":179,"column":62},"end":{"line":179,"column":68}},"26":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"27":{"start":{"line":182,"column":12},"end":{"line":182,"column":39}},"28":{"start":{"line":185,"column":8},"end":{"line":185,"column":21}},"29":{"start":{"line":187,"column":8},"end":{"line":187,"column":117}},"30":{"start":{"line":187,"column":54},"end":{"line":187,"column":108}},"31":{"start":{"line":189,"column":8},"end":{"line":194,"column":18}},"32":{"start":{"line":190,"column":12},"end":{"line":192,"column":13}},"33":{"start":{"line":191,"column":16},"end":{"line":191,"column":81}},"34":{"start":{"line":193,"column":12},"end":{"line":193,"column":77}},"35":{"start":{"line":196,"column":8},"end":{"line":196,"column":98}},"36":{"start":{"line":199,"column":4},"end":{"line":199,"column":39}},"37":{"start":{"line":201,"column":4},"end":{"line":203,"column":5}},"38":{"start":{"line":202,"column":8},"end":{"line":202,"column":35}},"39":{"start":{"line":205,"column":4},"end":{"line":205,"column":17}},"40":{"start":{"line":207,"column":4},"end":{"line":207,"column":65}},"41":{"start":{"line":209,"column":4},"end":{"line":209,"column":78}},"42":{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},"43":{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},"44":{"start":{"line":213,"column":12},"end":{"line":213,"column":46}},"45":{"start":{"line":215,"column":8},"end":{"line":217,"column":9}},"46":{"start":{"line":216,"column":12},"end":{"line":216,"column":54}},"47":{"start":{"line":220,"column":4},"end":{"line":227,"column":5}},"48":{"start":{"line":221,"column":8},"end":{"line":226,"column":9}},"49":{"start":{"line":222,"column":12},"end":{"line":224,"column":13}},"50":{"start":{"line":223,"column":16},"end":{"line":223,"column":28}},"51":{"start":{"line":225,"column":12},"end":{"line":225,"column":78}},"52":{"start":{"line":230,"column":0},"end":{"line":239,"column":2}},"53":{"start":{"line":241,"column":0},"end":{"line":241,"column":24}}},"branchMap":{"1":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":142,"column":4}},{"start":{"line":142,"column":4},"end":{"line":142,"column":4}}]},"2":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":8},"end":{"line":142,"column":13}},{"start":{"line":142,"column":17},"end":{"line":142,"column":41}}]},"3":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":4},"end":{"line":148,"column":4}},{"start":{"line":148,"column":4},"end":{"line":148,"column":4}}]},"4":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":15}},{"start":{"line":148,"column":19},"end":{"line":148,"column":31}}]},"5":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":4},"end":{"line":152,"column":4}},{"start":{"line":152,"column":4},"end":{"line":152,"column":4}}]},"6":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":8},"end":{"line":153,"column":8}},{"start":{"line":153,"column":8},"end":{"line":153,"column":8}}]},"7":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":8}},{"start":{"line":157,"column":8},"end":{"line":157,"column":8}}]},"8":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":12},"end":{"line":157,"column":19}},{"start":{"line":157,"column":23},"end":{"line":157,"column":49}}]},"9":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":37},"end":{"line":160,"column":44}},{"start":{"line":160,"column":48},"end":{"line":160,"column":52}}]},"10":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":14},"end":{"line":163,"column":21}},{"start":{"line":163,"column":25},"end":{"line":163,"column":27}}]},"11":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":4},"end":{"line":168,"column":4}},{"start":{"line":168,"column":4},"end":{"line":168,"column":4}}]},"12":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":170,"column":8}},{"start":{"line":170,"column":8},"end":{"line":170,"column":8}}]},"13":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":8},"end":{"line":173,"column":8}},{"start":{"line":173,"column":8},"end":{"line":173,"column":8}}]},"14":{"line":177,"type":"cond-expr","locations":[{"start":{"line":177,"column":25},"end":{"line":177,"column":42}},{"start":{"line":177,"column":45},"end":{"line":177,"column":62}}]},"15":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":181,"column":8}},{"start":{"line":181,"column":8},"end":{"line":181,"column":8}}]},"16":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":190,"column":12}},{"start":{"line":190,"column":12},"end":{"line":190,"column":12}}]},"17":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":16},"end":{"line":190,"column":18}},{"start":{"line":190,"column":22},"end":{"line":190,"column":43}}]},"18":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":201,"column":4}},{"start":{"line":201,"column":4},"end":{"line":201,"column":4}}]},"19":{"line":207,"type":"cond-expr","locations":[{"start":{"line":207,"column":25},"end":{"line":207,"column":43}},{"start":{"line":207,"column":46},"end":{"line":207,"column":64}}]},"20":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":212,"column":8}},{"start":{"line":212,"column":8},"end":{"line":212,"column":8}}]},"21":{"line":212,"type":"binary-expr","locations":[{"start":{"line":212,"column":12},"end":{"line":212,"column":17}},{"start":{"line":212,"column":21},"end":{"line":212,"column":55}}]},"22":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":8},"end":{"line":215,"column":8}},{"start":{"line":215,"column":8},"end":{"line":215,"column":8}}]},"23":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":8},"end":{"line":221,"column":8}},{"start":{"line":221,"column":8},"end":{"line":221,"column":8}}]},"24":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":12},"end":{"line":222,"column":12}},{"start":{"line":222,"column":12},"end":{"line":222,"column":12}}]}},"code":["'use strict';","","var $npm = {","    TableName: require('../tableName'),","    ColumnSet: require('../columnSet'),","    formatting: require('../../formatting'),","    utils: require('../../utils')","};","","var $arr = require('../../array');","","/**"," * @method helpers.update"," * @description"," * Generates a simplified `UPDATE` query for either one object or an array of objects."," *"," * The resulting query needs a `WHERE` clause to be appended to it, to determine the update logic."," * This is to allow for update conditions of any complexity that are easy to add."," *"," * @param {object|object[]} data"," * An update object with properties for update values, or an array of such objects."," *"," * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`"," *"," * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an UPDATE from an empty array.`"," *"," * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} ="," * `Invalid update object at index N.`"," *"," * @param {array|helpers.Column|helpers.ColumnSet} [columns]"," * Set of columns to be updated."," *"," * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array"," * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when updating multiple records.`"," *"," * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}"," * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array)."," *"," * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw"," * {@link external:Error Error} = `Cannot generate an UPDATE without any columns.`, unless option `emptyUpdate` was specified."," *"," * @param {helpers.TableName|string|{table,schema}} [table]"," * Table to be updated."," *"," * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object"," * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method"," * will throw {@link external:Error Error} = `Table name is unknown.`"," *"," * @param {object} [options]"," * An object with formatting options for multi-row `UPDATE` queries."," *"," * @param {string} [options.tableAlias=t]"," * Name of the SQL variable that represents the destination table."," *"," * @param {string} [options.valueAlias=v]"," * Name of the SQL variable that represents the values."," *"," * @param {} [options.emptyUpdate]"," * **Added in v.5.6.7**"," *"," * This is a convenience option, to avoid throwing an error when generating a conditional update results in no columns."," *"," * When present, regardless of the value, this option overrides the method's behaviour when applying `skip` logic results in no columns,"," * i.e. when every column is being skipped."," *"," * By default, in that situation the method throws {@link external:Error Error} = `Cannot generate an UPDATE without any columns.`"," * But when this option is present, the method will instead return whatever value the option was passed."," *"," * @returns {}"," * The method usually returns the resulting query string that typically needs a `WHERE` condition appended."," *"," * However, if it results in an empty update, and option `emptyUpdate` was passed in, then the method returns whatever"," * value the option was passed."," *"," * @see"," *  {@link helpers.Column Column},"," *  {@link helpers.ColumnSet ColumnSet},"," *  {@link helpers.TableName TableName}"," *"," * @example"," *"," * var pgp = require('pg-promise')({"," *    capSQL: true // if you want all generated SQL capitalized"," * });"," *"," * var dataSingle = {id: 1, val: 123, msg: 'hello'};"," * var dataMulti = [{id: 1, val: 123, msg: 'hello'}, {id: 2, val: 456, msg: 'world!'}];"," *"," * // Although column details can be taken from the data object, it is not"," * // a likely scenario for an update, unless updating the whole table:"," *"," * pgp.helpers.update(dataSingle, null, 'my-table');"," * //=> UPDATE \"my-table\" SET \"id\"=1,\"val\"=123,\"msg\"='hello'"," *"," * @example"," *"," * // A typical single-object update:"," *"," * pgp.helpers.update(dataSingle, ['val', 'msg'], 'my-table') + ' WHERE id = ' + dataSingle.id;"," * //=> UPDATE \"my-table\" SET \"val\"=123,\"msg\"='hello' WHERE id = 1"," *"," * @example"," *"," * // Column details are required for a multi-row `UPDATE`;"," * // Adding '?' in front of a column name means it is only for a WHERE condition:"," *"," * pgp.helpers.update(dataMulti, ['?id', 'val', 'msg'], 'my-table') + ' WHERE v.id = t.id';"," * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))"," * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id"," *"," * @example"," *"," * // Column details from a reusable ColumnSet (recommended for performance):"," *"," * var cs = new pgp.helpers.ColumnSet(['?id', 'val', 'msg'], {table: 'my-table'});"," *"," * pgp.helpers.update(dataMulti, cs) + ' WHERE v.id = t.id';"," * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))"," * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id"," *"," * @example"," *"," * // Using parameter `options` to change the default alias names:"," *"," * pgp.helpers.update(dataMulti, cs, null, {tableAlias: 'X', valueAlias: 'Y'}) + ' WHERE Y.id = X.id';"," * //=> UPDATE \"my-table\" AS X SET \"val\"=Y.\"val\",\"msg\"=Y.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))"," * //   AS Y(\"id\",\"val\",\"msg\") WHERE Y.id = X.id"," *"," * @example"," *"," * // Handling an empty update"," *"," * var cs = new pgp.helpers.ColumnSet(['?id', '?name'], {table: 'tt'}); // no actual update-able columns"," * var result = pgp.helpers.update(dataMulti, cs, null, {emptyUpdate: 123});"," * if(result === 123) {"," *    // We know the update is empty, i.e. no columns that can be updated;"," *    // And it didn't throw because we specified `emptyUpdate` option."," * }"," */","function update(data, columns, table, options, capSQL) {","","    if (!data || typeof data !== 'object') {","        throw new TypeError('Invalid parameter \\'data\\' specified.');","    }","","    var isArray = Array.isArray(data);","","    if (isArray && !data.length) {","        throw new TypeError('Cannot generate an UPDATE from an empty array.');","    }","","    if (columns instanceof $npm.ColumnSet) {","        if ($npm.utils.isNull(table)) {","            table = columns.table;","        }","    } else {","        if (isArray && $npm.utils.isNull(columns)) {","            throw new TypeError('Parameter \\'columns\\' is required when updating multiple records.');","        }","        columns = new $npm.ColumnSet(columns || data);","    }","","    options = options || {};","","    var format = $npm.formatting.as.format,","        useEmptyUpdate = 'emptyUpdate' in options;","","    if (isArray) {","        var tableAlias = 't', valueAlias = 'v';","        if ($npm.utils.isText(options.tableAlias)) {","            tableAlias = options.tableAlias;","        }","        if ($npm.utils.isText(options.valueAlias)) {","            valueAlias = options.valueAlias;","        }","","        var q = capSQL ? sql.multi.capCase : sql.multi.lowCase;","","        var actualColumns = $arr.filter(columns.columns, c => !c.cnd);","","        if (checkColumns(actualColumns)) {","            return options.emptyUpdate;","        }","","        checkTable();","","        var targetCols = $arr.map(actualColumns, c => c.escapedName + '=' + valueAlias + '.' + c.escapedName).join();","","        var values = $arr.map(data, (d, index) => {","            if (!d || typeof d !== 'object') {","                throw new Error('Invalid update object at index ' + index + '.');","            }","            return '(' + format(columns.variables, columns.prepare(d)) + ')';","        }).join();","","        return format(q, [table.name, tableAlias, targetCols, values, valueAlias, columns.names]);","    }","","    var updates = columns.assign(data);","","    if (checkColumns(updates)) {","        return options.emptyUpdate;","    }","","    checkTable();","","    var query = capSQL ? sql.single.capCase : sql.single.lowCase;","","    return format(query, table.name) + format(updates, columns.prepare(data));","","    function checkTable() {","        if (table && !(table instanceof $npm.TableName)) {","            table = new $npm.TableName(table);","        }","        if (!table) {","            throw new Error('Table name is unknown.');","        }","    }","","    function checkColumns(cols) {","        if (!cols.length) {","            if (useEmptyUpdate) {","                return true;","            }","            throw new Error('Cannot generate an UPDATE without any columns.');","        }","    }","}","","var sql = {","    single: {","        lowCase: 'update $1^ set ',","        capCase: 'UPDATE $1^ SET '","    },","    multi: {","        lowCase: 'update $1^ as $2^ set $3^ from (values$4^) as $5^($6^)',","        capCase: 'UPDATE $1^ AS $2^ SET $3^ FROM (VALUES$4^) AS $5^($6^)'","    }","};","","module.exports = update;",""],"l":{"3":1,"10":1,"140":1,"142":0,"143":0,"146":0,"148":0,"149":0,"152":0,"153":0,"154":0,"157":0,"158":0,"160":0,"163":0,"165":0,"168":0,"169":0,"170":0,"171":0,"173":0,"174":0,"177":0,"179":0,"181":0,"182":0,"185":0,"187":0,"189":0,"190":0,"191":0,"193":0,"196":0,"199":0,"201":0,"202":0,"205":0,"207":0,"209":0,"211":1,"212":0,"213":0,"215":0,"216":0,"220":1,"221":0,"222":0,"223":0,"225":0,"230":1,"241":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/values.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/values.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"values","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":34}},"3":{"start":{"line":76,"column":0},"end":{"line":106,"column":1}},"4":{"start":{"line":78,"column":4},"end":{"line":80,"column":5}},"5":{"start":{"line":79,"column":8},"end":{"line":79,"column":69}},"6":{"start":{"line":82,"column":4},"end":{"line":82,"column":38}},"7":{"start":{"line":84,"column":4},"end":{"line":89,"column":5}},"8":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"9":{"start":{"line":86,"column":12},"end":{"line":86,"column":103}},"10":{"start":{"line":88,"column":8},"end":{"line":88,"column":54}},"11":{"start":{"line":91,"column":4},"end":{"line":93,"column":5}},"12":{"start":{"line":92,"column":8},"end":{"line":92,"column":71}},"13":{"start":{"line":95,"column":4},"end":{"line":95,"column":43}},"14":{"start":{"line":97,"column":4},"end":{"line":104,"column":5}},"15":{"start":{"line":98,"column":8},"end":{"line":103,"column":18}},"16":{"start":{"line":99,"column":12},"end":{"line":101,"column":13}},"17":{"start":{"line":100,"column":16},"end":{"line":100,"column":74}},"18":{"start":{"line":102,"column":12},"end":{"line":102,"column":77}},"19":{"start":{"line":105,"column":4},"end":{"line":105,"column":72}},"20":{"start":{"line":108,"column":0},"end":{"line":108,"column":24}}},"branchMap":{"1":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"2":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":13}},{"start":{"line":78,"column":17},"end":{"line":78,"column":41}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]},"4":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":8}},{"start":{"line":85,"column":8},"end":{"line":85,"column":8}}]},"5":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":19}},{"start":{"line":85,"column":23},"end":{"line":85,"column":49}}]},"6":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":37},"end":{"line":88,"column":44}},{"start":{"line":88,"column":48},"end":{"line":88,"column":52}}]},"7":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"8":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"9":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":12}},{"start":{"line":99,"column":12},"end":{"line":99,"column":12}}]},"10":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":18}},{"start":{"line":99,"column":22},"end":{"line":99,"column":43}}]}},"code":["'use strict';","","var $npm = {","    ColumnSet: require('../columnSet'),","    formatting: require('../../formatting'),","    utils: require('../../utils')","};","","var $arr = require('../../array');","","/**"," * @method helpers.values"," * @description"," * Generates a string of comma-separated value groups from either one object or an array of objects,"," * to be used as part of a query:"," *"," * - from a single object: `(val_1, val_2, ...)`"," * - from an array of objects: `(val_11, val_12, ...), (val_21, val_22, ...)`"," *"," * @param {object|object[]} data"," * A source object with properties as values, or an array of such objects."," *"," * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`"," *"," * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} ="," * `Invalid object at index N.`"," *"," * When `data` is an empty array, an empty string is returned."," *"," * @param {array|helpers.Column|helpers.ColumnSet} [columns]"," * Columns for which to return values."," *"," * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array"," * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when generating multi-row values.`"," *"," * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw"," * {@link external:Error Error} = `Cannot generate values without any columns.`"," *"," * @returns {string}"," * - comma-separated value groups, according to `data`"," * - an empty string, if `data` is an empty array"," *"," * @see"," *  {@link helpers.Column Column},"," *  {@link helpers.ColumnSet ColumnSet}"," *"," * @example"," *"," * var pgp = require('pg-promise')();"," *"," * var dataSingle = {val: 123, msg: 'hello'};"," * var dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];"," *"," * // Properties can be pulled automatically from a single object:"," *"," * pgp.helpers.values(dataSingle);"," * //=> (123,'hello')"," *"," * @example"," *"," * // Column details are required when using an array of objects:"," *"," * pgp.helpers.values(dataMulti, ['val', 'msg']);"," * //=> (123,'hello'),(456,'world!')"," *"," * @example"," *"," * // Column details from a reusable ColumnSet (recommended for performance):"," *"," * var cs = new pgp.helpers.ColumnSet(['val', 'msg']);"," *"," * pgp.helpers.values(dataMulti, cs);"," * //=> (123,'hello'),(456,'world!')"," *"," */","function values(data, columns) {","","    if (!data || typeof data !== 'object') {","        throw new TypeError('Invalid parameter \\'data\\' specified.');","    }","","    var isArray = Array.isArray(data);","","    if (!(columns instanceof $npm.ColumnSet)) {","        if (isArray && $npm.utils.isNull(columns)) {","            throw new TypeError('Parameter \\'columns\\' is required when generating multi-row values.');","        }","        columns = new $npm.ColumnSet(columns || data);","    }","","    if (!columns.columns.length) {","        throw new Error('Cannot generate values without any columns.');","    }","","    var format = $npm.formatting.as.format;","","    if (isArray) {","        return $arr.map(data, (d, index) => {","            if (!d || typeof d !== 'object') {","                throw new Error('Invalid object at index ' + index + '.');","            }","            return '(' + format(columns.variables, columns.prepare(d)) + ')';","        }).join();","    }","    return '(' + format(columns.variables, columns.prepare(data)) + ')';","}","","module.exports = values;",""],"l":{"3":1,"9":1,"76":1,"78":0,"79":0,"82":0,"84":0,"85":0,"86":0,"88":0,"91":0,"92":0,"95":0,"97":0,"98":0,"99":0,"100":0,"102":0,"105":0,"108":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/sets.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/helpers/methods/sets.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"sets","line":59,"loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":59,"column":0},"end":{"line":70,"column":1}},"3":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"4":{"start":{"line":62,"column":8},"end":{"line":62,"column":69}},"5":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"6":{"start":{"line":66,"column":8},"end":{"line":66,"column":54}},"7":{"start":{"line":69,"column":4},"end":{"line":69,"column":68}},"8":{"start":{"line":72,"column":0},"end":{"line":72,"column":22}}},"branchMap":{"1":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"2":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":13}},{"start":{"line":61,"column":17},"end":{"line":61,"column":41}},{"start":{"line":61,"column":45},"end":{"line":61,"column":64}}]},"3":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]},"4":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":37},"end":{"line":66,"column":44}},{"start":{"line":66,"column":48},"end":{"line":66,"column":52}}]}},"code":["'use strict';","","var $npm = {","    ColumnSet: require('../columnSet'),","    format: require('../../formatting').as.format,","    utils: require('../../utils')","};","","/**"," * @method helpers.sets"," * @description"," * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,"," * to be used as part of a query."," *"," * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply."," *"," * @param {object} data"," * A simple, non-null and non-array source object."," *"," * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`"," *"," * @param {array|helpers.Column|helpers.ColumnSet} [columns]"," * Columns for which to set values."," *"," * When not specified, properties of the `data` object are used."," *"," * When no effective columns are found, an empty string is returned."," *"," * @returns {string}"," * - comma-separated value-set statements for the `data` object"," * - an empty string, if no effective columns found"," *"," * @see"," *  {@link helpers.Column Column},"," *  {@link helpers.ColumnSet ColumnSet}"," *"," * @example"," *"," * var pgp = require('pg-promise')();"," *"," * var data = {id: 1, val: 123, msg: 'hello'};"," *"," * // Properties can be pulled automatically from the object:"," *"," * pgp.helpers.sets(data);"," * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'"," *"," * @example"," *"," * // Column details from a reusable ColumnSet (recommended for performance);"," * // NOTE: Conditional columns (start with '?') are skipped:"," *"," * var cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);"," *"," * pgp.helpers.sets(data, cs);"," * //=> \"val\"=123,\"msg\"='hello'"," *"," */","function sets(data, columns) {","","    if (!data || typeof data !== 'object' || Array.isArray(data)) {","        throw new TypeError('Invalid parameter \\'data\\' specified.');","    }","","    if (!(columns instanceof $npm.ColumnSet)) {","        columns = new $npm.ColumnSet(columns || data);","    }","","    return $npm.format(columns.assign(data), columns.prepare(data));","}","","module.exports = sets;",""],"l":{"3":1,"59":1,"61":0,"62":0,"65":0,"66":0,"69":0,"72":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/index.js","s":{"1":1,"2":1,"3":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":8,"column":2}},"2":{"start":{"line":40,"column":0},"end":{"line":46,"column":2}},"3":{"start":{"line":48,"column":0},"end":{"line":48,"column":30}}},"branchMap":{},"code":["'use strict';","","var $npm = {","    qResult: require('./queryResult'),","    qFile: require('./queryFile'),","    prepared: require('./prepared'),","    paramQuery: require('./paramQuery')","};","","/**"," * @namespace errors"," * @description"," * Error types namespace, available as `pgp.errors`, before and after initializing the library."," *"," * @property {function} PreparedStatementError"," * {@link errors.PreparedStatementError PreparedStatementError} class constructor."," *"," * Represents all errors that can be reported by class {@link PreparedStatement}."," *"," * @property {function} ParameterizedQueryError"," * {@link errors.ParameterizedQueryError ParameterizedQueryError} class constructor."," *"," * Represents all errors that can be reported by class {@link ParameterizedQuery}."," *"," * @property {function} QueryFileError"," * {@link errors.QueryFileError QueryFileError} class constructor."," *"," * Represents all errors that can be reported by class {@link QueryFile}."," *"," * @property {function} QueryResultError"," * {@link errors.QueryResultError QueryResultError} class constructor."," *"," * Represents all result-specific errors from query methods."," *"," * @property {errors.queryResultErrorCode} queryResultErrorCode"," * Error codes `enum` used by class {@link errors.QueryResultError QueryResultError}."," *"," */","","module.exports = {","    QueryResultError: $npm.qResult.QueryResultError,","    queryResultErrorCode: $npm.qResult.queryResultErrorCode,","    PreparedStatementError: $npm.prepared,","    ParameterizedQueryError: $npm.paramQuery,","    QueryFileError: $npm.qFile","};","","Object.freeze(module.exports);",""],"l":{"3":1,"40":1,"48":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/queryResult.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/queryResult.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"QueryResultError","line":120,"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":55}}},"2":{"name":"(anonymous_2)","line":152,"loc":{"start":{"line":152,"column":38},"end":{"line":152,"column":55}}},"3":{"name":"(anonymous_3)","line":170,"loc":{"start":{"line":170,"column":37},"end":{"line":170,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":6,"column":2}},"2":{"start":{"line":19,"column":0},"end":{"line":28,"column":2}},"3":{"start":{"line":30,"column":0},"end":{"line":30,"column":36}},"4":{"start":{"line":32,"column":0},"end":{"line":36,"column":2}},"5":{"start":{"line":120,"column":0},"end":{"line":130,"column":1}},"6":{"start":{"line":121,"column":4},"end":{"line":121,"column":44}},"7":{"start":{"line":122,"column":4},"end":{"line":122,"column":47}},"8":{"start":{"line":123,"column":4},"end":{"line":123,"column":28}},"9":{"start":{"line":124,"column":4},"end":{"line":124,"column":47}},"10":{"start":{"line":125,"column":4},"end":{"line":125,"column":21}},"11":{"start":{"line":126,"column":4},"end":{"line":126,"column":25}},"12":{"start":{"line":127,"column":4},"end":{"line":127,"column":23}},"13":{"start":{"line":128,"column":4},"end":{"line":128,"column":25}},"14":{"start":{"line":129,"column":4},"end":{"line":129,"column":39}},"15":{"start":{"line":132,"column":0},"end":{"line":138,"column":3}},"16":{"start":{"line":152,"column":0},"end":{"line":168,"column":2}},"17":{"start":{"line":153,"column":4},"end":{"line":153,"column":44}},"18":{"start":{"line":154,"column":4},"end":{"line":162,"column":10}},"19":{"start":{"line":163,"column":4},"end":{"line":165,"column":5}},"20":{"start":{"line":164,"column":8},"end":{"line":164,"column":68}},"21":{"start":{"line":166,"column":4},"end":{"line":166,"column":27}},"22":{"start":{"line":167,"column":4},"end":{"line":167,"column":35}},"23":{"start":{"line":170,"column":0},"end":{"line":172,"column":2}},"24":{"start":{"line":171,"column":4},"end":{"line":171,"column":27}},"25":{"start":{"line":174,"column":0},"end":{"line":177,"column":2}}},"branchMap":{"1":{"line":153,"type":"cond-expr","locations":[{"start":{"line":153,"column":24},"end":{"line":153,"column":39}},{"start":{"line":153,"column":42},"end":{"line":153,"column":43}}]},"2":{"line":161,"type":"cond-expr","locations":[{"start":{"line":161,"column":65},"end":{"line":161,"column":87}},{"start":{"line":161,"column":90},"end":{"line":161,"column":116}}]},"3":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils')","};","","/**"," * @enum {number}"," * @alias errors.queryResultErrorCode"," * @readonly"," * @description"," * `queryResultErrorCode` enumerator, available from the {@link errors} namespace."," *"," * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}."," *"," * @see {@link errors.QueryResultError}"," */","var queryResultErrorCode = {","    /** No data returned from the query. */","    noData: 0,","","    /** No return data was expected. */","    notEmpty: 1,","","    /** Multiple rows were not expected. */","    multiple: 2","};","","Object.freeze(queryResultErrorCode);","","var errorMessages = [","    {name: 'noData', message: 'No data returned from the query.'},","    {name: 'notEmpty', message: 'No return data was expected.'},","    {name: 'multiple', message: 'Multiple rows were not expected.'}","];","","/**"," * @interface errors.QueryResultError"," * @augments external:Error"," * @description"," *"," * This error is specified as the rejection reason for all result-specific methods when the result doesn't match"," * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}."," *"," * The error applies to the result from the following methods: {@link Database.none none},"," * {@link Database.one one}, {@link Database.oneOrNone oneOrNone} and {@link Database.many many}."," *"," * Supported errors:"," *"," * - `No return data was expected.`, method {@link Database.none none}"," * - `No data returned from the query.`, methods {@link Database.one one} and {@link Database.many many}"," * - `Multiple rows were not expected.`, methods {@link Database.one one} and {@link Database.oneOrNone oneOrNone}"," *"," * Like any other error, this one is notified with through the global event {@link event:error error}."," *"," * The type is available from the {@link errors} namespace."," *"," * @property {string} name"," * Standard {@link external:Error Error} property - error type name = `QueryResultError`."," *"," * @property {string} message"," * Standard {@link external:Error Error} property - the error message."," *"," * @property {string} stack"," * Standard {@link external:Error Error} property - the stack trace."," *"," * @property {object} result"," * The original $[Result] object that was received."," *"," * @property {number} received"," * Total number of rows received. It is simply the value of `result.rows.length`."," *"," * @property {number} code"," * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value."," *"," * @property {string} query"," * Query that was executed."," *"," * Normally, it is the query already formatted with values, if there were any."," * But if you are using initialization option `pgFormatting`, then the query string is before formatting."," *"," * @property {} values"," * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used."," * Otherwise, the values are within the pre-formatted `query` string."," *"," * @example"," *"," * var QueryResultError = pgp.errors.QueryResultError;"," * var qrec = pgp.errors.queryResultErrorCode;"," *"," * var options = {"," *"," *   // pg-promise initialization options..."," *"," *   error: (err, e) => {"," *       if (err instanceof QueryResultError) {"," *           // A query returned unexpected number of records, and thus rejected;"," *           "," *           // we can check the error code, if we want specifics:"," *           if(err.code === qrec.noData) {"," *               // expected some data, but received none;"," *           }"," *"," *           // If you write QueryResultError into the console,"," *           // you will get a nicely formatted output."," *"," *           console.log(err);"," *           "," *           // See also: err, e.query, e.params, etc."," *       }"," *   }"," * };"," *"," * @see"," * {@link queryResult}, {@link Database.none none}, {@link Database.one one},"," * {@link Database.oneOrNone oneOrNone}, {@link Database.many many}"," *"," */","function QueryResultError(code, result, query, values) {","    var temp = Error.apply(this, arguments);","    temp.name = this.name = 'QueryResultError';","    this.stack = temp.stack;","    this.message = errorMessages[code].message;","    this.code = code;","    this.result = result;","    this.query = query;","    this.values = values;","    this.received = result.rows.length;","}","","QueryResultError.prototype = Object.create(Error.prototype, {","    constructor: {","        value: QueryResultError,","        writable: true,","        configurable: true","    }","});","","/**"," * @method errors.QueryResultError.toString"," * @description"," * Creates a well-formatted multi-line string that represents the error."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","QueryResultError.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap0 = $npm.utils.messageGap(level),","        gap1 = $npm.utils.messageGap(level + 1),","        lines = [","            'QueryResultError {',","            gap1 + 'code: queryResultErrorCode.' + errorMessages[this.code].name,","            gap1 + 'message: \"' + this.message + '\"',","            gap1 + 'received: ' + this.received,","            gap1 + 'query: ' + (typeof this.query === 'string' ? '\"' + this.query + '\"' : JSON.stringify(this.query))","        ];","    if (this.values !== undefined) {","        lines.push(gap1 + 'values: ' + JSON.stringify(this.values));","    }","    lines.push(gap0 + '}');","    return lines.join($npm.os.EOL);","};","","QueryResultError.prototype.inspect = function () {","    return this.toString();","};","","module.exports = {","    QueryResultError: QueryResultError,","    queryResultErrorCode: queryResultErrorCode","};",""],"l":{"3":1,"19":1,"30":1,"32":1,"120":1,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"132":1,"152":1,"153":0,"154":0,"163":0,"164":0,"166":0,"167":0,"170":1,"171":0,"174":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/prepared.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/prepared.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"PreparedStatementError","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":43}}},"2":{"name":"(anonymous_2)","line":70,"loc":{"start":{"line":70,"column":44},"end":{"line":70,"column":61}}},"3":{"name":"(anonymous_3)","line":91,"loc":{"start":{"line":91,"column":43},"end":{"line":91,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":37,"column":0},"end":{"line":48,"column":1}},"3":{"start":{"line":38,"column":4},"end":{"line":38,"column":44}},"4":{"start":{"line":39,"column":4},"end":{"line":39,"column":53}},"5":{"start":{"line":40,"column":4},"end":{"line":40,"column":28}},"6":{"start":{"line":41,"column":4},"end":{"line":46,"column":5}},"7":{"start":{"line":42,"column":8},"end":{"line":42,"column":27}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":73}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":29}},"10":{"start":{"line":47,"column":4},"end":{"line":47,"column":21}},"11":{"start":{"line":50,"column":0},"end":{"line":56,"column":3}},"12":{"start":{"line":70,"column":0},"end":{"line":89,"column":2}},"13":{"start":{"line":71,"column":4},"end":{"line":71,"column":44}},"14":{"start":{"line":72,"column":4},"end":{"line":83,"column":10}},"15":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"16":{"start":{"line":85,"column":8},"end":{"line":85,"column":70}},"17":{"start":{"line":87,"column":4},"end":{"line":87,"column":27}},"18":{"start":{"line":88,"column":4},"end":{"line":88,"column":35}},"19":{"start":{"line":91,"column":0},"end":{"line":93,"column":2}},"20":{"start":{"line":92,"column":4},"end":{"line":92,"column":27}},"21":{"start":{"line":95,"column":0},"end":{"line":95,"column":40}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"2":{"line":71,"type":"cond-expr","locations":[{"start":{"line":71,"column":24},"end":{"line":71,"column":39}},{"start":{"line":71,"column":42},"end":{"line":71,"column":43}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils'),","    QueryFileError: require('./queryFile')","};","","/**"," * @interface errors.PreparedStatementError"," * @augments external:Error"," * @description"," * {@link errors.PreparedStatementError PreparedStatementError} interface, available from the {@link errors} namespace."," *"," * This type represents all errors that can be reported by class {@link PreparedStatement}, whether it is used"," * explicitly or implicitly (via a simple `{name, text, values}` object)."," *"," * @property {string} name"," * Standard {@link external:Error Error} property - error type name = `PreparedStatementError`."," *"," * @property {string} message"," * Standard {@link external:Error Error} property - the error message."," *"," * @property {string} stack"," * Standard {@link external:Error Error} property - the stack trace."," *"," * @property {errors.QueryFileError} error"," * Internal {@link errors.QueryFileError} object."," *"," * It is set only when the source {@link PreparedStatement} used a {@link QueryFile} which threw the error."," *"," * @property {object} result"," * Resulting Prepared Statement object."," *"," * @see PreparedStatement"," */","function PreparedStatementError(error, ps) {","    var temp = Error.apply(this, arguments);","    temp.name = this.name = 'PreparedStatementError';","    this.stack = temp.stack;","    if (error instanceof $npm.QueryFileError) {","        this.error = error;","        this.message = 'Failed to initialize \\'text\\' from a QueryFile.';","    } else {","        this.message = error;","    }","    this.result = ps;","}","","PreparedStatementError.prototype = Object.create(Error.prototype, {","    constructor: {","        value: PreparedStatementError,","        writable: true,","        configurable: true","    }","});","","/**"," * @method errors.PreparedStatementError.toString"," * @description"," * Creates a well-formatted multi-line string that represents the error."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","PreparedStatementError.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap0 = $npm.utils.messageGap(level),","        gap1 = $npm.utils.messageGap(level + 1),","        gap2 = $npm.utils.messageGap(level + 2),","        lines = [","            'PreparedStatementError {',","            gap1 + 'message: \"' + this.message + '\"',","            gap1 + 'result: {',","            gap2 + 'name: ' + JSON.stringify(this.result.name),","            gap2 + 'text: ' + JSON.stringify(this.result.text),","            gap2 + 'values: ' + JSON.stringify(this.result.values),","            gap1 + '}'","        ];","    if (this.error) {","        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));","    }","    lines.push(gap0 + '}');","    return lines.join($npm.os.EOL);","};","","PreparedStatementError.prototype.inspect = function () {","    return this.toString();","};","","module.exports = PreparedStatementError;",""],"l":{"3":1,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"45":0,"47":0,"50":1,"70":1,"71":0,"72":0,"84":0,"85":0,"87":0,"88":0,"91":1,"92":0,"95":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/paramQuery.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/errors/paramQuery.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"ParameterizedQueryError","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":44}}},"2":{"name":"(anonymous_2)","line":70,"loc":{"start":{"line":70,"column":45},"end":{"line":70,"column":62}}},"3":{"name":"(anonymous_3)","line":90,"loc":{"start":{"line":90,"column":44},"end":{"line":90,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":37,"column":0},"end":{"line":48,"column":1}},"3":{"start":{"line":38,"column":4},"end":{"line":38,"column":44}},"4":{"start":{"line":39,"column":4},"end":{"line":39,"column":54}},"5":{"start":{"line":40,"column":4},"end":{"line":40,"column":28}},"6":{"start":{"line":41,"column":4},"end":{"line":46,"column":5}},"7":{"start":{"line":42,"column":8},"end":{"line":42,"column":27}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":73}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":29}},"10":{"start":{"line":47,"column":4},"end":{"line":47,"column":21}},"11":{"start":{"line":50,"column":0},"end":{"line":56,"column":3}},"12":{"start":{"line":70,"column":0},"end":{"line":88,"column":2}},"13":{"start":{"line":71,"column":4},"end":{"line":71,"column":44}},"14":{"start":{"line":72,"column":4},"end":{"line":82,"column":10}},"15":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"16":{"start":{"line":84,"column":8},"end":{"line":84,"column":70}},"17":{"start":{"line":86,"column":4},"end":{"line":86,"column":27}},"18":{"start":{"line":87,"column":4},"end":{"line":87,"column":35}},"19":{"start":{"line":90,"column":0},"end":{"line":92,"column":2}},"20":{"start":{"line":91,"column":4},"end":{"line":91,"column":27}},"21":{"start":{"line":94,"column":0},"end":{"line":94,"column":41}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"2":{"line":71,"type":"cond-expr","locations":[{"start":{"line":71,"column":24},"end":{"line":71,"column":39}},{"start":{"line":71,"column":42},"end":{"line":71,"column":43}}]},"3":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils'),","    QueryFileError: require('./queryFile')","};","","/**"," * @interface errors.ParameterizedQueryError"," * @augments external:Error"," * @description"," * {@link errors.ParameterizedQueryError ParameterizedQueryError} interface, available from the {@link errors} namespace."," *"," * This type represents all errors that can be reported by class {@link ParameterizedQuery}, whether it is used"," * explicitly or implicitly (via a simple `{text, values}` object)."," *"," * @property {string} name"," * Standard {@link external:Error Error} property - error type name = `ParameterizedQueryError`."," *"," * @property {string} message"," * Standard {@link external:Error Error} property - the error message."," *"," * @property {string} stack"," * Standard {@link external:Error Error} property - the stack trace."," *"," * @property {errors.QueryFileError} error"," * Internal {@link errors.QueryFileError} object."," *"," * It is set only when the source {@link ParameterizedQuery} used a {@link QueryFile} which threw the error."," *"," * @property {object} result"," * Resulting Parameterized Query object."," *"," * @see ParameterizedQuery"," */","function ParameterizedQueryError(error, ps) {","    var temp = Error.apply(this, arguments);","    temp.name = this.name = 'ParameterizedQueryError';","    this.stack = temp.stack;","    if (error instanceof $npm.QueryFileError) {","        this.error = error;","        this.message = 'Failed to initialize \\'text\\' from a QueryFile.';","    } else {","        this.message = error;","    }","    this.result = ps;","}","","ParameterizedQueryError.prototype = Object.create(Error.prototype, {","    constructor: {","        value: ParameterizedQueryError,","        writable: true,","        configurable: true","    }","});","","/**"," * @method errors.ParameterizedQueryError.toString"," * @description"," * Creates a well-formatted multi-line string that represents the error."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","ParameterizedQueryError.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap0 = $npm.utils.messageGap(level),","        gap1 = $npm.utils.messageGap(level + 1),","        gap2 = $npm.utils.messageGap(level + 2),","        lines = [","            'ParameterizedQueryError {',","            gap1 + 'message: \"' + this.message + '\"',","            gap1 + 'result: {',","            gap2 + 'text: ' + JSON.stringify(this.result.text),","            gap2 + 'values: ' + JSON.stringify(this.result.values),","            gap1 + '}'","        ];","    if (this.error) {","        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));","    }","    lines.push(gap0 + '}');","    return lines.join($npm.os.EOL);","};","","ParameterizedQueryError.prototype.inspect = function () {","    return this.toString();","};","","module.exports = ParameterizedQueryError;",""],"l":{"3":1,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"45":0,"47":0,"50":1,"70":1,"71":0,"72":0,"83":0,"84":0,"86":0,"87":0,"90":1,"91":0,"94":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/utils/public.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/utils/public.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"camelize","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":24}}},"2":{"name":"camelizeVar","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":27}}},"3":{"name":"_enumSql","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":46}}},"4":{"name":"enumSql","line":184,"loc":{"start":{"line":184,"column":0},"end":{"line":184,"column":35}}},"5":{"name":"objectToCode","line":298,"loc":{"start":{"line":298,"column":0},"end":{"line":298,"column":31}}},"6":{"name":"generate","line":308,"loc":{"start":{"line":308,"column":4},"end":{"line":308,"column":34}}},"7":{"name":"buildSqlModule","line":428,"loc":{"start":{"line":428,"column":0},"end":{"line":428,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":8,"column":2}},"2":{"start":{"line":10,"column":0},"end":{"line":10,"column":28}},"3":{"start":{"line":33,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":34,"column":4},"end":{"line":36,"column":7}},"5":{"start":{"line":35,"column":8},"end":{"line":35,"column":44}},"6":{"start":{"line":37,"column":4},"end":{"line":37,"column":60}},"7":{"start":{"line":62,"column":0},"end":{"line":65,"column":1}},"8":{"start":{"line":63,"column":4},"end":{"line":63,"column":84}},"9":{"start":{"line":64,"column":4},"end":{"line":64,"column":26}},"10":{"start":{"line":67,"column":0},"end":{"line":116,"column":1}},"11":{"start":{"line":68,"column":4},"end":{"line":68,"column":18}},"12":{"start":{"line":69,"column":4},"end":{"line":114,"column":7}},"13":{"start":{"line":70,"column":8},"end":{"line":70,"column":55}},"14":{"start":{"line":71,"column":8},"end":{"line":82,"column":9}},"15":{"start":{"line":72,"column":12},"end":{"line":72,"column":46}},"16":{"start":{"line":77,"column":12},"end":{"line":79,"column":13},"skip":true},"17":{"start":{"line":78,"column":16},"end":{"line":78,"column":23},"skip":true},"18":{"start":{"line":81,"column":12},"end":{"line":81,"column":20},"skip":true},"19":{"start":{"line":83,"column":8},"end":{"line":113,"column":9}},"20":{"start":{"line":84,"column":12},"end":{"line":96,"column":13}},"21":{"start":{"line":85,"column":16},"end":{"line":85,"column":48}},"22":{"start":{"line":86,"column":16},"end":{"line":86,"column":73}},"23":{"start":{"line":87,"column":16},"end":{"line":87,"column":60}},"24":{"start":{"line":88,"column":16},"end":{"line":95,"column":17}},"25":{"start":{"line":89,"column":20},"end":{"line":93,"column":21}},"26":{"start":{"line":90,"column":24},"end":{"line":92,"column":25}},"27":{"start":{"line":91,"column":28},"end":{"line":91,"column":101}},"28":{"start":{"line":94,"column":20},"end":{"line":94,"column":38}},"29":{"start":{"line":98,"column":12},"end":{"line":112,"column":13}},"30":{"start":{"line":99,"column":16},"end":{"line":99,"column":70}},"31":{"start":{"line":100,"column":16},"end":{"line":104,"column":17}},"32":{"start":{"line":101,"column":20},"end":{"line":103,"column":21}},"33":{"start":{"line":102,"column":24},"end":{"line":102,"column":95}},"34":{"start":{"line":105,"column":16},"end":{"line":105,"column":38}},"35":{"start":{"line":106,"column":16},"end":{"line":111,"column":17}},"36":{"start":{"line":107,"column":20},"end":{"line":107,"column":95}},"37":{"start":{"line":108,"column":20},"end":{"line":110,"column":21}},"38":{"start":{"line":109,"column":24},"end":{"line":109,"column":44}},"39":{"start":{"line":115,"column":4},"end":{"line":115,"column":16}},"40":{"start":{"line":184,"column":0},"end":{"line":193,"column":1}},"41":{"start":{"line":185,"column":4},"end":{"line":187,"column":5}},"42":{"start":{"line":186,"column":8},"end":{"line":186,"column":82}},"43":{"start":{"line":188,"column":4},"end":{"line":190,"column":5}},"44":{"start":{"line":189,"column":8},"end":{"line":189,"column":21}},"45":{"start":{"line":191,"column":4},"end":{"line":191,"column":48}},"46":{"start":{"line":192,"column":4},"end":{"line":192,"column":42}},"47":{"start":{"line":298,"column":0},"end":{"line":332,"column":1}},"48":{"start":{"line":300,"column":4},"end":{"line":302,"column":5}},"49":{"start":{"line":301,"column":8},"end":{"line":301,"column":76}},"50":{"start":{"line":304,"column":4},"end":{"line":304,"column":48}},"51":{"start":{"line":306,"column":4},"end":{"line":306,"column":46}},"52":{"start":{"line":308,"column":4},"end":{"line":331,"column":5}},"53":{"start":{"line":309,"column":8},"end":{"line":309,"column":58}},"54":{"start":{"line":310,"column":8},"end":{"line":310,"column":20}},"55":{"start":{"line":311,"column":8},"end":{"line":329,"column":9}},"56":{"start":{"line":312,"column":12},"end":{"line":312,"column":34}},"57":{"start":{"line":313,"column":12},"end":{"line":315,"column":13}},"58":{"start":{"line":314,"column":16},"end":{"line":314,"column":28}},"59":{"start":{"line":316,"column":12},"end":{"line":327,"column":13}},"60":{"start":{"line":317,"column":16},"end":{"line":317,"column":49}},"61":{"start":{"line":318,"column":16},"end":{"line":318,"column":51}},"62":{"start":{"line":319,"column":16},"end":{"line":319,"column":40}},"63":{"start":{"line":321,"column":16},"end":{"line":321,"column":48}},"64":{"start":{"line":322,"column":16},"end":{"line":326,"column":17}},"65":{"start":{"line":323,"column":20},"end":{"line":323,"column":49}},"66":{"start":{"line":325,"column":20},"end":{"line":325,"column":50}},"67":{"start":{"line":328,"column":12},"end":{"line":328,"column":18}},"68":{"start":{"line":330,"column":8},"end":{"line":330,"column":20}},"69":{"start":{"line":428,"column":0},"end":{"line":499,"column":1}},"70":{"start":{"line":430,"column":4},"end":{"line":449,"column":5}},"71":{"start":{"line":431,"column":8},"end":{"line":431,"column":108}},"72":{"start":{"line":432,"column":8},"end":{"line":432,"column":31}},"73":{"start":{"line":434,"column":8},"end":{"line":448,"column":9}},"74":{"start":{"line":435,"column":12},"end":{"line":435,"column":83}},"75":{"start":{"line":437,"column":12},"end":{"line":439,"column":13}},"76":{"start":{"line":438,"column":16},"end":{"line":438,"column":90}},"77":{"start":{"line":443,"column":12},"end":{"line":443,"column":40},"skip":true},"78":{"start":{"line":445,"column":12},"end":{"line":447,"column":13}},"79":{"start":{"line":446,"column":16},"end":{"line":446,"column":79}},"80":{"start":{"line":451,"column":4},"end":{"line":453,"column":5}},"81":{"start":{"line":452,"column":8},"end":{"line":452,"column":72}},"82":{"start":{"line":455,"column":4},"end":{"line":455,"column":18}},"83":{"start":{"line":457,"column":4},"end":{"line":459,"column":7}},"84":{"start":{"line":458,"column":8},"end":{"line":458,"column":16}},"85":{"start":{"line":461,"column":4},"end":{"line":461,"column":54}},"86":{"start":{"line":462,"column":4},"end":{"line":469,"column":5}},"87":{"start":{"line":463,"column":8},"end":{"line":465,"column":9}},"88":{"start":{"line":464,"column":12},"end":{"line":464,"column":44}},"89":{"start":{"line":466,"column":8},"end":{"line":468,"column":9}},"90":{"start":{"line":467,"column":12},"end":{"line":467,"column":44}},"91":{"start":{"line":471,"column":4},"end":{"line":471,"column":23}},"92":{"start":{"line":473,"column":4},"end":{"line":484,"column":28}},"93":{"start":{"line":486,"column":4},"end":{"line":488,"column":17}},"94":{"start":{"line":487,"column":12},"end":{"line":487,"column":66}},"95":{"start":{"line":490,"column":4},"end":{"line":496,"column":5}},"96":{"start":{"line":491,"column":8},"end":{"line":491,"column":30}},"97":{"start":{"line":492,"column":8},"end":{"line":494,"column":9}},"98":{"start":{"line":493,"column":12},"end":{"line":493,"column":55}},"99":{"start":{"line":495,"column":8},"end":{"line":495,"column":39}},"100":{"start":{"line":498,"column":4},"end":{"line":498,"column":16}},"101":{"start":{"line":530,"column":0},"end":{"line":536,"column":2}},"102":{"start":{"line":538,"column":0},"end":{"line":538,"column":30}}},"branchMap":{"1":{"line":35,"type":"cond-expr","locations":[{"start":{"line":35,"column":21},"end":{"line":35,"column":38}},{"start":{"line":35,"column":41},"end":{"line":35,"column":43}}]},"2":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":77,"column":12},"skip":true},{"start":{"line":77,"column":12},"end":{"line":77,"column":12},"skip":true}]},"3":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]},"4":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":12}},{"start":{"line":84,"column":12},"end":{"line":84,"column":12}}]},"5":{"line":86,"type":"cond-expr","locations":[{"start":{"line":86,"column":37},"end":{"line":86,"column":61}},{"start":{"line":86,"column":65},"end":{"line":86,"column":72}}]},"6":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":16},"end":{"line":88,"column":16}},{"start":{"line":88,"column":16},"end":{"line":88,"column":16}}]},"7":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":20}},{"start":{"line":89,"column":20},"end":{"line":89,"column":20}}]},"8":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":24},"end":{"line":89,"column":39}},{"start":{"line":89,"column":43},"end":{"line":89,"column":58}}]},"9":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":24},"end":{"line":90,"column":24}},{"start":{"line":90,"column":24},"end":{"line":90,"column":24}}]},"10":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":12}},{"start":{"line":98,"column":12},"end":{"line":98,"column":12}}]},"11":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":100,"column":16}},{"start":{"line":100,"column":16},"end":{"line":100,"column":16}}]},"12":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":20},"end":{"line":100,"column":32}},{"start":{"line":100,"column":36},"end":{"line":100,"column":48}}]},"13":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":20},"end":{"line":101,"column":20}},{"start":{"line":101,"column":20},"end":{"line":101,"column":20}}]},"14":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":16},"end":{"line":106,"column":16}},{"start":{"line":106,"column":16},"end":{"line":106,"column":16}}]},"15":{"line":107,"type":"cond-expr","locations":[{"start":{"line":107,"column":64},"end":{"line":107,"column":85}},{"start":{"line":107,"column":89},"end":{"line":107,"column":93}}]},"16":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":20},"end":{"line":108,"column":20}},{"start":{"line":108,"column":20},"end":{"line":108,"column":20}}]},"17":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":4},"end":{"line":185,"column":4}},{"start":{"line":185,"column":4},"end":{"line":185,"column":4}}]},"18":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":4},"end":{"line":188,"column":4}},{"start":{"line":188,"column":4},"end":{"line":188,"column":4}}]},"19":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":8},"end":{"line":188,"column":16}},{"start":{"line":188,"column":20},"end":{"line":188,"column":47}}]},"20":{"line":191,"type":"cond-expr","locations":[{"start":{"line":191,"column":38},"end":{"line":191,"column":40}},{"start":{"line":191,"column":43},"end":{"line":191,"column":47}}]},"21":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":4},"end":{"line":300,"column":4}},{"start":{"line":300,"column":4},"end":{"line":300,"column":4}}]},"22":{"line":300,"type":"binary-expr","locations":[{"start":{"line":300,"column":8},"end":{"line":300,"column":12}},{"start":{"line":300,"column":16},"end":{"line":300,"column":39}}]},"23":{"line":304,"type":"cond-expr","locations":[{"start":{"line":304,"column":38},"end":{"line":304,"column":40}},{"start":{"line":304,"column":43},"end":{"line":304,"column":47}}]},"24":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":12},"end":{"line":313,"column":12}},{"start":{"line":313,"column":12},"end":{"line":313,"column":12}}]},"25":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12}},{"start":{"line":316,"column":12},"end":{"line":316,"column":12}}]},"26":{"line":316,"type":"binary-expr","locations":[{"start":{"line":316,"column":16},"end":{"line":316,"column":21}},{"start":{"line":316,"column":25},"end":{"line":316,"column":50}}]},"27":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":16},"end":{"line":322,"column":16}},{"start":{"line":322,"column":16},"end":{"line":322,"column":16}}]},"28":{"line":430,"type":"if","locations":[{"start":{"line":430,"column":4},"end":{"line":430,"column":4}},{"start":{"line":430,"column":4},"end":{"line":430,"column":4}}]},"29":{"line":431,"type":"cond-expr","locations":[{"start":{"line":431,"column":55},"end":{"line":431,"column":61}},{"start":{"line":431,"column":64},"end":{"line":431,"column":107}}]},"30":{"line":434,"type":"if","locations":[{"start":{"line":434,"column":8},"end":{"line":434,"column":8}},{"start":{"line":434,"column":8},"end":{"line":434,"column":8}}]},"31":{"line":437,"type":"if","locations":[{"start":{"line":437,"column":12},"end":{"line":437,"column":12}},{"start":{"line":437,"column":12},"end":{"line":437,"column":12},"skip":true}]},"32":{"line":445,"type":"if","locations":[{"start":{"line":445,"column":12},"end":{"line":445,"column":12}},{"start":{"line":445,"column":12},"end":{"line":445,"column":12}}]},"33":{"line":445,"type":"binary-expr","locations":[{"start":{"line":445,"column":16},"end":{"line":445,"column":23}},{"start":{"line":445,"column":27},"end":{"line":445,"column":53}}]},"34":{"line":451,"type":"if","locations":[{"start":{"line":451,"column":4},"end":{"line":451,"column":4}},{"start":{"line":451,"column":4},"end":{"line":451,"column":4}}]},"35":{"line":462,"type":"if","locations":[{"start":{"line":462,"column":4},"end":{"line":462,"column":4}},{"start":{"line":462,"column":4},"end":{"line":462,"column":4}}]},"36":{"line":462,"type":"binary-expr","locations":[{"start":{"line":462,"column":8},"end":{"line":462,"column":21}},{"start":{"line":462,"column":25},"end":{"line":462,"column":58}}]},"37":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":8},"end":{"line":463,"column":8}},{"start":{"line":463,"column":8},"end":{"line":463,"column":8}}]},"38":{"line":466,"type":"if","locations":[{"start":{"line":466,"column":8},"end":{"line":466,"column":8}},{"start":{"line":466,"column":8},"end":{"line":466,"column":8}}]},"39":{"line":490,"type":"if","locations":[{"start":{"line":490,"column":4},"end":{"line":490,"column":4}},{"start":{"line":490,"column":4},"end":{"line":490,"column":4}}]},"40":{"line":492,"type":"if","locations":[{"start":{"line":492,"column":8},"end":{"line":492,"column":8}},{"start":{"line":492,"column":8},"end":{"line":492,"column":8}}]}},"code":["'use strict';","","var $npm = {","    fs: require('fs'),","    path: require('path'),","    utils: require('./'),","    package: require('../../package.json')","};","","var EOL = require('os').EOL;","","/**"," * @method utils.camelize"," * @description"," * Camelizes a text string."," *"," * Case-changing characters include:"," * - _hyphen_"," * - _underscore_"," * - _period_"," * - _space_"," *"," * @param {string} text"," * Input text string."," *"," * @returns {string}"," * Camelized text string."," *"," * @see"," * {@link utils.camelizeVar camelizeVar}"," *"," */","function camelize(text) {","    text = text.replace(/[\\-_\\s\\.]+(.)?/g, (match, chr) => {","        return chr ? chr.toUpperCase() : '';","    });","    return text.substr(0, 1).toLowerCase() + text.substr(1);","}","","/**"," * @method utils.camelizeVar"," * @description"," * Camelizes a text string, while making it compliant with JavaScript variable names:"," * - contains symbols `a-z`, `A-Z`, `0-9`, `_` and `$`"," * - cannot have leading digits"," *"," * First, it removes all symbols that do not meet the above criteria, except for _hyphen_, _period_ and _space_,"," * and then it forwards into {@link utils.camelize camelize}."," *"," * @param {string} text"," * Input text string."," *"," * If it doesn't contain any symbols to make up a valid variable name, the result will be an empty string."," *"," * @returns {string}"," * Camelized text string that can be used as an open property name."," *"," * @see"," * {@link utils.camelize camelize}"," *"," */","function camelizeVar(text) {","    text = text.replace(/[^a-zA-Z0-9\\$_\\-\\s\\.]/g, '').replace(/^[0-9_\\-\\s\\.]+/, '');","    return camelize(text);","}","","function _enumSql(dir, options, cb, namePath) {","    var tree = {};","    $npm.fs.readdirSync(dir).forEach(file => {","        var stat, fullPath = $npm.path.join(dir, file);","        try {","            stat = $npm.fs.statSync(fullPath);","        } catch (e) {","            // while it is very easy to test manually, it is very difficult to test for","            // access-denied errors automatically; therefore excluding from the coverage:","            // istanbul ignore next","            if (options.ignoreErrors) {","                return; // on to the next file/folder;","            }","            // istanbul ignore next","            throw e;","        }","        if (stat.isDirectory()) {","            if (options.recursive) {","                var dirName = camelizeVar(file);","                var np = namePath ? (namePath + '.' + dirName) : dirName;","                var t = _enumSql(fullPath, options, cb, np);","                if (Object.keys(t).length) {","                    if (!dirName.length || dirName in tree) {","                        if (!options.ignoreErrors) {","                            throw new Error('Empty or duplicate camelized folder name: ' + fullPath);","                        }","                    }","                    tree[dirName] = t;","                }","            }","        } else {","            if ($npm.path.extname(file).toLowerCase() === '.sql') {","                var name = camelizeVar(file.replace(/\\.[^/.]+$/, ''));","                if (!name.length || name in tree) {","                    if (!options.ignoreErrors) {","                        throw new Error('Empty or duplicate camelized file name: ' + fullPath);","                    }","                }","                tree[name] = fullPath;","                if (cb) {","                    var result = cb(fullPath, name, namePath ? (namePath + '.' + name) : name);","                    if (result !== undefined) {","                        tree[name] = result;","                    }","                }","            }","        }","    });","    return tree;","}","","/**"," * @method utils.enumSql"," * @description"," * Synchronously enumerates all SQL files (within a given directory) into a camelized SQL tree."," *"," * All property names within the tree are camelized via {@link utils.camelizeVar camelizeVar},"," * so they can be used in the code directly, as open property names."," *"," * @param {string} dir"," * Directory path where SQL files are located, either absolute or relative to the current directory."," *"," * SQL files are identified by using `.sql` extension (case-insensitive)."," *"," * @param {object} [options]"," * Search options."," *"," * @param {boolean} [options.recursive=false]"," * Include sub-directories into the search."," *"," * Sub-directories without SQL files will be skipped from the result."," *"," * @param {boolean} [options.ignoreErrors=false]"," * Ignore the following types of errors:"," * - access errors, when there is no read access to a file or folder"," * - empty or duplicate camelized property names"," *"," * This flag does not affect errors related to invalid input parameters, or if you pass in a"," * non-existing directory."," *"," * @param {function} [cb]"," * A callback function that takes three arguments:"," * - `file` - SQL file path, relative or absolute, according to how you specified the search directory"," * - `name` - name of the property that represents the SQL file"," * - `path` - property resolution path (full property name)"," *"," * If the function returns anything other than `undefined`, it overrides the corresponding property value in the tree."," *"," * @returns {object}"," * Camelized SQL tree object, with each value being an SQL file path (unless changed via the callback)."," *"," * @see"," * {@link utils.objectToCode objectToCode},"," * {@link utils.buildSqlModule buildSqlModule}"," *"," * @example"," *"," * // simple SQL tree generation for further processing:"," * var tree = pgp.utils.enumSql('../sql', {recursive: true});"," *"," * @example"," *"," * // generating an SQL tree for dynamic use of names:"," * var sql = pgp.utils.enumSql(__dirname, {recursive: true}, file=> {"," *     return new pgp.QueryFile(file, {minify: true});"," * });"," *"," * @example"," *"," * var path = require('path');"," *"," * // replacing each relative path in the tree with a full one:"," * var tree = pgp.utils.enumSql('../sql', {recursive: true}, file=> {"," *     return path.join(__dirname, file);"," * });"," *"," */","function enumSql(dir, options, cb) {","    if (!$npm.utils.isText(dir)) {","        throw new TypeError('Parameter \\'dir\\' must be a non-empty text string.');","    }","    if (!options || typeof options !== 'object') {","        options = {};","    }","    cb = (typeof cb === 'function') ? cb : null;","    return _enumSql(dir, options, cb, '');","}","","/**"," *"," * @method utils.objectToCode"," * @description"," * Translates an object tree into a well-formatted JSON code string."," *"," * @param {object} obj"," * Source tree object."," *"," * @param {function} [cb]"," * A callback function to override property values for the code."," *"," * It takes three arguments:"," *"," * - `value` - property value"," * - `name` - property name"," * - `obj` - current object (which contains the property)"," *"," * The returned value is used as is for the property value in the generated code."," *"," * @returns {string}"," *"," * @see"," * {@link utils.enumSql enumSql},"," * {@link utils.buildSqlModule buildSqlModule}"," *"," * @example"," *"," * // Generating code for a simple object"," *"," * var tree = {one: 1, two: {item: 'abc'}};"," *"," * var code = pgp.utils.objectToCode(tree);"," *"," * console.log(code);"," * //=>"," * // {"," * //     one: 1,"," * //     two: {"," * //         item: \"abc\""," * //     }"," * // }"," *"," * @example"," *"," * // Generating a Node.js module with an SQL tree"," *"," * var fs = require('fs');"," * var EOL = require('os').EOL;"," *"," * // generating an SQL tree from the folder:"," * var tree = pgp.utils.enumSql('./sql', {recursive: true});"," *"," * // generating the module's code:"," * var code = \"var load = require('./loadSql');\" + EOL + EOL + \"module.exports = \" +"," *         pgp.utils.objectToCode(tree, value => {"," *             return 'load(' + JSON.stringify(value) + ')';"," *         }) + ';';"," *"," * // saving the module:"," * fs.writeFileSync('sql.js', code);"," *"," * @example"," *"," * // generated code example (file sql.js)"," *"," * var load = require('./loadSql');"," *"," * module.exports = {"," *     events: {"," *         add: load(\"../sql/events/add.sql\"),"," *         delete: load(\"../sql/events/delete.sql\"),"," *         find: load(\"../sql/events/find.sql\"),"," *         update: load(\"../sql/events/update.sql\")"," *     },"," *     products: {"," *         add: load(\"../sql/products/add.sql\"),"," *         delete: load(\"../sql/products/delete.sql\"),"," *         find: load(\"../sql/products/find.sql\"),"," *         update: load(\"../sql/products/update.sql\")"," *     },"," *     users: {"," *         add: load(\"../sql/users/add.sql\"),"," *         delete: load(\"../sql/users/delete.sql\"),"," *         find: load(\"../sql/users/find.sql\"),"," *         update: load(\"../sql/users/update.sql\")"," *     },"," *     create: load(\"../sql/create.sql\"),"," *     init: load(\"../sql/init.sql\"),"," *     drop: load(\"../sql/drop.sql\")"," *};"," *"," * @example"," *"," * // loadSql.js module example"," *"," * var QueryFile = require('pg-promise').QueryFile;"," *"," * module.exports = file => {"," *     return new QueryFile(file, {minify: true});"," * };"," *"," */","function objectToCode(obj, cb) {","","    if (!obj || typeof obj !== 'object') {","        throw new TypeError('Parameter \\'obj\\' must be a non-null object.');","    }","","    cb = (typeof cb === 'function') ? cb : null;","","    return '{' + generate(obj, 1) + EOL + '}';","","    function generate(obj, level) {","        var code = '', gap = $npm.utils.messageGap(level);","        var idx = 0;","        for (var prop in obj) {","            var value = obj[prop];","            if (idx) {","                code += ',';","            }","            if (value && typeof value === 'object') {","                code += EOL + gap + prop + ': {';","                code += generate(value, level + 1);","                code += EOL + gap + '}';","            } else {","                code += EOL + gap + prop + ': ';","                if (cb) {","                    code += cb(value, prop, obj);","                } else {","                    code += JSON.stringify(value);","                }","            }","            idx++;","        }","        return code;","    }","}","","/**"," * @method utils.buildSqlModule"," * @description"," * Synchronously generates a Node.js module with a camelized SQL tree, based on a configuration object that has the format shown below."," *"," * This method is normally to be used on a grunt/gulp watch that triggers when the file structure changes in your SQL directory,"," * although it can be invoked manually as well."," *"," * ```js"," * {"," *    // Required Properties:"," *    "," *    \"dir\" // {string}: relative or absolute directory where SQL files are located (see API for method enumSql, parameter `dir`)"," *"," *    // Optional Properties:"," *    "," *    \"recursive\" // {boolean}: search for sql files recursively (see API for method enumSql, option `recursive`)"," *"," *    \"ignoreErrors\" // {boolean}: ignore common errors (see API for method enumSql, option `ignoreErrors`)"," *"," *    \"output\" // {string}: relative or absolute destination file path; when not specified, no file is created,"," *             // but you still can use the code string that's always returned by the method."," *     "," *    \"module\": {"," *        \"path\" // {string}: relative path to a module exporting a function which takes a file path"," *               // and returns a proper value (typically, a new QueryFile object); by default, it uses `./loadSql`."," *"," *        \"name\" // {string}: local variable name for the SQL-loading module; by default, it uses `load`."," *    }"," * }"," * ```"," *"," * @param {object|string} [config]"," * Configuration parameter for generating the code."," *"," * - When it is a non-null object, it is assumed to be a configuration object (see the format above)."," * - When it is a text string - it is the relative path to either a JSON file that contains the configuration object,"," *   or a Node.js module that exports one. The path is relative to the application's entry point file."," * - When `config` isn't specified, the method will try to locate the default `sql-config.json` file in the directory of your"," *   application's entry point file, and if not found - throw {@link external:Error Error} = `Default SQL configuration file not found`."," *"," * @returns {string}"," * Generated code."," *"," * @see"," * {@link utils.enumSql enumSql},"," * {@link utils.objectToCode objectToCode}"," *"," * @example"," *"," * // generate SQL module automatically, from sql-config.json in the module's start-up folder:"," *"," * pgp.utils.buildSqlModule();"," *"," * // see generated file below:"," *"," * @example"," *"," * /////////////////////////////////////////////////////////////////////////"," * // This file was automatically generated by pg-promise v.4.3.8"," * //"," * // Generated on: 6/2/2016, at 2:15:23 PM"," * // Total files: 15"," * //"," * // API: http://vitaly-t.github.io/pg-promise/utils.html#.buildSqlModule"," * /////////////////////////////////////////////////////////////////////////"," *"," * var load = require('./loadSql');"," *"," * module.exports = {"," *     events: {"," *         add: load(\"../sql/events/add.sql\"),"," *         delete: load(\"../sql/events/delete.sql\"),"," *         find: load(\"../sql/events/find.sql\"),"," *         update: load(\"../sql/events/update.sql\")"," *     },"," *     products: {"," *         add: load(\"../sql/products/add.sql\"),"," *         delete: load(\"../sql/products/delete.sql\"),"," *         find: load(\"../sql/products/find.sql\"),"," *         update: load(\"../sql/products/update.sql\")"," *     },"," *     users: {"," *         add: load(\"../sql/users/add.sql\"),"," *         delete: load(\"../sql/users/delete.sql\"),"," *         find: load(\"../sql/users/find.sql\"),"," *         update: load(\"../sql/users/update.sql\")"," *     },"," *     create: load(\"../sql/create.sql\"),"," *     init: load(\"../sql/init.sql\"),"," *     drop: load(\"../sql/drop.sql\")"," *};"," *"," */","function buildSqlModule(config) {","","    if ($npm.utils.isText(config)) {","        var path = $npm.utils.isPathAbsolute(config) ? config : $npm.path.join($npm.utils.startDir, config);","        config = require(path);","    } else {","        if ($npm.utils.isNull(config)) {","            var defConfig = $npm.path.join($npm.utils.startDir, 'sql-config.json');","            // istanbul ignore else;","            if (!$npm.fs.existsSync(defConfig)) {","                throw new Error('Default SQL configuration file not found: ' + defConfig);","            }","            // cannot test this automatically, because it requires that file 'sql-config.json'","            // resides within the Jasmine folder, since it is the client during the test.","            // istanbul ignore next;","            config = require(defConfig);","        } else {","            if (!config || typeof config !== 'object') {","                throw new TypeError('Invalid parameter \\'config\\' specified.');","            }","        }","    }","","    if (!$npm.utils.isText(config.dir)) {","        throw new Error('Property \\'dir\\' must be a non-empty string.');","    }","","    var total = 0;","","    var tree = enumSql(config.dir, {recursive: config.recursive, ignoreErrors: config.ignoreErrors}, () => {","        total++;","    });","","    var modulePath = './loadSql', moduleName = 'load';","    if (config.module && typeof config.module === 'object') {","        if ($npm.utils.isText(config.module.path)) {","            modulePath = config.module.path;","        }","        if ($npm.utils.isText(config.module.name)) {","            moduleName = config.module.name;","        }","    }","","    var d = new Date();","","    var header =","        '/////////////////////////////////////////////////////////////////////////' + EOL +","        '// This file was automatically generated by pg-promise v.' + $npm.package.version + EOL +","        '//' + EOL +","        '// Generated on: ' + d.toLocaleDateString() + ', at ' + d.toLocaleTimeString() + EOL +","        '// Total files: ' + total + EOL +","        '//' + EOL +","        '// API: http://vitaly-t.github.io/pg-promise/utils.html#.buildSqlModule' + EOL +","        '/////////////////////////////////////////////////////////////////////////' + EOL + EOL +","        '\\'use strict\\';' + EOL + EOL +","        'var ' + moduleName + ' = require(\\'' + modulePath + '\\');' + EOL + EOL +","        'module.exports = ';","","    var code = header + objectToCode(tree, value => {","            return moduleName + '(' + JSON.stringify(value) + ')';","        }) + ';';","","    if ($npm.utils.isText(config.output)) {","        var p = config.output;","        if (!$npm.utils.isPathAbsolute(p)) {","            p = $npm.path.join($npm.utils.startDir, p);","        }","        $npm.fs.writeFileSync(p, code);","    }","","    return code;","}","","","/**"," * @namespace utils"," *"," * @description"," * Namespace for general-purpose static functions, available as `pgp.utils`, before and after initializing the library."," *"," * Its main purpose is to simplify developing projects with either large or dynamic number of SQL files."," *"," * See also:"," * - [Automatic SQL Trees](https://github.com/vitaly-t/pg-promise/issues/153)"," * - [SQL Files](https://github.com/vitaly-t/pg-promise/wiki/SQL-Files)"," *"," * @property {function} camelize"," * {@link utils.camelize camelize} - camelizes a text string"," *"," * @property {function} camelizeVar"," * {@link utils.camelizeVar camelizeVar} - camelizes a text string as a variable"," *"," * @property {function} enumSql"," * {@link utils.enumSql enumSql} - enumerates SQL files in a directory"," *"," * @property {function} objectToCode"," * {@link utils.objectToCode objectToCode} - generates code from an object"," *"," * @property {function} buildSqlModule"," * {@link utils.buildSqlModule buildSqlModule} - generates a complete Node.js module"," *"," */","module.exports = {","    camelize: camelize,","    camelizeVar: camelizeVar,","    enumSql: enumSql,","    objectToCode: objectToCode,","    buildSqlModule: buildSqlModule","};","","Object.freeze(module.exports);",""],"l":{"3":1,"10":1,"33":1,"34":0,"35":0,"37":0,"62":1,"63":0,"64":0,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"77":1,"78":1,"81":1,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"94":0,"98":0,"99":0,"100":0,"101":0,"102":0,"105":0,"106":0,"107":0,"108":0,"109":0,"115":0,"184":1,"185":0,"186":0,"188":0,"189":0,"191":0,"192":0,"298":1,"300":0,"301":0,"304":0,"306":0,"308":1,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"316":0,"317":0,"318":0,"319":0,"321":0,"322":0,"323":0,"325":0,"328":0,"330":0,"428":1,"430":0,"431":0,"432":0,"434":0,"435":0,"437":0,"438":0,"443":1,"445":0,"446":0,"451":0,"452":0,"455":0,"457":0,"458":0,"461":0,"462":0,"463":0,"464":0,"466":0,"467":0,"471":0,"473":0,"486":0,"487":0,"490":0,"491":0,"492":0,"493":0,"495":0,"498":0,"530":1,"538":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/txMode.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/txMode.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"TransactionMode","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":56}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":29,"column":2}},"2":{"start":{"line":31,"column":0},"end":{"line":31,"column":30}},"3":{"start":{"line":96,"column":0},"end":{"line":154,"column":1}},"4":{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},"5":{"start":{"line":99,"column":8},"end":{"line":99,"column":66}},"6":{"start":{"line":102,"column":4},"end":{"line":106,"column":5}},"7":{"start":{"line":103,"column":8},"end":{"line":103,"column":36}},"8":{"start":{"line":104,"column":8},"end":{"line":104,"column":40}},"9":{"start":{"line":105,"column":8},"end":{"line":105,"column":34}},"10":{"start":{"line":108,"column":4},"end":{"line":108,"column":69}},"11":{"start":{"line":110,"column":4},"end":{"line":110,"column":52}},"12":{"start":{"line":112,"column":4},"end":{"line":115,"column":5}},"13":{"start":{"line":113,"column":8},"end":{"line":113,"column":75}},"14":{"start":{"line":114,"column":8},"end":{"line":114,"column":57}},"15":{"start":{"line":117,"column":4},"end":{"line":123,"column":5}},"16":{"start":{"line":118,"column":8},"end":{"line":118,"column":33}},"17":{"start":{"line":120,"column":8},"end":{"line":122,"column":9}},"18":{"start":{"line":121,"column":12},"end":{"line":121,"column":38}},"19":{"start":{"line":127,"column":4},"end":{"line":135,"column":5}},"20":{"start":{"line":128,"column":8},"end":{"line":134,"column":9}},"21":{"start":{"line":129,"column":12},"end":{"line":129,"column":42}},"22":{"start":{"line":131,"column":12},"end":{"line":133,"column":13}},"23":{"start":{"line":132,"column":16},"end":{"line":132,"column":50}},"24":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"25":{"start":{"line":138,"column":8},"end":{"line":138,"column":29}},"26":{"start":{"line":141,"column":4},"end":{"line":143,"column":5}},"27":{"start":{"line":142,"column":8},"end":{"line":142,"column":34}},"28":{"start":{"line":145,"column":4},"end":{"line":147,"column":5}},"29":{"start":{"line":146,"column":8},"end":{"line":146,"column":38}},"30":{"start":{"line":149,"column":4},"end":{"line":149,"column":35}},"31":{"start":{"line":151,"column":4},"end":{"line":153,"column":6}},"32":{"start":{"line":152,"column":8},"end":{"line":152,"column":38}},"33":{"start":{"line":174,"column":0},"end":{"line":177,"column":2}},"34":{"start":{"line":179,"column":0},"end":{"line":179,"column":30}}},"branchMap":{"1":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":98,"column":4}},{"start":{"line":98,"column":4},"end":{"line":98,"column":4}}]},"2":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"3":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":15}},{"start":{"line":102,"column":19},"end":{"line":102,"column":46}}]},"4":{"line":110,"type":"cond-expr","locations":[{"start":{"line":110,"column":30},"end":{"line":110,"column":47}},{"start":{"line":110,"column":50},"end":{"line":110,"column":51}}]},"5":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"6":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":8},"end":{"line":112,"column":19}},{"start":{"line":112,"column":23},"end":{"line":112,"column":34}}]},"7":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":117,"column":4}},{"start":{"line":117,"column":4},"end":{"line":117,"column":4}}]},"8":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":8},"end":{"line":120,"column":8}},{"start":{"line":120,"column":8},"end":{"line":120,"column":8}}]},"9":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]},"10":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":47}},{"start":{"line":127,"column":51},"end":{"line":127,"column":59}}]},"11":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":128,"column":8}},{"start":{"line":128,"column":8},"end":{"line":128,"column":8}}]},"12":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":12},"end":{"line":131,"column":12}},{"start":{"line":131,"column":12},"end":{"line":131,"column":12}}]},"13":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":4},"end":{"line":137,"column":4}},{"start":{"line":137,"column":4},"end":{"line":137,"column":4}}]},"14":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":4}},{"start":{"line":141,"column":4},"end":{"line":141,"column":4}}]},"15":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"16":{"line":152,"type":"cond-expr","locations":[{"start":{"line":152,"column":21},"end":{"line":152,"column":29}},{"start":{"line":152,"column":32},"end":{"line":152,"column":37}}]}},"code":["'use strict';","","/**"," * @enum {number}"," * @alias txMode.isolationLevel"," * @readonly"," * @summary Transaction Isolation Level."," * @description"," * The type is available from the {@link txMode} namespace."," *"," * @see $[Transaction Isolation]"," */","var isolationLevel = {","    /** Isolation level not specified. */","    none: 0,","","    /** ISOLATION LEVEL SERIALIZABLE */","    serializable: 1,","","    /** ISOLATION LEVEL REPEATABLE READ */","    repeatableRead: 2,","","    /** ISOLATION LEVEL READ COMMITTED */","    readCommitted: 3","","    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html","    // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.","    // => skipping `READ UNCOMMITTED`.","};","","Object.freeze(isolationLevel);","","/**"," * @class txMode.TransactionMode"," * @description"," * **Alternative Syntax:** `TransactionMode({tiLevel, readOnly, deferrable})` &#8658; {@link TransactionMode}"," *"," * Constructs a complete transaction-opening command, based on the parameters:"," *  - isolation level"," *  - access mode"," *  - deferrable mode"," *"," * The type is available from the {@link txMode} namespace."," *"," * @param {txMode.isolationLevel|Object} [tiLevel]"," * Transaction Isolation Level, or an object with parameters, if the alternative"," * syntax is used."," *"," * @param {boolean} [readOnly]"," * Sets transaction access mode based on the read-only flag:"," *  - `undefined` - access mode not specified (default)"," *  - `true` - access mode is set to `READ ONLY`"," *  - `false` - access mode is set to `READ WRITE`"," *"," * @param {boolean} [deferrable]"," * Sets transaction deferrable mode based on the boolean value:"," *  - `undefined` - deferrable mode not specified (default)"," *  - `true` - mode is set to `DEFERRABLE`"," *  - `false` - mode is set to `NOT DEFERRABLE`"," *"," * It is used only when `tiLevel`=`isolationLevel.serializable`"," * and `readOnly`=`true`, or else it is ignored."," *"," * @returns {txMode.TransactionMode}"," *"," * @see $[BEGIN], {@link txMode.isolationLevel}"," *"," * @example"," *"," * var TransactionMode = pgp.txMode.TransactionMode;"," * var isolationLevel = pgp.txMode.isolationLevel;"," *"," * // Create a reusable transaction mode (serializable + read-only + deferrable):"," * var tmSRD = new TransactionMode({"," *     tiLevel: isolationLevel.serializable,"," *     readOnly: true,"," *     deferrable: true"," * });"," *"," * function myTransaction() {"," *     return this.query(\"SELECT * FROM table\");"," * }"," *"," * myTransaction.txMode = tmSRD; // assign transaction mode;"," *"," * db.tx(myTransaction)"," *     .then(() => {"," *         // success;"," *     });"," *"," * // Instead of the default BEGIN, such transaction will initiate with:"," *"," * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE"," *"," */","function TransactionMode(tiLevel, readOnly, deferrable) {","","    if (!(this instanceof TransactionMode)) {","        return new TransactionMode(tiLevel, readOnly, deferrable);","    }","","    if (tiLevel && typeof tiLevel === 'object') {","        readOnly = tiLevel.readOnly;","        deferrable = tiLevel.deferrable;","        tiLevel = tiLevel.tiLevel;","    }","","    var level, accessMode, deferrableMode, capBegin, begin = 'begin';","","    tiLevel = (tiLevel > 0) ? parseInt(tiLevel) : 0;","","    if (tiLevel > 0 && tiLevel < 4) {","        var values = ['serializable', 'repeatable read', 'read committed'];","        level = 'isolation level ' + values[tiLevel - 1];","    }","","    if (readOnly) {","        accessMode = 'read only';","    } else {","        if (readOnly !== undefined) {","            accessMode = 'read write';","        }","    }","","    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html","    // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY","    if (tiLevel === isolationLevel.serializable && readOnly) {","        if (deferrable) {","            deferrableMode = 'deferrable';","        } else {","            if (deferrable !== undefined) {","                deferrableMode = 'not deferrable';","            }","        }","    }","","    if (level) {","        begin += ' ' + level;","    }","","    if (accessMode) {","        begin += ' ' + accessMode;","    }","","    if (deferrableMode) {","        begin += ' ' + deferrableMode;","    }","","    capBegin = begin.toUpperCase();","","    this.begin = cap => {","        return cap ? capBegin : begin;","    };","}","","/**"," * @namespace txMode"," * @description"," * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library."," *"," * Extends the default `BEGIN` with Transaction Mode parameters:"," *  - isolation level"," *  - access mode"," *  - deferrable mode"," *"," * @property {function} TransactionMode"," * {@link txMode.TransactionMode TransactionMode} class constructor."," *"," * @property {txMode.isolationLevel} isolationLevel"," * Transaction Isolation Level enumerator"," *"," * @see $[BEGIN]"," */","module.exports = {","    isolationLevel: isolationLevel,","    TransactionMode: TransactionMode","};","","Object.freeze(module.exports);",""],"l":{"13":1,"31":1,"96":1,"98":0,"99":0,"102":0,"103":0,"104":0,"105":0,"108":0,"110":0,"112":0,"113":0,"114":0,"117":0,"118":0,"120":0,"121":0,"127":0,"128":0,"129":0,"131":0,"132":0,"137":0,"138":0,"141":0,"142":0,"145":0,"146":0,"149":0,"151":0,"152":0,"174":1,"179":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/types/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/types/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"ExternalQuery","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":25}},"skip":true},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":34},"end":{"line":13,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":10,"column":0},"end":{"line":11,"column":1},"skip":true},"3":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":27}},"5":{"start":{"line":17,"column":0},"end":{"line":17,"column":44}},"6":{"start":{"line":18,"column":0},"end":{"line":18,"column":44}},"7":{"start":{"line":20,"column":0},"end":{"line":24,"column":2}}},"branchMap":{},"code":["'use strict';","","var $npm = {","    utils: require('../utils'),","    PS: require('./prepared'),","    PQ: require('./parameterized')","};","","// istanbul ignore next;","function ExternalQuery() {","}","","ExternalQuery.prototype.inspect = function () {","    return this.toString();","};","","$npm.utils.inherits($npm.PS, ExternalQuery);","$npm.utils.inherits($npm.PQ, ExternalQuery);","","module.exports = {","    ExternalQuery: ExternalQuery,","    PreparedStatement: $npm.PS,","    ParameterizedQuery: $npm.PQ","};",""],"l":{"3":1,"10":1,"13":1,"14":0,"17":1,"18":1,"20":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/types/prepared.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/types/prepared.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"PreparedStatement","line":90,"loc":{"start":{"line":90,"column":0},"end":{"line":90,"column":47}}},"2":{"name":"setValues","line":103,"loc":{"start":{"line":103,"column":4},"end":{"line":103,"column":26}}},"3":{"name":"(anonymous_3)","line":334,"loc":{"start":{"line":334,"column":39},"end":{"line":334,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":8,"column":2}},"2":{"start":{"line":90,"column":0},"end":{"line":320,"column":1}},"3":{"start":{"line":91,"column":4},"end":{"line":93,"column":5}},"4":{"start":{"line":92,"column":8},"end":{"line":92,"column":57}},"5":{"start":{"line":95,"column":4},"end":{"line":101,"column":6}},"6":{"start":{"line":103,"column":4},"end":{"line":117,"column":5}},"7":{"start":{"line":104,"column":8},"end":{"line":116,"column":9}},"8":{"start":{"line":105,"column":12},"end":{"line":109,"column":13}},"9":{"start":{"line":106,"column":16},"end":{"line":106,"column":30}},"10":{"start":{"line":108,"column":16},"end":{"line":108,"column":33}},"11":{"start":{"line":111,"column":12},"end":{"line":115,"column":13}},"12":{"start":{"line":112,"column":16},"end":{"line":112,"column":33}},"13":{"start":{"line":114,"column":16},"end":{"line":114,"column":32}},"14":{"start":{"line":119,"column":4},"end":{"line":119,"column":22}},"15":{"start":{"line":128,"column":4},"end":{"line":136,"column":7}},"16":{"start":{"line":129,"column":19},"end":{"line":129,"column":29}},"17":{"start":{"line":131,"column":12},"end":{"line":134,"column":13}},"18":{"start":{"line":132,"column":16},"end":{"line":132,"column":35}},"19":{"start":{"line":133,"column":16},"end":{"line":133,"column":31}},"20":{"start":{"line":147,"column":4},"end":{"line":155,"column":7}},"21":{"start":{"line":148,"column":19},"end":{"line":148,"column":29}},"22":{"start":{"line":150,"column":12},"end":{"line":153,"column":13}},"23":{"start":{"line":151,"column":16},"end":{"line":151,"column":35}},"24":{"start":{"line":152,"column":16},"end":{"line":152,"column":31}},"25":{"start":{"line":168,"column":4},"end":{"line":173,"column":7}},"26":{"start":{"line":169,"column":19},"end":{"line":169,"column":28}},"27":{"start":{"line":171,"column":12},"end":{"line":171,"column":29}},"28":{"start":{"line":184,"column":4},"end":{"line":192,"column":7}},"29":{"start":{"line":185,"column":19},"end":{"line":185,"column":31}},"30":{"start":{"line":187,"column":12},"end":{"line":190,"column":13}},"31":{"start":{"line":188,"column":16},"end":{"line":188,"column":37}},"32":{"start":{"line":189,"column":16},"end":{"line":189,"column":31}},"33":{"start":{"line":203,"column":4},"end":{"line":211,"column":7}},"34":{"start":{"line":204,"column":19},"end":{"line":204,"column":32}},"35":{"start":{"line":206,"column":12},"end":{"line":209,"column":13}},"36":{"start":{"line":207,"column":16},"end":{"line":207,"column":38}},"37":{"start":{"line":208,"column":16},"end":{"line":208,"column":31}},"38":{"start":{"line":220,"column":4},"end":{"line":228,"column":7}},"39":{"start":{"line":221,"column":19},"end":{"line":221,"column":29}},"40":{"start":{"line":223,"column":12},"end":{"line":226,"column":13}},"41":{"start":{"line":224,"column":16},"end":{"line":224,"column":35}},"42":{"start":{"line":225,"column":16},"end":{"line":225,"column":31}},"43":{"start":{"line":239,"column":4},"end":{"line":241,"column":7}},"44":{"start":{"line":240,"column":19},"end":{"line":240,"column":31}},"45":{"start":{"line":243,"column":4},"end":{"line":250,"column":5}},"46":{"start":{"line":244,"column":8},"end":{"line":244,"column":31}},"47":{"start":{"line":245,"column":8},"end":{"line":245,"column":31}},"48":{"start":{"line":246,"column":8},"end":{"line":246,"column":35}},"49":{"start":{"line":247,"column":8},"end":{"line":247,"column":37}},"50":{"start":{"line":248,"column":8},"end":{"line":248,"column":31}},"51":{"start":{"line":249,"column":8},"end":{"line":249,"column":31}},"52":{"start":{"line":262,"column":4},"end":{"line":319,"column":6}},"53":{"start":{"line":264,"column":8},"end":{"line":264,"column":74}},"54":{"start":{"line":266,"column":8},"end":{"line":268,"column":9}},"55":{"start":{"line":267,"column":12},"end":{"line":267,"column":22}},"56":{"start":{"line":270,"column":8},"end":{"line":270,"column":44}},"57":{"start":{"line":271,"column":8},"end":{"line":273,"column":10}},"58":{"start":{"line":274,"column":8},"end":{"line":274,"column":23}},"59":{"start":{"line":275,"column":8},"end":{"line":275,"column":33}},"60":{"start":{"line":277,"column":8},"end":{"line":279,"column":9}},"61":{"start":{"line":278,"column":12},"end":{"line":278,"column":78}},"62":{"start":{"line":281,"column":8},"end":{"line":291,"column":9}},"63":{"start":{"line":282,"column":12},"end":{"line":282,"column":25}},"64":{"start":{"line":283,"column":12},"end":{"line":288,"column":13}},"65":{"start":{"line":284,"column":16},"end":{"line":284,"column":37}},"66":{"start":{"line":285,"column":16},"end":{"line":285,"column":38}},"67":{"start":{"line":287,"column":16},"end":{"line":287,"column":35}},"68":{"start":{"line":290,"column":12},"end":{"line":290,"column":33}},"69":{"start":{"line":292,"column":8},"end":{"line":294,"column":9}},"70":{"start":{"line":293,"column":12},"end":{"line":293,"column":78}},"71":{"start":{"line":296,"column":8},"end":{"line":298,"column":9}},"72":{"start":{"line":297,"column":12},"end":{"line":297,"column":31}},"73":{"start":{"line":300,"column":8},"end":{"line":302,"column":9}},"74":{"start":{"line":301,"column":12},"end":{"line":301,"column":37}},"75":{"start":{"line":304,"column":8},"end":{"line":306,"column":9}},"76":{"start":{"line":305,"column":12},"end":{"line":305,"column":39}},"77":{"start":{"line":308,"column":8},"end":{"line":310,"column":9}},"78":{"start":{"line":309,"column":12},"end":{"line":309,"column":33}},"79":{"start":{"line":312,"column":8},"end":{"line":314,"column":9}},"80":{"start":{"line":313,"column":12},"end":{"line":313,"column":88}},"81":{"start":{"line":316,"column":8},"end":{"line":316,"column":24}},"82":{"start":{"line":318,"column":8},"end":{"line":318,"column":18}},"83":{"start":{"line":334,"column":0},"end":{"line":362,"column":2}},"84":{"start":{"line":335,"column":4},"end":{"line":335,"column":44}},"85":{"start":{"line":336,"column":4},"end":{"line":336,"column":47}},"86":{"start":{"line":337,"column":4},"end":{"line":337,"column":26}},"87":{"start":{"line":338,"column":4},"end":{"line":341,"column":6}},"88":{"start":{"line":342,"column":4},"end":{"line":344,"column":5}},"89":{"start":{"line":343,"column":8},"end":{"line":343,"column":52}},"90":{"start":{"line":345,"column":4},"end":{"line":347,"column":5}},"91":{"start":{"line":346,"column":8},"end":{"line":346,"column":67}},"92":{"start":{"line":348,"column":4},"end":{"line":350,"column":5}},"93":{"start":{"line":349,"column":8},"end":{"line":349,"column":67}},"94":{"start":{"line":351,"column":4},"end":{"line":353,"column":5}},"95":{"start":{"line":352,"column":8},"end":{"line":352,"column":69}},"96":{"start":{"line":354,"column":4},"end":{"line":356,"column":5}},"97":{"start":{"line":355,"column":8},"end":{"line":355,"column":63}},"98":{"start":{"line":357,"column":4},"end":{"line":359,"column":5}},"99":{"start":{"line":358,"column":8},"end":{"line":358,"column":69}},"100":{"start":{"line":360,"column":4},"end":{"line":360,"column":51}},"101":{"start":{"line":361,"column":4},"end":{"line":361,"column":35}},"102":{"start":{"line":364,"column":0},"end":{"line":364,"column":35}}},"branchMap":{"1":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"2":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":8},"end":{"line":104,"column":8}},{"start":{"line":104,"column":8},"end":{"line":104,"column":8}}]},"3":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":12}},{"start":{"line":105,"column":12},"end":{"line":105,"column":12}}]},"4":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":12},"end":{"line":111,"column":12}},{"start":{"line":111,"column":12},"end":{"line":111,"column":12}}]},"5":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":12},"end":{"line":131,"column":12}},{"start":{"line":131,"column":12},"end":{"line":131,"column":12}}]},"6":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":12},"end":{"line":150,"column":12}},{"start":{"line":150,"column":12},"end":{"line":150,"column":12}}]},"7":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":187,"column":12}},{"start":{"line":187,"column":12},"end":{"line":187,"column":12}}]},"8":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":12},"end":{"line":206,"column":12}},{"start":{"line":206,"column":12},"end":{"line":206,"column":12}}]},"9":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":12},"end":{"line":223,"column":12}},{"start":{"line":223,"column":12},"end":{"line":223,"column":12}}]},"10":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":4},"end":{"line":243,"column":4}},{"start":{"line":243,"column":4},"end":{"line":243,"column":4}}]},"11":{"line":264,"type":"cond-expr","locations":[{"start":{"line":264,"column":56},"end":{"line":264,"column":66}},{"start":{"line":264,"column":69},"end":{"line":264,"column":73}}]},"12":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":8},"end":{"line":266,"column":8}},{"start":{"line":266,"column":8},"end":{"line":266,"column":8}}]},"13":{"line":266,"type":"binary-expr","locations":[{"start":{"line":266,"column":12},"end":{"line":266,"column":20}},{"start":{"line":266,"column":24},"end":{"line":266,"column":27}}]},"14":{"line":277,"type":"if","locations":[{"start":{"line":277,"column":8},"end":{"line":277,"column":8}},{"start":{"line":277,"column":8},"end":{"line":277,"column":8}}]},"15":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":8},"end":{"line":281,"column":8}},{"start":{"line":281,"column":8},"end":{"line":281,"column":8}}]},"16":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":12},"end":{"line":283,"column":12}},{"start":{"line":283,"column":12},"end":{"line":283,"column":12}}]},"17":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":8},"end":{"line":292,"column":8}},{"start":{"line":292,"column":8},"end":{"line":292,"column":8}}]},"18":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":8},"end":{"line":296,"column":8}},{"start":{"line":296,"column":8},"end":{"line":296,"column":8}}]},"19":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":8},"end":{"line":300,"column":8}},{"start":{"line":300,"column":8},"end":{"line":300,"column":8}}]},"20":{"line":304,"type":"if","locations":[{"start":{"line":304,"column":8},"end":{"line":304,"column":8}},{"start":{"line":304,"column":8},"end":{"line":304,"column":8}}]},"21":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":8},"end":{"line":308,"column":8}},{"start":{"line":308,"column":8},"end":{"line":308,"column":8}}]},"22":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":8},"end":{"line":312,"column":8}},{"start":{"line":312,"column":8},"end":{"line":312,"column":8}}]},"23":{"line":335,"type":"cond-expr","locations":[{"start":{"line":335,"column":24},"end":{"line":335,"column":39}},{"start":{"line":335,"column":42},"end":{"line":335,"column":43}}]},"24":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":4},"end":{"line":342,"column":4}},{"start":{"line":342,"column":4},"end":{"line":342,"column":4}}]},"25":{"line":345,"type":"if","locations":[{"start":{"line":345,"column":4},"end":{"line":345,"column":4}},{"start":{"line":345,"column":4},"end":{"line":345,"column":4}}]},"26":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":4},"end":{"line":348,"column":4}},{"start":{"line":348,"column":4},"end":{"line":348,"column":4}}]},"27":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":4},"end":{"line":351,"column":4}},{"start":{"line":351,"column":4},"end":{"line":351,"column":4}}]},"28":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":4},"end":{"line":354,"column":4}},{"start":{"line":354,"column":4},"end":{"line":354,"column":4}}]},"29":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":4},"end":{"line":357,"column":4}},{"start":{"line":357,"column":4},"end":{"line":357,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils'),","    errors: require('../errors'),","    QueryFile: require('../queryFile')","};","","/**"," * @constructor PreparedStatement"," * @description"," * **Alternative Syntax:** `PreparedStatement({name, text, values, ...})` &#8658; {@link PreparedStatement}"," *"," * Constructs a new $[Prepared Statement] object."," *"," * The alternative syntax supports advanced properties {@link PreparedStatement#binary binary}, {@link PreparedStatement#rowMode rowMode}"," * and {@link PreparedStatement#rows rows}, which are passed into $[pg], but not used by the class."," *"," * All properties can also be set after the object's construction."," *"," * This type extends the basic `{name, text, values}` object, by replacing it, i.e. when the basic object is used"," * with a query method, a new {@link PreparedStatement} object is created implicitly in its place."," *"," * The type can be used in place of the `query` parameter, with any query method directly. And it never throws any error,"," * leaving it for query methods to reject with {@link errors.PreparedStatementError PreparedStatementError}."," *"," * The type is available from the library's root: `pgp.PreparedStatement`."," *"," * @param {string} name"," * An arbitrary name given to this particular prepared statement. It must be unique within a single session and is"," * subsequently used to execute or deallocate a previously prepared statement."," *"," * @param {string|QueryFile} text"," * A non-empty query string or a {@link QueryFile} object."," *"," * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because $[Prepared Statements] are formatted by the database server."," *"," * @param {array} [values]"," * Query formatting values. When it is not an `Array` and not `null`/`undefined`, it is automatically wrapped into an array."," *"," * @returns {PreparedStatement}"," *"," * @see"," * {@link errors.PreparedStatementError PreparedStatementError},"," * {@link http://www.postgresql.org/docs/9.5/static/sql-prepare.html PostgreSQL Prepared Statements}"," *"," * @example"," *"," * var PS = require('pg-promise').PreparedStatement;"," *"," * // Creating a complete Prepared Statement with parameters:"," * var findUser = new PS('find-user', 'SELECT * FROM Users WHERE id = $1', [123]);"," *"," * db.one(findUser)"," *     .then(user=> {"," *         // user found;"," *     })"," *     .catch(error=> {"," *         // error;"," *     });"," *"," * @example"," *"," * var PS = require('pg-promise').PreparedStatement;"," *"," * // Creating a reusable Prepared Statement without values:"," * var addUser = new PS('add-user', 'INSERT INTO Users(name, age) VALUES($1, $2)');"," *"," * // setting values explicitly:"," * addUser.values = ['John', 30];"," *"," * db.none(addUser)"," *     .then(()=> {"," *         // user added;"," *     })"," *     .catch(error=> {"," *         // error;"," *     });"," *"," * // setting values implicitly, by passing them into the query method:"," * db.none(addUser, ['Mike', 25])"," *     .then(()=> {"," *         // user added;"," *     })"," *     .catch(error=> {"," *         // error;"," *     });"," */","function PreparedStatement(name, text, values) {","    if (!(this instanceof PreparedStatement)) {","        return new PreparedStatement(name, text, values);","    }","","    var currentError, PS = {}, changed = true, state = {","        name: name,","        text: text,","        binary: undefined,","        rowMode: undefined,","        rows: undefined","    };","","    function setValues(v) {","        if (Array.isArray(v)) {","            if (v.length) {","                PS.values = v;","            } else {","                delete PS.values;","            }","        } else {","            if ($npm.utils.isNull(v)) {","                delete PS.values;","            } else {","                PS.values = [v];","            }","        }","    }","","    setValues(values);","","    /**","     * @name PreparedStatement#name","     * @type {string}","     * @description","     * An arbitrary name given to this particular prepared statement. It must be unique within a single session and is","     * subsequently used to execute or deallocate a previously prepared statement.","     */","    Object.defineProperty(this, 'name', {","        get: () => state.name,","        set: value => {","            if (value !== state.name) {","                state.name = value;","                changed = true;","            }","        }","    });","","    /**","     * @name PreparedStatement#text","     * @type {string|QueryFile}","     * @description","     * A non-empty query string or a {@link QueryFile} object.","     *","     * Changing this property for the same {@link PreparedStatement#name name} will have no effect, because queries","     * for Prepared Statements are cached, with {@link PreparedStatement#name name} being the cache key.","     */","    Object.defineProperty(this, 'text', {","        get: () => state.text,","        set: value => {","            if (value !== state.text) {","                state.text = value;","                changed = true;","            }","        }","    });","","    /**","     * @name PreparedStatement#values","     * @type {array}","     * @description","     * Query formatting parameters, depending on the type:","     *","     * - `null` / `undefined` means the query has no formatting parameters","     * - `Array` - it is an array of formatting parameters","     * - None of the above, means it is a single formatting value, which","     *   is then automatically wrapped into an array","     */","    Object.defineProperty(this, 'values', {","        get: () => PS.values,","        set: value => {","            setValues(value);","        }","    });","","    /**","     * @name PreparedStatement#binary","     * @type {boolean}","     * @default undefined","     * @description","     * Activates binary result mode. The default is the text mode.","     *","     * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}","     */","    Object.defineProperty(this, 'binary', {","        get: () => state.binary,","        set: value => {","            if (value !== state.binary) {","                state.binary = value;","                changed = true;","            }","        }","    });","","    /**","     * @name PreparedStatement#rowMode","     * @type {string}","     * @default undefined","     * @description","     * Changes the way data arrives to the client, with only one value supported by $[pg]:","     *  - `rowMode = 'array'` will make all data rows arrive as arrays of values.","     *    By default, rows arrive as objects.","     */","    Object.defineProperty(this, 'rowMode', {","        get: () => state.rowMode,","        set: value => {","            if (value !== state.rowMode) {","                state.rowMode = value;","                changed = true;","            }","        }","    });","","    /**","     * @name PreparedStatement#rows","     * @type {number}","     * @description","     * Number of rows to return at a time from a Prepared Statement's portal.","     * The default is 0, which means that all rows must be returned at once.","     */","    Object.defineProperty(this, 'rows', {","        get: () => state.rows,","        set: value => {","            if (value !== state.rows) {","                state.rows = value;","                changed = true;","            }","        }","    });","","    /**","     * @name PreparedStatement#error","     * @type {errors.PreparedStatementError}","     * @default undefined","     * @description","     * When in an error state, it is set to a {@link errors.PreparedStatementError PreparedStatementError} object. Otherwise, it is `undefined`.","     *","     * This property is primarily for internal use by the library.","     */","    Object.defineProperty(this, 'error', {","        get: () => currentError","    });","","    if ($npm.utils.isObject(name, ['name'])) {","        state.name = name.name;","        state.text = name.text;","        state.binary = name.binary;","        state.rowMode = name.rowMode;","        state.rows = name.rows;","        setValues(name.values);","    }","","    /**","     * @method PreparedStatement.parse","     * @description","     * Parses the current object and returns a simple `{name, text, values}`, if successful,","     * or else it returns a {@link errors.PreparedStatementError PreparedStatementError} object.","     *","     * This method is primarily for internal use by the library.","     *","     * @returns {{name, text, values}|errors.PreparedStatementError}","     */","    this.parse = () => {","","        var qf = state.text instanceof $npm.QueryFile ? state.text : null;","","        if (!changed && !qf) {","            return PS;","        }","","        var errors = [], values = PS.values;","        PS = {","            name: state.name","        };","        changed = true;","        currentError = undefined;","","        if (!$npm.utils.isText(PS.name)) {","            errors.push('Property \\'name\\' must be a non-empty text string.');","        }","","        if (qf) {","            qf.prepare();","            if (qf.error) {","                PS.text = state.text;","                errors.push(qf.error);","            } else {","                PS.text = qf.query;","            }","        } else {","            PS.text = state.text;","        }","        if (!$npm.utils.isText(PS.text)) {","            errors.push('Property \\'text\\' must be a non-empty text string.');","        }","","        if (!$npm.utils.isNull(values)) {","            PS.values = values;","        }","","        if (state.binary !== undefined) {","            PS.binary = state.binary;","        }","","        if (state.rowMode !== undefined) {","            PS.rowMode = state.rowMode;","        }","","        if (state.rows !== undefined) {","            PS.rows = state.rows;","        }","","        if (errors.length) {","            return currentError = new $npm.errors.PreparedStatementError(errors[0], PS);","        }","","        changed = false;","","        return PS;","    };","}","","/**"," * @method PreparedStatement.toString"," * @description"," * Creates a well-formatted multi-line string that represents the object's current state."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","PreparedStatement.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap = $npm.utils.messageGap(level + 1);","    var ps = this.parse();","    var lines = [","        'PreparedStatement {',","        gap + 'name: ' + JSON.stringify(this.name)","    ];","    if ($npm.utils.isText(ps.text)) {","        lines.push(gap + 'text: \"' + ps.text + '\"');","    }","    if (this.values !== undefined) {","        lines.push(gap + 'values: ' + JSON.stringify(this.values));","    }","    if (this.binary !== undefined) {","        lines.push(gap + 'binary: ' + JSON.stringify(this.binary));","    }","    if (this.rowMode !== undefined) {","        lines.push(gap + 'rowMode: ' + JSON.stringify(this.rowMode));","    }","    if (this.rows !== undefined) {","        lines.push(gap + 'rows: ' + JSON.stringify(this.rows));","    }","    if (this.error) {","        lines.push(gap + 'error: ' + this.error.toString(level + 1));","    }","    lines.push($npm.utils.messageGap(level) + '}');","    return lines.join($npm.os.EOL);","};","","module.exports = PreparedStatement;","",""],"l":{"3":1,"90":1,"91":0,"92":0,"95":0,"103":1,"104":0,"105":0,"106":0,"108":0,"111":0,"112":0,"114":0,"119":0,"128":0,"129":0,"131":0,"132":0,"133":0,"147":0,"148":0,"150":0,"151":0,"152":0,"168":0,"169":0,"171":0,"184":0,"185":0,"187":0,"188":0,"189":0,"203":0,"204":0,"206":0,"207":0,"208":0,"220":0,"221":0,"223":0,"224":0,"225":0,"239":0,"240":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"262":0,"264":0,"266":0,"267":0,"270":0,"271":0,"274":0,"275":0,"277":0,"278":0,"281":0,"282":0,"283":0,"284":0,"285":0,"287":0,"290":0,"292":0,"293":0,"296":0,"297":0,"300":0,"301":0,"304":0,"305":0,"308":0,"309":0,"312":0,"313":0,"316":0,"318":0,"334":1,"335":0,"336":0,"337":0,"338":0,"342":0,"343":0,"345":0,"346":0,"348":0,"349":0,"351":0,"352":0,"354":0,"355":0,"357":0,"358":0,"360":0,"361":0,"364":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/types/parameterized.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/types/parameterized.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"ParameterizedQuery","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":42}}},"2":{"name":"setValues","line":97,"loc":{"start":{"line":97,"column":4},"end":{"line":97,"column":26}}},"3":{"name":"(anonymous_3)","line":282,"loc":{"start":{"line":282,"column":40},"end":{"line":282,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":8,"column":2}},"2":{"start":{"line":86,"column":0},"end":{"line":268,"column":1}},"3":{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},"4":{"start":{"line":88,"column":8},"end":{"line":88,"column":52}},"5":{"start":{"line":91,"column":4},"end":{"line":95,"column":6}},"6":{"start":{"line":97,"column":4},"end":{"line":111,"column":5}},"7":{"start":{"line":98,"column":8},"end":{"line":110,"column":9}},"8":{"start":{"line":99,"column":12},"end":{"line":103,"column":13}},"9":{"start":{"line":100,"column":16},"end":{"line":100,"column":30}},"10":{"start":{"line":102,"column":16},"end":{"line":102,"column":33}},"11":{"start":{"line":105,"column":12},"end":{"line":109,"column":13}},"12":{"start":{"line":106,"column":16},"end":{"line":106,"column":33}},"13":{"start":{"line":108,"column":16},"end":{"line":108,"column":32}},"14":{"start":{"line":113,"column":4},"end":{"line":113,"column":22}},"15":{"start":{"line":121,"column":4},"end":{"line":129,"column":7}},"16":{"start":{"line":122,"column":19},"end":{"line":122,"column":29}},"17":{"start":{"line":124,"column":12},"end":{"line":127,"column":13}},"18":{"start":{"line":125,"column":16},"end":{"line":125,"column":35}},"19":{"start":{"line":126,"column":16},"end":{"line":126,"column":31}},"20":{"start":{"line":142,"column":4},"end":{"line":147,"column":7}},"21":{"start":{"line":143,"column":19},"end":{"line":143,"column":28}},"22":{"start":{"line":145,"column":12},"end":{"line":145,"column":29}},"23":{"start":{"line":158,"column":4},"end":{"line":166,"column":7}},"24":{"start":{"line":159,"column":19},"end":{"line":159,"column":31}},"25":{"start":{"line":161,"column":12},"end":{"line":164,"column":13}},"26":{"start":{"line":162,"column":16},"end":{"line":162,"column":37}},"27":{"start":{"line":163,"column":16},"end":{"line":163,"column":31}},"28":{"start":{"line":177,"column":4},"end":{"line":185,"column":7}},"29":{"start":{"line":178,"column":19},"end":{"line":178,"column":32}},"30":{"start":{"line":180,"column":12},"end":{"line":183,"column":13}},"31":{"start":{"line":181,"column":16},"end":{"line":181,"column":38}},"32":{"start":{"line":182,"column":16},"end":{"line":182,"column":31}},"33":{"start":{"line":197,"column":4},"end":{"line":199,"column":7}},"34":{"start":{"line":198,"column":19},"end":{"line":198,"column":31}},"35":{"start":{"line":201,"column":4},"end":{"line":206,"column":5}},"36":{"start":{"line":202,"column":8},"end":{"line":202,"column":31}},"37":{"start":{"line":203,"column":8},"end":{"line":203,"column":35}},"38":{"start":{"line":204,"column":8},"end":{"line":204,"column":37}},"39":{"start":{"line":205,"column":8},"end":{"line":205,"column":31}},"40":{"start":{"line":218,"column":4},"end":{"line":267,"column":6}},"41":{"start":{"line":220,"column":8},"end":{"line":220,"column":74}},"42":{"start":{"line":222,"column":8},"end":{"line":224,"column":9}},"43":{"start":{"line":223,"column":12},"end":{"line":223,"column":22}},"44":{"start":{"line":226,"column":8},"end":{"line":226,"column":44}},"45":{"start":{"line":227,"column":8},"end":{"line":229,"column":10}},"46":{"start":{"line":230,"column":8},"end":{"line":230,"column":23}},"47":{"start":{"line":231,"column":8},"end":{"line":231,"column":33}},"48":{"start":{"line":233,"column":8},"end":{"line":243,"column":9}},"49":{"start":{"line":234,"column":12},"end":{"line":234,"column":25}},"50":{"start":{"line":235,"column":12},"end":{"line":240,"column":13}},"51":{"start":{"line":236,"column":16},"end":{"line":236,"column":37}},"52":{"start":{"line":237,"column":16},"end":{"line":237,"column":38}},"53":{"start":{"line":239,"column":16},"end":{"line":239,"column":35}},"54":{"start":{"line":242,"column":12},"end":{"line":242,"column":33}},"55":{"start":{"line":244,"column":8},"end":{"line":246,"column":9}},"56":{"start":{"line":245,"column":12},"end":{"line":245,"column":78}},"57":{"start":{"line":248,"column":8},"end":{"line":250,"column":9}},"58":{"start":{"line":249,"column":12},"end":{"line":249,"column":31}},"59":{"start":{"line":252,"column":8},"end":{"line":254,"column":9}},"60":{"start":{"line":253,"column":12},"end":{"line":253,"column":37}},"61":{"start":{"line":256,"column":8},"end":{"line":258,"column":9}},"62":{"start":{"line":257,"column":12},"end":{"line":257,"column":39}},"63":{"start":{"line":260,"column":8},"end":{"line":262,"column":9}},"64":{"start":{"line":261,"column":12},"end":{"line":261,"column":89}},"65":{"start":{"line":264,"column":8},"end":{"line":264,"column":24}},"66":{"start":{"line":266,"column":8},"end":{"line":266,"column":18}},"67":{"start":{"line":282,"column":0},"end":{"line":306,"column":2}},"68":{"start":{"line":283,"column":4},"end":{"line":283,"column":44}},"69":{"start":{"line":284,"column":4},"end":{"line":284,"column":47}},"70":{"start":{"line":285,"column":4},"end":{"line":285,"column":26}},"71":{"start":{"line":286,"column":4},"end":{"line":288,"column":6}},"72":{"start":{"line":289,"column":4},"end":{"line":291,"column":5}},"73":{"start":{"line":290,"column":8},"end":{"line":290,"column":52}},"74":{"start":{"line":292,"column":4},"end":{"line":294,"column":5}},"75":{"start":{"line":293,"column":8},"end":{"line":293,"column":67}},"76":{"start":{"line":295,"column":4},"end":{"line":297,"column":5}},"77":{"start":{"line":296,"column":8},"end":{"line":296,"column":67}},"78":{"start":{"line":298,"column":4},"end":{"line":300,"column":5}},"79":{"start":{"line":299,"column":8},"end":{"line":299,"column":69}},"80":{"start":{"line":301,"column":4},"end":{"line":303,"column":5}},"81":{"start":{"line":302,"column":8},"end":{"line":302,"column":69}},"82":{"start":{"line":304,"column":4},"end":{"line":304,"column":51}},"83":{"start":{"line":305,"column":4},"end":{"line":305,"column":35}},"84":{"start":{"line":308,"column":0},"end":{"line":308,"column":36}}},"branchMap":{"1":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"2":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]},"3":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":12}},{"start":{"line":99,"column":12},"end":{"line":99,"column":12}}]},"4":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":12}},{"start":{"line":105,"column":12},"end":{"line":105,"column":12}}]},"5":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":124,"column":12}},{"start":{"line":124,"column":12},"end":{"line":124,"column":12}}]},"6":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":12},"end":{"line":161,"column":12}},{"start":{"line":161,"column":12},"end":{"line":161,"column":12}}]},"7":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":12},"end":{"line":180,"column":12}},{"start":{"line":180,"column":12},"end":{"line":180,"column":12}}]},"8":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":201,"column":4}},{"start":{"line":201,"column":4},"end":{"line":201,"column":4}}]},"9":{"line":220,"type":"cond-expr","locations":[{"start":{"line":220,"column":56},"end":{"line":220,"column":66}},{"start":{"line":220,"column":69},"end":{"line":220,"column":73}}]},"10":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":8},"end":{"line":222,"column":8}},{"start":{"line":222,"column":8},"end":{"line":222,"column":8}}]},"11":{"line":222,"type":"binary-expr","locations":[{"start":{"line":222,"column":12},"end":{"line":222,"column":20}},{"start":{"line":222,"column":24},"end":{"line":222,"column":27}}]},"12":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]},"13":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":12},"end":{"line":235,"column":12}},{"start":{"line":235,"column":12},"end":{"line":235,"column":12}}]},"14":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":8},"end":{"line":244,"column":8}},{"start":{"line":244,"column":8},"end":{"line":244,"column":8}}]},"15":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":8},"end":{"line":248,"column":8}},{"start":{"line":248,"column":8},"end":{"line":248,"column":8}}]},"16":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":8},"end":{"line":252,"column":8}},{"start":{"line":252,"column":8},"end":{"line":252,"column":8}}]},"17":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":8},"end":{"line":256,"column":8}},{"start":{"line":256,"column":8},"end":{"line":256,"column":8}}]},"18":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":8},"end":{"line":260,"column":8}},{"start":{"line":260,"column":8},"end":{"line":260,"column":8}}]},"19":{"line":283,"type":"cond-expr","locations":[{"start":{"line":283,"column":24},"end":{"line":283,"column":39}},{"start":{"line":283,"column":42},"end":{"line":283,"column":43}}]},"20":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":4},"end":{"line":289,"column":4}},{"start":{"line":289,"column":4},"end":{"line":289,"column":4}}]},"21":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":4},"end":{"line":292,"column":4}},{"start":{"line":292,"column":4},"end":{"line":292,"column":4}}]},"22":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":4},"end":{"line":295,"column":4}},{"start":{"line":295,"column":4},"end":{"line":295,"column":4}}]},"23":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":4},"end":{"line":298,"column":4}},{"start":{"line":298,"column":4},"end":{"line":298,"column":4}}]},"24":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":4},"end":{"line":301,"column":4}},{"start":{"line":301,"column":4},"end":{"line":301,"column":4}}]}},"code":["'use strict';","","var $npm = {","    os: require('os'),","    utils: require('../utils'),","    errors: require('../errors'),","    QueryFile: require('../queryFile')","};","","/**"," * @constructor ParameterizedQuery"," * @description"," * **Alternative Syntax:** `ParameterizedQuery({text, values, ...})` &#8658; {@link ParameterizedQuery}"," *"," * Constructs a new {@link ParameterizedQuery} object."," *"," * The alternative syntax supports advanced properties {@link ParameterizedQuery#binary binary} and {@link ParameterizedQuery#rowMode rowMode},"," * which are passed into $[pg], but not used by the class."," *"," * All properties can also be set after the object's construction."," *"," * This type extends the basic `{text, values}` object, by replacing it, i.e. when the basic object is used"," * with a query method, a new {@link ParameterizedQuery} object is created implicitly in its place."," *"," * The type can be used in place of the `query` parameter, with any query method directly. And it never throws any error,"," * leaving it for query methods to reject with {@link errors.ParameterizedQueryError ParameterizedQueryError}."," *"," * The type is available from the library's root: `pgp.ParameterizedQuery`."," *"," * @param {string|QueryFile} text"," * A non-empty query string or a {@link QueryFile} object."," *"," * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because _Parameterized Queries_ are formatted by the database server."," *"," * @param {array} [values]"," * Query formatting values. When it is not an `Array` and not `null`/`undefined`, it is automatically wrapped into an array."," *"," * @returns {ParameterizedQuery}"," *"," * @see"," * {@link errors.ParameterizedQueryError ParameterizedQueryError}"," *"," * @example"," *"," * var PQ = require('pg-promise').ParameterizedQuery;"," *"," * // Creating a complete Parameterized Query with parameters:"," * var findUser = new PQ('SELECT * FROM Users WHERE id = $1', [123]);"," *"," * db.one(findUser)"," *     .then(user=> {"," *         // user found;"," *     })"," *     .catch(error=> {"," *         // error;"," *     });"," *"," * @example"," *"," * var PQ = require('pg-promise').ParameterizedQuery;"," *"," * // Creating a reusable Parameterized Query without values:"," * var addUser = new PQ('INSERT INTO Users(name, age) VALUES($1, $2)');"," *"," * // setting values explicitly:"," * addUser.values = ['John', 30];"," *"," * db.none(addUser)"," *     .then(()=> {"," *         // user added;"," *     })"," *     .catch(error=> {"," *         // error;"," *     });"," *"," * // setting values implicitly, by passing them into the query method:"," * db.none(addUser, ['Mike', 25])"," *     .then(()=> {"," *         // user added;"," *     })"," *     .catch(error=> {"," *         // error;"," *     });"," *"," */","function ParameterizedQuery(text, values) {","    if (!(this instanceof ParameterizedQuery)) {","        return new ParameterizedQuery(text, values);","    }","","    var currentError, PQ = {}, changed = true, state = {","        text: text,","        binary: undefined,","        rowMode: undefined","    };","","    function setValues(v) {","        if (Array.isArray(v)) {","            if (v.length) {","                PQ.values = v;","            } else {","                delete PQ.values;","            }","        } else {","            if ($npm.utils.isNull(v)) {","                delete PQ.values;","            } else {","                PQ.values = [v];","            }","        }","    }","","    setValues(values);","","    /**","     * @name ParameterizedQuery#text","     * @type {string|QueryFile}","     * @description","     * A non-empty query string or a {@link QueryFile} object.","     */","    Object.defineProperty(this, 'text', {","        get: () => state.text,","        set: value => {","            if (value !== state.text) {","                state.text = value;","                changed = true;","            }","        }","    });","","    /**","     * @name ParameterizedQuery#values","     * @type {array}","     * @description","     * Query formatting parameters, depending on the type:","     *","     * - `null` / `undefined` means the query has no formatting parameters","     * - `Array` - it is an array of formatting parameters","     * - None of the above, means it is a single formatting value, which","     *   is then automatically wrapped into an array","     */","    Object.defineProperty(this, 'values', {","        get: () => PQ.values,","        set: value => {","            setValues(value);","        }","    });","","    /**","     * @name ParameterizedQuery#binary","     * @type {boolean}","     * @default undefined","     * @description","     * Activates binary result mode. The default is the text mode.","     *","     * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}","     */","    Object.defineProperty(this, 'binary', {","        get: () => state.binary,","        set: value => {","            if (value !== state.binary) {","                state.binary = value;","                changed = true;","            }","        }","    });","","    /**","     * @name ParameterizedQuery#rowMode","     * @type {string}","     * @default undefined","     * @description","     * Changes the way data arrives to the client, with only one value supported by $[pg]:","     *  - `rowMode = 'array'` will make all data rows arrive as arrays of values.","     *    By default, rows arrive as objects.","     */","    Object.defineProperty(this, 'rowMode', {","        get: () => state.rowMode,","        set: value => {","            if (value !== state.rowMode) {","                state.rowMode = value;","                changed = true;","            }","        }","    });","","    /**","     * @name ParameterizedQuery#error","     * @type {errors.ParameterizedQueryError}","     * @default undefined","     * @readonly","     * @description","     * When in an error state, it is set to a {@link errors.ParameterizedQueryError ParameterizedQueryError} object. Otherwise, it is `undefined`.","     *","     * This property is primarily for internal use by the library.","     */","    Object.defineProperty(this, 'error', {","        get: () => currentError","    });","","    if ($npm.utils.isObject(text, ['text'])) {","        state.text = text.text;","        state.binary = text.binary;","        state.rowMode = text.rowMode;","        setValues(text.values);","    }","","    /**","     * @method ParameterizedQuery.parse","     * @description","     * Parses the current object and returns a simple `{text, values}`, if successful,","     * or else it returns a {@link errors.ParameterizedQueryError ParameterizedQueryError} object.","     *","     * This method is primarily for internal use by the library.","     *","     * @returns {{text, values}|errors.ParameterizedQueryError}","     */","    this.parse = () => {","","        var qf = state.text instanceof $npm.QueryFile ? state.text : null;","","        if (!changed && !qf) {","            return PQ;","        }","","        var errors = [], values = PQ.values;","        PQ = {","            name: state.name","        };","        changed = true;","        currentError = undefined;","","        if (qf) {","            qf.prepare();","            if (qf.error) {","                PQ.text = state.text;","                errors.push(qf.error);","            } else {","                PQ.text = qf.query;","            }","        } else {","            PQ.text = state.text;","        }","        if (!$npm.utils.isText(PQ.text)) {","            errors.push('Property \\'text\\' must be a non-empty text string.');","        }","","        if (!$npm.utils.isNull(values)) {","            PQ.values = values;","        }","","        if (state.binary !== undefined) {","            PQ.binary = state.binary;","        }","","        if (state.rowMode !== undefined) {","            PQ.rowMode = state.rowMode;","        }","","        if (errors.length) {","            return currentError = new $npm.errors.ParameterizedQueryError(errors[0], PQ);","        }","","        changed = false;","","        return PQ;","    };","}","","/**"," * @method ParameterizedQuery.toString"," * @description"," * Creates a well-formatted multi-line string that represents the object's current state."," *"," * It is called automatically when writing the object into the console."," *"," * @param {number} [level=0]"," * Nested output level, to provide visual offset."," *"," * @returns {string}"," */","ParameterizedQuery.prototype.toString = function (level) {","    level = level > 0 ? parseInt(level) : 0;","    var gap = $npm.utils.messageGap(level + 1);","    var pq = this.parse();","    var lines = [","        'ParameterizedQuery {'","    ];","    if ($npm.utils.isText(pq.text)) {","        lines.push(gap + 'text: \"' + pq.text + '\"');","    }","    if (this.values !== undefined) {","        lines.push(gap + 'values: ' + JSON.stringify(this.values));","    }","    if (this.binary !== undefined) {","        lines.push(gap + 'binary: ' + JSON.stringify(this.binary));","    }","    if (this.rowMode !== undefined) {","        lines.push(gap + 'rowMode: ' + JSON.stringify(this.rowMode));","    }","    if (this.error !== undefined) {","        lines.push(gap + 'error: ' + this.error.toString(level + 1));","    }","    lines.push($npm.utils.messageGap(level) + '}');","    return lines.join($npm.os.EOL);","};","","module.exports = ParameterizedQuery;",""],"l":{"3":1,"86":1,"87":0,"88":0,"91":0,"97":1,"98":0,"99":0,"100":0,"102":0,"105":0,"106":0,"108":0,"113":0,"121":0,"122":0,"124":0,"125":0,"126":0,"142":0,"143":0,"145":0,"158":0,"159":0,"161":0,"162":0,"163":0,"177":0,"178":0,"180":0,"181":0,"182":0,"197":0,"198":0,"201":0,"202":0,"203":0,"204":0,"205":0,"218":0,"220":0,"222":0,"223":0,"226":0,"227":0,"230":0,"231":0,"233":0,"234":0,"235":0,"236":0,"237":0,"239":0,"242":0,"244":0,"245":0,"248":0,"249":0,"252":0,"253":0,"256":0,"257":0,"260":0,"261":0,"264":0,"266":0,"282":1,"283":0,"284":0,"285":0,"286":0,"289":0,"290":0,"292":0,"293":0,"295":0,"296":0,"298":0,"299":0,"301":0,"302":0,"304":0,"305":0,"308":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/async.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/async.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":15},"end":{"line":17,"column":27}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":33,"column":2}},"2":{"start":{"line":15,"column":4},"end":{"line":31,"column":6}},"3":{"start":{"line":16,"column":8},"end":{"line":16,"column":32}},"4":{"start":{"line":17,"column":8},"end":{"line":30,"column":10}},"5":{"start":{"line":18,"column":12},"end":{"line":18,"column":53}},"6":{"start":{"line":20,"column":12},"end":{"line":27,"column":14}},"7":{"start":{"line":21,"column":16},"end":{"line":23,"column":17}},"8":{"start":{"line":22,"column":20},"end":{"line":22,"column":52}},"9":{"start":{"line":24,"column":16},"end":{"line":26,"column":56}},"10":{"start":{"line":25,"column":34},"end":{"line":25,"column":54}},"11":{"start":{"line":26,"column":34},"end":{"line":26,"column":54}},"12":{"start":{"line":29,"column":12},"end":{"line":29,"column":36}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":16},"end":{"line":21,"column":16}},{"start":{"line":21,"column":16},"end":{"line":21,"column":16}}]}},"code":["'use strict';","","/**"," * ES6 generators"," * @module async"," * @author Vitaly Tomilov"," * @private"," */","module.exports = config => {","","    /////////////////////////////////","    // Generator-to-Promise adapter;","    //","    // Based on: https://www.promisejs.org/generators/#both","    return generator => {","        var $p = config.promise;","        return function () {","            var g = generator.apply(this, arguments);","","            var handle = result => {","                if (result.done) {","                    return $p.resolve(result.value);","                }","                return $p.resolve(result.value)","                    .then(data => handle(g.next(data)))","                    .catch(err => handle(g.throw(err)));","            };","","            return handle(g.next());","        };","    };","","};",""],"l":{"9":1,"15":0,"16":0,"17":0,"18":0,"20":0,"21":0,"22":0,"24":0,"25":0,"26":0,"29":0}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/cnContext.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/cnContext.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"ConnectionContext","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":57}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":19},"end":{"line":21,"column":33}}},"3":{"name":"(anonymous_3)","line":25,"loc":{"start":{"line":25,"column":22},"end":{"line":25,"column":34}}},"4":{"name":"(anonymous_4)","line":32,"loc":{"start":{"line":32,"column":17},"end":{"line":32,"column":29}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":35,"column":1}},"2":{"start":{"line":15,"column":4},"end":{"line":15,"column":17}},"3":{"start":{"line":16,"column":4},"end":{"line":16,"column":17}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":27}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":17}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":27}},"7":{"start":{"line":21,"column":4},"end":{"line":23,"column":6}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":21}},"9":{"start":{"line":25,"column":4},"end":{"line":30,"column":6}},"10":{"start":{"line":26,"column":8},"end":{"line":29,"column":9}},"11":{"start":{"line":27,"column":12},"end":{"line":27,"column":27}},"12":{"start":{"line":28,"column":12},"end":{"line":28,"column":27}},"13":{"start":{"line":32,"column":4},"end":{"line":34,"column":6}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":92}},"15":{"start":{"line":43,"column":0},"end":{"line":43,"column":35}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":26,"column":8}},{"start":{"line":26,"column":8},"end":{"line":26,"column":8}}]}},"code":["'use strict';","","/**"," * @constructor ConnectionContext"," * @private"," * @summary Connection context object."," * @param {object} cn"," * @param {} dc"," * @param {object} options"," * @param {object} db"," * @param {number} txLevel"," */","function ConnectionContext(cn, dc, options, db, txLevel) {","","    this.cn = cn; // connection details;","    this.dc = dc; // database context;","    this.options = options; // library options;","    this.db = db; // database session;","    this.txLevel = txLevel; // transaction level;","","    this.connect = function (db) {","        this.db = db;","    };","","    this.disconnect = function () {","        if (this.db) {","            this.db.done();","            this.db = null;","        }","    };","","    this.clone = function () {","        return new ConnectionContext(this.cn, this.dc, this.options, this.db, this.txLevel);","    };","}","","/**"," * Connection Context"," * @module context"," * @author Vitaly Tomilov"," * @private"," */","module.exports = ConnectionContext;",""],"l":{"13":1,"15":0,"16":0,"17":0,"18":0,"19":0,"21":0,"22":0,"25":0,"26":0,"27":0,"28":0,"32":0,"33":0,"43":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/connect.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/connect.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":0,"43":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"poolConnect","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":34}}},"2":{"name":"directConnect","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":36}}},"3":{"name":"lockClientEnd","line":68,"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":31}}},"4":{"name":"setCtx","line":82,"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":9,"column":0},"end":{"line":38,"column":1}},"3":{"start":{"line":10,"column":4},"end":{"line":37,"column":7}},"4":{"start":{"line":11,"column":8},"end":{"line":36,"column":11}},"5":{"start":{"line":12,"column":12},"end":{"line":35,"column":13}},"6":{"start":{"line":13,"column":16},"end":{"line":16,"column":19}},"7":{"start":{"line":17,"column":16},"end":{"line":17,"column":28}},"8":{"start":{"line":19,"column":16},"end":{"line":19,"column":44}},"9":{"start":{"line":20,"column":16},"end":{"line":22,"column":17}},"10":{"start":{"line":21,"column":20},"end":{"line":21,"column":72}},"11":{"start":{"line":23,"column":16},"end":{"line":23,"column":36}},"12":{"start":{"line":24,"column":16},"end":{"line":24,"column":48}},"13":{"start":{"line":25,"column":16},"end":{"line":33,"column":19}},"14":{"start":{"line":29,"column":24},"end":{"line":29,"column":41}},"15":{"start":{"line":30,"column":24},"end":{"line":30,"column":31}},"16":{"start":{"line":31,"column":24},"end":{"line":31,"column":60}},"17":{"start":{"line":34,"column":16},"end":{"line":34,"column":58}},"18":{"start":{"line":40,"column":0},"end":{"line":66,"column":1}},"19":{"start":{"line":41,"column":4},"end":{"line":65,"column":7}},"20":{"start":{"line":42,"column":8},"end":{"line":42,"column":54}},"21":{"start":{"line":43,"column":8},"end":{"line":64,"column":11}},"22":{"start":{"line":44,"column":12},"end":{"line":63,"column":13}},"23":{"start":{"line":45,"column":16},"end":{"line":48,"column":19}},"24":{"start":{"line":49,"column":16},"end":{"line":49,"column":28}},"25":{"start":{"line":51,"column":16},"end":{"line":51,"column":36}},"26":{"start":{"line":52,"column":16},"end":{"line":52,"column":48}},"27":{"start":{"line":53,"column":16},"end":{"line":61,"column":19}},"28":{"start":{"line":57,"column":24},"end":{"line":57,"column":41}},"29":{"start":{"line":58,"column":24},"end":{"line":58,"column":37}},"30":{"start":{"line":59,"column":24},"end":{"line":59,"column":60}},"31":{"start":{"line":62,"column":16},"end":{"line":62,"column":55}},"32":{"start":{"line":68,"column":0},"end":{"line":80,"column":1}},"33":{"start":{"line":69,"column":4},"end":{"line":69,"column":25}},"34":{"start":{"line":70,"column":4},"end":{"line":78,"column":6}},"35":{"start":{"line":75,"column":8},"end":{"line":76,"column":41}},"36":{"start":{"line":77,"column":8},"end":{"line":77,"column":25}},"37":{"start":{"line":79,"column":4},"end":{"line":79,"column":15}},"38":{"start":{"line":82,"column":0},"end":{"line":87,"column":1}},"39":{"start":{"line":83,"column":4},"end":{"line":86,"column":7}},"40":{"start":{"line":89,"column":0},"end":{"line":92,"column":3}},"41":{"start":{"line":89,"column":28},"end":{"line":92,"column":1}},"42":{"start":{"line":90,"column":17},"end":{"line":90,"column":41}},"43":{"start":{"line":91,"column":19},"end":{"line":91,"column":45}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":12}},{"start":{"line":12,"column":12},"end":{"line":12,"column":12}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":16},"end":{"line":20,"column":16}},{"start":{"line":20,"column":16},"end":{"line":20,"column":16}}]},"3":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":12}},{"start":{"line":44,"column":12},"end":{"line":44,"column":12}}]}},"code":["'use strict';","","var $npm = {","    con: require('manakin').local,","    utils: require('./utils'),","    events: require('./events')","};","","function poolConnect(ctx, config) {","    return config.promise((resolve, reject) => {","        config.pgp.pg.connect(ctx.cn, (err, client, done) => {","            if (err) {","                $npm.events.error(ctx.options, err, {","                    cn: $npm.utils.getSafeConnection(ctx.cn),","                    dc: ctx.dc","                });","                reject(err);","            } else {","                var isFresh = !client.$used;","                if (isFresh) {","                    $npm.utils.addReadProp(client, '$used', true, true);","                }","                setCtx(client, ctx);","                var end = lockClientEnd(client);","                resolve({","                    isFresh: isFresh,","                    client: client,","                    done: () => {","                        client.end = end;","                        done();","                        $npm.events.disconnect(ctx, client);","                    }","                });","                $npm.events.connect(ctx, client, isFresh);","            }","        });","    });","}","","function directConnect(ctx, config) {","    return config.promise((resolve, reject) => {","        var client = new config.pgp.pg.Client(ctx.cn);","        client.connect(err => {","            if (err) {","                $npm.events.error(ctx.options, err, {","                    cn: $npm.utils.getSafeConnection(ctx.cn),","                    dc: ctx.dc","                });","                reject(err);","            } else {","                setCtx(client, ctx);","                var end = lockClientEnd(client);","                resolve({","                    isFresh: true,","                    client: client,","                    done: () => {","                        client.end = end;","                        client.end();","                        $npm.events.disconnect(ctx, client);","                    }","                });","                $npm.events.connect(ctx, client, true);","            }","        });","    });","}","","function lockClientEnd(client) {","    var end = client.end;","    client.end = () => {","        // This call can happen only in the following two cases:","        // 1. the client made the call directly, against the library's documentation (invalid code)","        // 2. connection with the server broke while under heavy communications, and the connection","        //    pool is trying to terminate all clients forcefully.","        $npm.con.error('Abnormal client.end() call, due to invalid code or failed server connection.\\n%s\\n',","            $npm.utils.getLocalStack(3));","        end.call(client);","    };","    return end;","}","","function setCtx(client, ctx) {","    Object.defineProperty(client, '$ctx', {","        value: ctx,","        writable: true","    });","}","","module.exports = config => ({","    pool: ctx => poolConnect(ctx, config),","    direct: ctx => directConnect(ctx, config)","});",""],"l":{"3":1,"9":1,"10":0,"11":0,"12":0,"13":0,"17":0,"19":0,"20":0,"21":0,"23":0,"24":0,"25":0,"29":0,"30":0,"31":0,"34":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"49":0,"51":0,"52":0,"53":0,"57":0,"58":0,"59":0,"62":0,"68":1,"69":0,"70":0,"75":0,"77":0,"79":0,"82":1,"83":0,"89":1,"90":0,"91":0}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/events.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/events.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":11,"column":0},"end":{"line":495,"column":2}},"3":{"start":{"line":54,"column":8},"end":{"line":63,"column":9}},"4":{"start":{"line":55,"column":12},"end":{"line":62,"column":13}},"5":{"start":{"line":56,"column":16},"end":{"line":56,"column":61}},"6":{"start":{"line":61,"column":16},"end":{"line":61,"column":49}},"7":{"start":{"line":95,"column":8},"end":{"line":104,"column":9}},"8":{"start":{"line":96,"column":12},"end":{"line":103,"column":13}},"9":{"start":{"line":97,"column":16},"end":{"line":97,"column":55}},"10":{"start":{"line":102,"column":16},"end":{"line":102,"column":52}},"11":{"start":{"line":166,"column":8},"end":{"line":174,"column":9}},"12":{"start":{"line":167,"column":12},"end":{"line":173,"column":13}},"13":{"start":{"line":168,"column":16},"end":{"line":168,"column":39}},"14":{"start":{"line":172,"column":16},"end":{"line":172,"column":80}},"15":{"start":{"line":233,"column":8},"end":{"line":241,"column":9}},"16":{"start":{"line":234,"column":12},"end":{"line":240,"column":13}},"17":{"start":{"line":235,"column":16},"end":{"line":235,"column":55}},"18":{"start":{"line":239,"column":16},"end":{"line":239,"column":80}},"19":{"start":{"line":277,"column":8},"end":{"line":284,"column":9}},"20":{"start":{"line":278,"column":12},"end":{"line":283,"column":13}},"21":{"start":{"line":279,"column":16},"end":{"line":279,"column":38}},"22":{"start":{"line":282,"column":16},"end":{"line":282,"column":46}},"23":{"start":{"line":320,"column":8},"end":{"line":327,"column":9}},"24":{"start":{"line":321,"column":12},"end":{"line":326,"column":13}},"25":{"start":{"line":322,"column":16},"end":{"line":322,"column":42}},"26":{"start":{"line":325,"column":16},"end":{"line":325,"column":50}},"27":{"start":{"line":377,"column":8},"end":{"line":386,"column":9}},"28":{"start":{"line":378,"column":12},"end":{"line":385,"column":13}},"29":{"start":{"line":379,"column":16},"end":{"line":379,"column":44}},"30":{"start":{"line":384,"column":16},"end":{"line":384,"column":47}},"31":{"start":{"line":464,"column":8},"end":{"line":473,"column":9}},"32":{"start":{"line":465,"column":12},"end":{"line":472,"column":13}},"33":{"start":{"line":466,"column":16},"end":{"line":466,"column":50}},"34":{"start":{"line":471,"column":16},"end":{"line":471,"column":48}},"35":{"start":{"line":490,"column":8},"end":{"line":493,"column":9}},"36":{"start":{"line":491,"column":12},"end":{"line":491,"column":73},"skip":true},"37":{"start":{"line":492,"column":12},"end":{"line":492,"column":92},"skip":true},"38":{"start":{"line":497,"column":0},"end":{"line":497,"column":25}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"2":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":8},"end":{"line":95,"column":8}},{"start":{"line":95,"column":8},"end":{"line":95,"column":8}}]},"3":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":8},"end":{"line":166,"column":8}},{"start":{"line":166,"column":8},"end":{"line":166,"column":8}}]},"4":{"line":172,"type":"cond-expr","locations":[{"start":{"line":172,"column":44},"end":{"line":172,"column":45}},{"start":{"line":172,"column":48},"end":{"line":172,"column":79}}]},"5":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]},"6":{"line":239,"type":"cond-expr","locations":[{"start":{"line":239,"column":44},"end":{"line":239,"column":45}},{"start":{"line":239,"column":48},"end":{"line":239,"column":79}}]},"7":{"line":277,"type":"if","locations":[{"start":{"line":277,"column":8},"end":{"line":277,"column":8}},{"start":{"line":277,"column":8},"end":{"line":277,"column":8}}]},"8":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":8},"end":{"line":320,"column":8}},{"start":{"line":320,"column":8},"end":{"line":320,"column":8}}]},"9":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":8},"end":{"line":377,"column":8}},{"start":{"line":377,"column":8},"end":{"line":377,"column":8}}]},"10":{"line":464,"type":"if","locations":[{"start":{"line":464,"column":8},"end":{"line":464,"column":8}},{"start":{"line":464,"column":8},"end":{"line":464,"column":8}}]},"11":{"line":490,"type":"if","locations":[{"start":{"line":490,"column":8},"end":{"line":490,"column":8},"skip":true},{"start":{"line":490,"column":8},"end":{"line":490,"column":8}}]},"12":{"line":491,"type":"cond-expr","locations":[{"start":{"line":491,"column":45},"end":{"line":491,"column":52},"skip":true},{"start":{"line":491,"column":55},"end":{"line":491,"column":72},"skip":true}]}},"code":["'use strict';","","var $npm = {","    con: require('manakin').local,","    main: require('./'),","    utils: require('./utils')","};","","/////////////////////////////////","// Client notification helpers;","var $events = {","","    /**","     * @event connect","     * @description","     * Global notification of acquiring a new database connection from the connection pool,","     * i.e. a virtual connection.","     *","     * However, for direct calls to method {@link Database.connect} with parameter `{direct: true}`,","     * this event represents a physical connection.","     *","     * The library will suppress any error thrown by the handler and write it into the console.","     *","     * @param {external:Client} client","     * $[pg.Client] object that represents the connection.","     *","     * @param {} dc","     * Database Context that was used when creating the database object (see {@link Database}).","     *","     * @param {boolean} isFresh","     * It indicates when it is a fresh physical connection:","     * - `true` - the physical connection just has been allocated","     * - `false` - the connection has been used previously","     *","     * **NOTE:**","     *","     * This parameter is always `true` for direct connections (created by calling {@link Database.connect}","     * with parameter `{direct: true}`).","     *","     * @example","     *","     * var options = {","     *","     *     // pg-promise initialization options...","     *","     *     connect: (client, dc, isFresh) => {","     *         var cp = client.connectionParameters;","     *         console.log(\"Connected to database:\", cp.database);","     *     }","     *","     * };","     */","    connect: (ctx, client, isFresh) => {","        if (typeof ctx.options.connect === 'function') {","            try {","                ctx.options.connect(client, ctx.dc, isFresh);","            } catch (e) {","                // have to silence errors here;","                // cannot allow unhandled errors while connecting to the database,","                // as it will break the connection logic;","                $events.unexpected('connect', e);","            }","        }","    },","","    /**","     * @event disconnect","     * @description","     * Global notification of releasing a database connection back to the connection pool,","     * i.e. releasing the virtual connection.","     *","     * However, when releasing a direct connection (created by calling {@link Database.connect} with parameter","     * `{direct: true}`), this event represents a physical disconnection.","     *","     * The library will suppress any error thrown by the handler and write it into the console.","     *","     * @param {external:Client} client - $[pg.Client] object that represents connection with the database.","     *","     * @param {} dc - Database Context that was used when creating the database object (see {@link Database}).","     *","     * @example","     *","     * var options = {","     *","     *     // pg-promise initialization options...","     *","     *     disconnect: (client, dc) => {","     *        var cp = client.connectionParameters;","     *        console.log(\"Disconnecting from database:\", cp.database);","     *     }","     *","     * };","     */","    disconnect: (ctx, client) => {","        if (typeof ctx.options.disconnect === 'function') {","            try {","                ctx.options.disconnect(client, ctx.dc);","            } catch (e) {","                // have to silence errors here;","                // cannot allow unhandled errors while disconnecting from the database,","                // as it will break the disconnection logic;","                $events.unexpected('disconnect', e);","            }","        }","    },","","    /**","     * @event query","     * @description","     *","     * Global notification of a query that's about to execute.","     *","     * Notification happens just before the query execution. And if the handler throws an error, the query execution","     * will be rejected with that error.","     *","     * @param {object} e - Event Context Object.","     *","     * This is a shared-type object that's passed in with the following events: {@link event:query query},","     * {@link event:receive receive}, {@link event:error error}, {@link event:task task} and {@link event:transact transact}.","     *","     * @param {String|Object} e.cn","     *","     * Set only for event {@link event:error error}, and only when the error is connection-related.","     *","     * It is a safe copy of the connection string/object that was used when initializing `db` - the database instance.","     *","     * If the original connection contains a password, the safe copy contains it masked with symbol `#`, so the connection","     * can be logged safely, without exposing the password.","     *","     * @param {} e.dc","     * Database Context that was used when creating the database object (see {@link Database}). It is set for all events.","     *","     * @param {String|Object} e.query","     *","     * Query string/object that was passed into the query method. This property is only set during events {@link event:query query}","     * and {@link event:receive receive}.","     *","     * @param {external:Client} e.client","     *","     * $[pg.Client] object that represents the connection. It is set for all events, except for event {@link event:error error}","     * when it is connection-related.","     *","     * @param {} e.params - Formatting parameters for the query.","     *","     * It is set only for events {@link event:query query}, {@link event:receive receive} and {@link event:error error}, and only","     * when it is needed for logging. This library takes an extra step in figuring out when formatting parameters are of any value","     * to the event logging:","     * - when an error occurs related to the query formatting, event {@link event:error error} is sent with the property set.","     * - when initialization parameter `pgFormat` is used, and all query formatting is done within the $[PG] library, events","     * {@link event:query query} and {@link event:receive receive} will have this property set also, since this library no longer","     * handles the query formatting.","     *","     * When this parameter is not set, it means one of the two things:","     * - there were no parameters passed into the query method;","     * - property `query` of this object already contains all the formatting values in it, so logging only the query is sufficient.","     *","     * @param {object} e.ctx","     * _Task/Transaction Context_ object. See {@link Task.ctx} for details.","     *","     * This property is always set for events {@link event:task task} and {@link event:transact transact}, while for events","     * {@link event:query query}, {@link event:receive receive} and {@link event:error error} it is only set when the event occurred","     * while executing a task or transaction.","     *","     */","    query: (options, context) => {","        if (typeof options.query === 'function') {","            try {","                options.query(context);","            } catch (e) {","                // throwing an error during event 'query'","                // will result in a reject for the request.","                return e instanceof Error ? e : new $npm.utils.InternalError(e);","            }","        }","    },","","    /**","     * @event receive","     * @description","     * Global notification of any data received from the database, coming from a regular query or from a stream.","     *","     * The event is fired before the data reaches the client, and only when receiving 1 or more records.","     *","     * This event notification serves two purposes:","     *  - Providing selective data logging for debugging;","     *  - Pre-processing data before it reaches the client.","     *","     * **NOTES:**","     * - If you alter the size of `data` directly or through the `result` object, it may affect `QueryResultMask`","     *   validation for regular queries, which is executed right after this notification.","     * - When adding data pre-processing, you should consider possible performance penalty this may bring.","     * - If the event handler throws an error, the original request will be rejected with that error.","     *","     * @param {array} data","     * A non-empty array of received data objects/rows.","     *","     * If any of those objects are modified during notification, the client will receive the modified data.","     *","     * @param {object} result","     * - original $[Result] object, if the data comes from a regular query, in which case `data = result.rows`.","     * - `undefined` when the data comes from a stream.","     *","     * @param {object} e","     * Event Context Object.","     *","     * This type of object is used by several events. See event {@link event:query query} for its complete documentation.","     *","     * @example","     *","     * // Example below shows the fastest way to camelize column names:","     *","     * var options = {","     *     receive: (data, result, e) => {","     *         camelizeColumns(data);","     *     }","     * };","     *","     * function camelizeColumns(data) {","     *     var template = data[0];","     *     for (var prop in template) {","     *         var camel = pgp.utils.camelize(prop);","     *         if (!(camel in template)) {","     *             for (var i = 0; i < data.length; i++) {","     *                 var d = data[i];","     *                 d[camel] = d[prop];","     *                 delete d[prop];","     *             }","     *         }","     *     }","     * }","     */","    receive: (options, data, result, context) => {","        if (typeof options.receive === 'function') {","            try {","                options.receive(data, result, context);","            } catch (e) {","                // throwing an error during event 'receive'","                // will result in a reject for the request.","                return e instanceof Error ? e : new $npm.utils.InternalError(e);","            }","        }","    },","","    /**","     * @event task","     * @description","     * Global notification of a task start / finish events.","     *","     * The library will suppress any error thrown by the handler and write it into the console.","     *","     * @param {object} e - Event Context Object.","     *","     * This type of object is used by several events. See event {@link event:query query}","     * for its complete documentation.","     *","     * @example","     *","     * var options = {","     *     task: e => {","     *         if (e.ctx.finish) {","     *             // this is a task->finish event;","     *             console.log(\"Finish Time:\", e.ctx.finish);","     *             if (e.ctx.success) {","     *                 // e.ctx.result = resolved data;","     *             } else {","     *                 // e.ctx.result = error/rejection reason;","     *             }","     *         } else {","     *             // this is a task->start event;","     *             console.log(\"Start Time:\", e.ctx.start);","     *         }","     *     }","     * };","     *","     */","    task: (options, context) => {","        if (typeof options.task === 'function') {","            try {","                options.task(context);","            } catch (e) {","                // silencing the error, to avoid breaking the task;","                $events.unexpected('task', e);","            }","        }","    },","","    /**","     * @event transact","     * @description","     * Global notification of a transaction start / finish events.","     *","     * The library will suppress any error thrown by the handler and write it into the console.","     *","     * @param {object} e - Event Context Object.","     *","     * This type of object is used by several events. See event {@link event:query query}","     * for its complete documentation.","     *","     * @example","     *","     * var options = {","     *     transact: e => {","     *         if (e.ctx.finish) {","     *             // this is a transaction->finish event;","     *             console.log(\"Finish Time:\", e.ctx.finish);","     *             if (e.ctx.success) {","     *                 // e.ctx.result = resolved data;","     *             } else {","     *                 // e.ctx.result = error/rejection reason;","     *             }","     *         } else {","     *             // this is a transaction->start event;","     *             console.log(\"Start Time:\", e.ctx.start);","     *         }","     *     }","     * };","     *","     */","    transact: (options, context) => {","        if (typeof options.transact === 'function') {","            try {","                options.transact(context);","            } catch (e) {","                // silencing the error, to avoid breaking the transaction;","                $events.unexpected('transact', e);","            }","        }","    },","","    /**","     * @event error","     * @description","     * Global notification of every error encountered by this library.","     *","     * The library will suppress any error thrown by the handler and write it into the console.","     *","     * @param {} err","     * The error encountered, of the same value and type as it was reported.","     *","     * @param {object} e","     * Event Context Object.","     *","     * This type of object is used by several events. See event {@link event:query query}","     * for its complete documentation.","     *","     * @example","     * var options = {","     *","     *     // pg-promise initialization options...","     *","     *     error: (err, e) => {","     *","     *         // e.dc = Database Context","     *","     *         if (e.cn) {","     *             // this is a connection-related error","     *             // cn = safe connection details passed into the library:","     *             //      if password is present, it is masked by #","     *         }","     *","     *         if (e.query) {","     *             // query string is available","     *             if (e.params) {","     *                 // query parameters are available","     *             }","     *         }","     *","     *         if (e.ctx) {","     *             // occurred inside a task or transaction","     *         }","     *       }","     *","     * };","     *","     */","    error: (options, err, context) => {","        if (typeof options.error === 'function') {","            try {","                options.error(err, context);","            } catch (e) {","                // have to silence errors here;","                // throwing unhandled errors while handling an error","                // notification is simply not acceptable.","                $events.unexpected('error', e);","            }","        }","    },","","    /**","     * @event extend","     * @description","     * Extends database protocol with custom methods and properties.","     *","     * Override this event to extend the existing access layer with your own functions and","     * properties best suited for your application.","     *","     * The extension thus becomes available across all access layers:","     *","     * - Within the root/default database protocol;","     * - Inside transactions, including nested ones;","     * - Inside tasks, including nested ones.","     *","     * All pre-defined methods and properties are read-only, so you will get an error,","     * if you try overriding them.","     *","     * The library will suppress any error thrown by the handler and write it into the console.","     *","     * @param {object} obj - Protocol object to be extended.","     *","     * @param {} dc - Database Context that was used when creating the database object.","     *","     * @example","     *","     * // In the example below we extend the protocol with function `addImage`","     * // that will insert one binary image and resolve with the new record id.","     *","     * var options = {","     *     extend: (obj, dc) => {","     *         // obj = this;","     *         // dc = database context;","     *         obj.addImage = data => {","     *             return obj.one(\"insert into images(data) values($1) returning id\", '\\\\x' + data);","     *         }","     *     }","     * };","     *","     * @example","     *","     * // It is best to extend the protocol by adding whole entity repositories to it","     * // as shown in the following example.","     *","     * // Users repository;","     * function repUsers(obj, dc) {","     *     // NOTE: You can change the implementation based on `dc`;","     *     return {","     *         add: (name, active) => {","     *             return obj.none(\"insert into users values($1, $2)\", [name, active]);","     *         },","     *         delete: id => obj.none(\"delete from users where id = $1\", id)","     *     }","     * }","     *","     * // Overriding 'extend' event;","     * var options = {","     *     extend: (obj, dc) => {","     *         // obj = this;","     *         // dc = database context;","     *         this.users = repUsers(this, dc);","     *         // You can set different repositories based on `dc`","     *     }","     * };","     *","     * // Usage example:","     * db.users.add(\"John\", true)","     *     .then(() => {","     *         // user added successfully;","     *     })","     *     .catch(error => {","     *         // failed to add the user;","     *     });","     *","     */","    extend: (options, obj, dc) => {","        if (typeof options.extend === 'function') {","            try {","                options.extend.call(obj, obj, dc);","            } catch (e) {","                // have to silence errors here;","                // the result of throwing unhandled errors while","                // extending the protocol would be unpredictable.","                $events.unexpected('extend', e);","            }","        }","    },","","    /**","     * @event unexpected","     * @param {string} event - unhandled event name.","     * @param {String|Error} e - unhandled error.","     * @private","     */","    unexpected: (event, e) => {","        // If you should ever get here, your app is definitely broken, and you need to fix","        // your event handler to prevent unhandled errors during event notifications.","        //","        // Console output is suppressed when running tests, to avoid polluting test output","        // with error messages that are intentional and of no value to the test.","","        /* istanbul ignore if */","        if (!$npm.main.suppressErrors) {","            var stack = e instanceof Error ? e.stack : new Error().stack;","            $npm.con.error('Unexpected error in \\'%s\\' event handler.\\n%s\\n', event, stack);","        }","    }","};","","module.exports = $events;",""],"l":{"3":1,"11":1,"54":0,"55":0,"56":0,"61":0,"95":0,"96":0,"97":0,"102":0,"166":0,"167":0,"168":0,"172":0,"233":0,"234":0,"235":0,"239":0,"277":0,"278":0,"279":0,"282":0,"320":0,"321":0,"322":0,"325":0,"377":0,"378":0,"379":0,"384":0,"464":0,"465":0,"466":0,"471":0,"490":0,"491":1,"492":1,"497":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/database.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/database.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":1,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0,"136":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"fnMap":{"1":{"name":"Database","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":34}}},"2":{"name":"(anonymous_2)","line":171,"loc":{"start":{"line":171,"column":19},"end":{"line":171,"column":38}}},"3":{"name":"(anonymous_3)","line":175,"loc":{"start":{"line":175,"column":19},"end":{"line":175,"column":49}}},"4":{"name":"(anonymous_4)","line":233,"loc":{"start":{"line":233,"column":17},"end":{"line":233,"column":47}}},"5":{"name":"createContext","line":284,"loc":{"start":{"line":284,"column":4},"end":{"line":284,"column":29}}},"6":{"name":"transform","line":288,"loc":{"start":{"line":288,"column":4},"end":{"line":288,"column":43}}},"7":{"name":"extend","line":300,"loc":{"start":{"line":300,"column":4},"end":{"line":300,"column":30}}},"8":{"name":"(anonymous_8)","line":334,"loc":{"start":{"line":334,"column":19},"end":{"line":334,"column":44}}},"9":{"name":"(anonymous_9)","line":402,"loc":{"start":{"line":402,"column":18},"end":{"line":402,"column":56}}},"10":{"name":"(anonymous_10)","line":440,"loc":{"start":{"line":440,"column":19},"end":{"line":440,"column":44}}},"11":{"name":"(anonymous_11)","line":500,"loc":{"start":{"line":500,"column":24},"end":{"line":500,"column":62}}},"12":{"name":"(anonymous_12)","line":543,"loc":{"start":{"line":543,"column":25},"end":{"line":543,"column":50}}},"13":{"name":"(anonymous_13)","line":586,"loc":{"start":{"line":586,"column":18},"end":{"line":586,"column":43}}},"14":{"name":"(anonymous_14)","line":648,"loc":{"start":{"line":648,"column":21},"end":{"line":648,"column":59}}},"15":{"name":"(anonymous_15)","line":682,"loc":{"start":{"line":682,"column":21},"end":{"line":682,"column":41}}},"16":{"name":"(anonymous_16)","line":707,"loc":{"start":{"line":707,"column":19},"end":{"line":707,"column":52}}},"17":{"name":"(anonymous_17)","line":745,"loc":{"start":{"line":745,"column":19},"end":{"line":745,"column":60}}},"18":{"name":"(anonymous_18)","line":853,"loc":{"start":{"line":853,"column":18},"end":{"line":853,"column":56}}},"19":{"name":"(anonymous_19)","line":934,"loc":{"start":{"line":934,"column":19},"end":{"line":934,"column":57}}},"20":{"name":"(anonymous_20)","line":1030,"loc":{"start":{"line":1030,"column":19},"end":{"line":1030,"column":37}}},"21":{"name":"(anonymous_21)","line":1130,"loc":{"start":{"line":1130,"column":17},"end":{"line":1130,"column":35}}},"22":{"name":"taskProcessor","line":1136,"loc":{"start":{"line":1136,"column":8},"end":{"line":1136,"column":45}}},"23":{"name":"checkForDuplicates","line":1217,"loc":{"start":{"line":1217,"column":0},"end":{"line":1217,"column":40}}},"24":{"name":"normalizeConnection","line":1237,"loc":{"start":{"line":1237,"column":0},"end":{"line":1237,"column":33}}},"25":{"name":"setErrorHandler","line":1248,"loc":{"start":{"line":1248,"column":0},"end":{"line":1248,"column":33}}},"26":{"name":"onError","line":1267,"loc":{"start":{"line":1267,"column":0},"end":{"line":1267,"column":30}},"skip":true}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":13,"column":2}},"2":{"start":{"line":15,"column":0},"end":{"line":15,"column":30}},"3":{"start":{"line":96,"column":0},"end":{"line":1213,"column":1}},"4":{"start":{"line":98,"column":4},"end":{"line":98,"column":35}},"5":{"start":{"line":99,"column":4},"end":{"line":99,"column":28}},"6":{"start":{"line":101,"column":4},"end":{"line":101,"column":28}},"7":{"start":{"line":171,"column":4},"end":{"line":197,"column":6}},"8":{"start":{"line":172,"column":8},"end":{"line":172,"column":34}},"9":{"start":{"line":173,"column":8},"end":{"line":188,"column":10}},"10":{"start":{"line":176,"column":16},"end":{"line":178,"column":17}},"11":{"start":{"line":177,"column":20},"end":{"line":177,"column":88}},"12":{"start":{"line":179,"column":16},"end":{"line":179,"column":77}},"13":{"start":{"line":183,"column":16},"end":{"line":185,"column":17}},"14":{"start":{"line":184,"column":20},"end":{"line":184,"column":86}},"15":{"start":{"line":186,"column":16},"end":{"line":186,"column":33}},"16":{"start":{"line":189,"column":8},"end":{"line":189,"column":69}},"17":{"start":{"line":190,"column":8},"end":{"line":196,"column":15}},"18":{"start":{"line":192,"column":16},"end":{"line":192,"column":32}},"19":{"start":{"line":193,"column":16},"end":{"line":193,"column":40}},"20":{"start":{"line":194,"column":16},"end":{"line":194,"column":34}},"21":{"start":{"line":195,"column":16},"end":{"line":195,"column":28}},"22":{"start":{"line":233,"column":4},"end":{"line":248,"column":6}},"23":{"start":{"line":234,"column":8},"end":{"line":234,"column":47}},"24":{"start":{"line":235,"column":8},"end":{"line":247,"column":15}},"25":{"start":{"line":237,"column":16},"end":{"line":237,"column":32}},"26":{"start":{"line":238,"column":16},"end":{"line":238,"column":77}},"27":{"start":{"line":241,"column":16},"end":{"line":241,"column":33}},"28":{"start":{"line":242,"column":16},"end":{"line":242,"column":28}},"29":{"start":{"line":245,"column":16},"end":{"line":245,"column":33}},"30":{"start":{"line":246,"column":16},"end":{"line":246,"column":40}},"31":{"start":{"line":280,"column":4},"end":{"line":280,"column":58}},"32":{"start":{"line":282,"column":4},"end":{"line":282,"column":34}},"33":{"start":{"line":284,"column":4},"end":{"line":286,"column":5}},"34":{"start":{"line":285,"column":8},"end":{"line":285,"column":56}},"35":{"start":{"line":288,"column":4},"end":{"line":295,"column":5}},"36":{"start":{"line":289,"column":8},"end":{"line":293,"column":9}},"37":{"start":{"line":290,"column":12},"end":{"line":292,"column":15}},"38":{"start":{"line":291,"column":16},"end":{"line":291,"column":46}},"39":{"start":{"line":294,"column":8},"end":{"line":294,"column":21}},"40":{"start":{"line":300,"column":4},"end":{"line":1211,"column":5}},"41":{"start":{"line":334,"column":8},"end":{"line":336,"column":10}},"42":{"start":{"line":335,"column":12},"end":{"line":335,"column":73}},"43":{"start":{"line":402,"column":8},"end":{"line":405,"column":10}},"44":{"start":{"line":403,"column":12},"end":{"line":403,"column":73}},"45":{"start":{"line":404,"column":12},"end":{"line":404,"column":45}},"46":{"start":{"line":440,"column":8},"end":{"line":442,"column":10}},"47":{"start":{"line":441,"column":12},"end":{"line":441,"column":73}},"48":{"start":{"line":500,"column":8},"end":{"line":503,"column":10}},"49":{"start":{"line":501,"column":12},"end":{"line":501,"column":92}},"50":{"start":{"line":502,"column":12},"end":{"line":502,"column":45}},"51":{"start":{"line":543,"column":8},"end":{"line":545,"column":10}},"52":{"start":{"line":544,"column":12},"end":{"line":544,"column":92}},"53":{"start":{"line":586,"column":8},"end":{"line":588,"column":10}},"54":{"start":{"line":587,"column":12},"end":{"line":587,"column":72}},"55":{"start":{"line":648,"column":8},"end":{"line":651,"column":10}},"56":{"start":{"line":649,"column":12},"end":{"line":649,"column":88}},"57":{"start":{"line":650,"column":12},"end":{"line":650,"column":45}},"58":{"start":{"line":682,"column":8},"end":{"line":684,"column":10}},"59":{"start":{"line":683,"column":12},"end":{"line":683,"column":82}},"60":{"start":{"line":707,"column":8},"end":{"line":711,"column":10}},"61":{"start":{"line":708,"column":12},"end":{"line":710,"column":28}},"62":{"start":{"line":745,"column":8},"end":{"line":748,"column":10}},"63":{"start":{"line":746,"column":12},"end":{"line":746,"column":94}},"64":{"start":{"line":747,"column":12},"end":{"line":747,"column":45}},"65":{"start":{"line":853,"column":8},"end":{"line":860,"column":10}},"66":{"start":{"line":854,"column":12},"end":{"line":859,"column":19}},"67":{"start":{"line":856,"column":20},"end":{"line":856,"column":61}},"68":{"start":{"line":857,"column":20},"end":{"line":857,"column":84}},"69":{"start":{"line":858,"column":20},"end":{"line":858,"column":34}},"70":{"start":{"line":934,"column":8},"end":{"line":940,"column":10}},"71":{"start":{"line":935,"column":12},"end":{"line":939,"column":19}},"72":{"start":{"line":937,"column":20},"end":{"line":937,"column":52}},"73":{"start":{"line":938,"column":20},"end":{"line":938,"column":32}},"74":{"start":{"line":1030,"column":8},"end":{"line":1032,"column":10}},"75":{"start":{"line":1031,"column":12},"end":{"line":1031,"column":59}},"76":{"start":{"line":1130,"column":8},"end":{"line":1132,"column":10}},"77":{"start":{"line":1131,"column":12},"end":{"line":1131,"column":58}},"78":{"start":{"line":1136,"column":8},"end":{"line":1200,"column":9}},"79":{"start":{"line":1138,"column":12},"end":{"line":1139,"column":38}},"80":{"start":{"line":1141,"column":12},"end":{"line":1143,"column":13}},"81":{"start":{"line":1142,"column":16},"end":{"line":1142,"column":83}},"82":{"start":{"line":1145,"column":12},"end":{"line":1147,"column":13}},"83":{"start":{"line":1146,"column":16},"end":{"line":1146,"column":39}},"84":{"start":{"line":1149,"column":12},"end":{"line":1149,"column":28}},"85":{"start":{"line":1153,"column":12},"end":{"line":1156,"column":13}},"86":{"start":{"line":1154,"column":16},"end":{"line":1154,"column":25}},"87":{"start":{"line":1155,"column":16},"end":{"line":1155,"column":32}},"88":{"start":{"line":1158,"column":12},"end":{"line":1158,"column":32}},"89":{"start":{"line":1160,"column":12},"end":{"line":1162,"column":13}},"90":{"start":{"line":1161,"column":16},"end":{"line":1161,"column":126}},"91":{"start":{"line":1164,"column":12},"end":{"line":1173,"column":13}},"92":{"start":{"line":1165,"column":16},"end":{"line":1172,"column":17}},"93":{"start":{"line":1167,"column":20},"end":{"line":1167,"column":33}},"94":{"start":{"line":1169,"column":20},"end":{"line":1171,"column":21}},"95":{"start":{"line":1170,"column":24},"end":{"line":1170,"column":38}},"96":{"start":{"line":1175,"column":12},"end":{"line":1175,"column":71}},"97":{"start":{"line":1177,"column":12},"end":{"line":1177,"column":33}},"98":{"start":{"line":1179,"column":12},"end":{"line":1183,"column":13}},"99":{"start":{"line":1181,"column":16},"end":{"line":1181,"column":79}},"100":{"start":{"line":1182,"column":16},"end":{"line":1182,"column":73}},"101":{"start":{"line":1186,"column":12},"end":{"line":1199,"column":19}},"102":{"start":{"line":1188,"column":20},"end":{"line":1188,"column":40}},"103":{"start":{"line":1189,"column":20},"end":{"line":1189,"column":75}},"104":{"start":{"line":1190,"column":20},"end":{"line":1190,"column":77}},"105":{"start":{"line":1193,"column":20},"end":{"line":1193,"column":41}},"106":{"start":{"line":1194,"column":20},"end":{"line":1194,"column":32}},"107":{"start":{"line":1197,"column":20},"end":{"line":1197,"column":41}},"108":{"start":{"line":1198,"column":20},"end":{"line":1198,"column":44}},"109":{"start":{"line":1204,"column":8},"end":{"line":1204,"column":49}},"110":{"start":{"line":1207,"column":8},"end":{"line":1207,"column":53}},"111":{"start":{"line":1210,"column":8},"end":{"line":1210,"column":48}},"112":{"start":{"line":1215,"column":0},"end":{"line":1215,"column":45}},"113":{"start":{"line":1217,"column":0},"end":{"line":1227,"column":1}},"114":{"start":{"line":1218,"column":4},"end":{"line":1218,"column":40}},"115":{"start":{"line":1219,"column":4},"end":{"line":1226,"column":5}},"116":{"start":{"line":1220,"column":8},"end":{"line":1223,"column":9}},"117":{"start":{"line":1221,"column":12},"end":{"line":1222,"column":45}},"118":{"start":{"line":1225,"column":8},"end":{"line":1225,"column":32}},"119":{"start":{"line":1237,"column":0},"end":{"line":1246,"column":1}},"120":{"start":{"line":1238,"column":4},"end":{"line":1244,"column":5}},"121":{"start":{"line":1239,"column":8},"end":{"line":1239,"column":52}},"122":{"start":{"line":1240,"column":8},"end":{"line":1242,"column":11}},"123":{"start":{"line":1241,"column":12},"end":{"line":1241,"column":33}},"124":{"start":{"line":1243,"column":8},"end":{"line":1243,"column":17}},"125":{"start":{"line":1245,"column":4},"end":{"line":1245,"column":30}},"126":{"start":{"line":1248,"column":0},"end":{"line":1262,"column":1}},"127":{"start":{"line":1251,"column":4},"end":{"line":1261,"column":5}},"128":{"start":{"line":1252,"column":8},"end":{"line":1255,"column":9},"skip":true},"129":{"start":{"line":1253,"column":12},"end":{"line":1253,"column":47},"skip":true},"130":{"start":{"line":1254,"column":12},"end":{"line":1254,"column":33},"skip":true},"131":{"start":{"line":1257,"column":8},"end":{"line":1260,"column":9}},"132":{"start":{"line":1258,"column":12},"end":{"line":1258,"column":47}},"133":{"start":{"line":1259,"column":12},"end":{"line":1259,"column":29}},"134":{"start":{"line":1267,"column":0},"end":{"line":1273,"column":1},"skip":true},"135":{"start":{"line":1268,"column":4},"end":{"line":1268,"column":26},"skip":true},"136":{"start":{"line":1269,"column":4},"end":{"line":1272,"column":7},"skip":true},"137":{"start":{"line":1275,"column":0},"end":{"line":1281,"column":2}},"138":{"start":{"line":1276,"column":4},"end":{"line":1276,"column":26}},"139":{"start":{"line":1277,"column":4},"end":{"line":1277,"column":54}},"140":{"start":{"line":1278,"column":4},"end":{"line":1278,"column":48}},"141":{"start":{"line":1279,"column":4},"end":{"line":1279,"column":45}},"142":{"start":{"line":1280,"column":4},"end":{"line":1280,"column":20}}},"branchMap":{"1":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":16},"end":{"line":176,"column":16}},{"start":{"line":176,"column":16},"end":{"line":176,"column":16}}]},"2":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":16},"end":{"line":183,"column":16}},{"start":{"line":183,"column":16},"end":{"line":183,"column":16}}]},"3":{"line":189,"type":"cond-expr","locations":[{"start":{"line":189,"column":51},"end":{"line":189,"column":59}},{"start":{"line":189,"column":62},"end":{"line":189,"column":68}}]},"4":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":22},"end":{"line":189,"column":29}},{"start":{"line":189,"column":33},"end":{"line":189,"column":47}}]},"5":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":8},"end":{"line":289,"column":8}},{"start":{"line":289,"column":8},"end":{"line":289,"column":8}}]},"6":{"line":1141,"type":"if","locations":[{"start":{"line":1141,"column":12},"end":{"line":1141,"column":12}},{"start":{"line":1141,"column":12},"end":{"line":1141,"column":12}}]},"7":{"line":1142,"type":"cond-expr","locations":[{"start":{"line":1142,"column":58},"end":{"line":1142,"column":77}},{"start":{"line":1142,"column":81},"end":{"line":1142,"column":82}}]},"8":{"line":1145,"type":"if","locations":[{"start":{"line":1145,"column":12},"end":{"line":1145,"column":12}},{"start":{"line":1145,"column":12},"end":{"line":1145,"column":12}}]},"9":{"line":1153,"type":"if","locations":[{"start":{"line":1153,"column":12},"end":{"line":1153,"column":12}},{"start":{"line":1153,"column":12},"end":{"line":1153,"column":12}}]},"10":{"line":1160,"type":"if","locations":[{"start":{"line":1160,"column":12},"end":{"line":1160,"column":12}},{"start":{"line":1160,"column":12},"end":{"line":1160,"column":12}}]},"11":{"line":1161,"type":"cond-expr","locations":[{"start":{"line":1161,"column":98},"end":{"line":1161,"column":112}},{"start":{"line":1161,"column":115},"end":{"line":1161,"column":122}}]},"12":{"line":1164,"type":"if","locations":[{"start":{"line":1164,"column":12},"end":{"line":1164,"column":12}},{"start":{"line":1164,"column":12},"end":{"line":1164,"column":12}}]},"13":{"line":1165,"type":"if","locations":[{"start":{"line":1165,"column":16},"end":{"line":1165,"column":16}},{"start":{"line":1165,"column":16},"end":{"line":1165,"column":16}}]},"14":{"line":1169,"type":"if","locations":[{"start":{"line":1169,"column":20},"end":{"line":1169,"column":20}},{"start":{"line":1169,"column":20},"end":{"line":1169,"column":20}}]},"15":{"line":1179,"type":"if","locations":[{"start":{"line":1179,"column":12},"end":{"line":1179,"column":12}},{"start":{"line":1179,"column":12},"end":{"line":1179,"column":12}}]},"16":{"line":1219,"type":"if","locations":[{"start":{"line":1219,"column":4},"end":{"line":1219,"column":4}},{"start":{"line":1219,"column":4},"end":{"line":1219,"column":4}}]},"17":{"line":1220,"type":"if","locations":[{"start":{"line":1220,"column":8},"end":{"line":1220,"column":8}},{"start":{"line":1220,"column":8},"end":{"line":1220,"column":8}}]},"18":{"line":1238,"type":"if","locations":[{"start":{"line":1238,"column":4},"end":{"line":1238,"column":4}},{"start":{"line":1238,"column":4},"end":{"line":1238,"column":4}}]},"19":{"line":1251,"type":"if","locations":[{"start":{"line":1251,"column":4},"end":{"line":1251,"column":4},"skip":true},{"start":{"line":1251,"column":4},"end":{"line":1251,"column":4}}]},"20":{"line":1252,"type":"if","locations":[{"start":{"line":1252,"column":8},"end":{"line":1252,"column":8},"skip":true},{"start":{"line":1252,"column":8},"end":{"line":1252,"column":8},"skip":true}]},"21":{"line":1257,"type":"if","locations":[{"start":{"line":1257,"column":8},"end":{"line":1257,"column":8}},{"start":{"line":1257,"column":8},"end":{"line":1257,"column":8}}]},"22":{"line":1277,"type":"binary-expr","locations":[{"start":{"line":1277,"column":18},"end":{"line":1277,"column":29}},{"start":{"line":1277,"column":33},"end":{"line":1277,"column":53}}]},"23":{"line":1278,"type":"binary-expr","locations":[{"start":{"line":1278,"column":16},"end":{"line":1278,"column":25}},{"start":{"line":1278,"column":29},"end":{"line":1278,"column":47}}]},"24":{"line":1279,"type":"binary-expr","locations":[{"start":{"line":1279,"column":15},"end":{"line":1279,"column":23}},{"start":{"line":1279,"column":27},"end":{"line":1279,"column":44}}]}},"code":["'use strict';","","var $npm = {","    con: require('manakin').local,","    result: require('./result'),","    special: require('./special'),","    Context: require('./cnContext'),","    events: require('./events'),","    utils: require('./utils'),","    connect: require('./connect'),","    query: require('./query'),","    task: require('./task')","};","","var $arr = require('./array');","","/**"," * @class Database"," * @description"," *"," * Represents the database protocol, extensible via event {@link event:extend extend}."," * This type is not available directly, it can only be created via the library's base call."," *"," * **IMPORTANT:**"," *"," * For any given connection, you should only create a single {@link Database} object in a separate module,"," * to be shared in your application (see the code example below). If instead you keep creating the {@link Database}"," * object dynamically, your application will suffer from loss in performance, and will be getting a warning in a"," * development environment (when `NODE_ENV` = `development`):"," *"," * `WARNING: Creating a duplicate database object for the same connection.`"," *"," * If you ever see this warning, rectify your {@link Database} object initialization, so there is only one object"," * per connection details. See the example provided below."," *"," * See also: property `noWarnings` in {@link module:pg-promise Initialization Options}."," *"," * @param {String|Object} cn"," * Database connection details, which can be:"," *"," * - a configuration object"," * - a connection string"," *"," * For details see {@link https://github.com/vitaly-t/pg-promise/wiki/Connection-Syntax Connection Syntax}."," *"," * @param {} [dc]"," * Database Context."," *"," * Any object or value to be propagated through the protocol, to allow implementations"," * and event handling that depend on the database context."," *"," * This is mainly to facilitate the use of multiple databases which may need separate protocol"," * extensions, or different implementations within a single task / transaction callback,"," * depending on the database context."," *"," * @returns {Database}"," *"," * @see"," *"," * {@link Database.query query},"," * {@link Database.none none},"," * {@link Database.one one},"," * {@link Database.oneOrNone oneOrNone},"," * {@link Database.many many},"," * {@link Database.manyOrNone manyOrNone},"," * {@link Database.any any},"," * {@link Database.func func},"," * {@link Database.proc proc},"," * {@link Database.result result},"," * {@link Database.map map},"," * {@link Database.each each},"," * {@link Database.stream stream},"," * {@link Database.task task},"," * {@link Database.tx tx},"," * {@link Database.connect connect},"," * {@link Database.$config $config},"," * {@link event:extend extend}"," *"," * @example"," * // Proper way to initialize and share the Database object"," *"," * // Loading and initializing the library:"," * var pgp = require('pg-promise')({"," *     // Initialization Options"," * });"," *"," * // Preparing the connection details:"," * var cn = \"postgres://username:password@host:port/database\";"," *"," * // Creating a new database instance from the connection details:"," * var db = pgp(cn);"," *"," * // Exporting the database object for shared use:"," * module.exports = db;"," */","function Database(cn, dc, config) {","","    checkForDuplicates(cn, config);","    setErrorHandler(config);","","    var $p = config.promise;","","    /**","     * @method Database.connect","     *","     * @description","     * Acquires a new or existing connection, based on the current connection parameters.","     *","     * This method creates a shared connection for executing a chain of queries against it.","     * The connection must be released in the end of the chain by calling method `done()` on the connection object.","     *","     * This is an older, low-level approach to chaining queries on the same connection.","     * A newer and safer approach is via methods {@link Database.task task} and {@link Database.tx tx} (for transactions),","     * which allocate and release the shared connection automatically.","     *","     * **NOTE:** Even though this method exposes a {@link external:Client Client} object via property `client`,","     * you cannot call `client.end()` directly, or it will print an error into the console:","     * `Abnormal client.end() call, due to invalid code or failed server connection.`","     * You should only call method `done()` to release the connection.","     *","     * @param {object} [options]","     * @param {boolean} [options.direct=false]","     * Creates the connection directly, through the {@link external:Client Client}, bypassing the connection pool.","     *","     * By default, all connections are acquired from the connection pool. If you set this option, the library will instead","     * create a new {@link external:Client Client} object directly (separately from the pool), and then call its `connect` method.","     *","     * **WARNING:**","     *","     * Do not use this option for regular query execution, because it exclusively occupies one physical connection,","     * and therefore cannot scale. This option is only suitable for global connection usage, such as database event listeners.","     *","     * @returns {external:Promise}","     * A promise object that represents the connection result:","     *  - resolves with the complete {@link Database} protocol, extended with:","     *    - property `client` of type {@link external:Client Client} that represents the open connection","     *    - method `done()` that must be called in the end, in order to release the connection","     *  - rejects with a connection-related error when it fails to connect.","     *","     * @see","     * {@link Database.task},","     * {@link Database.tx}","     *","     * @example","     *","     * var sco; // shared connection object;","     *","     * db.connect()","     *     .then(obj => {","     *         // obj.client = new connected Client object;","     *","     *         sco = obj; // save the connection object;","     *","     *         // execute all the queries you need:","     *         return sco.any('SELECT * FROM Users');","     *     })","     *     .then(data => {","     *         // success","     *     })","     *     .catch(error => {","     *         // error","     *     })","     *     .finally(() => {","     *         // release the connection, if it was successful:","     *         if (sco) {","     *             sco.done();","     *         }","     *     });","     *","     */","    this.connect = function (options) {","        var ctx = createContext();","        var self = {","            // Generic query method;","            query: function (query, values, qrm) {","                if (!ctx.db) {","                    throw new Error('Cannot execute a query on a disconnected client.');","                }","                return config.$npm.query.call(this, ctx, query, values, qrm);","            },","            // Connection release method;","            done: () => {","                if (!ctx.db) {","                    throw new Error('Cannot invoke done() on a disconnected client.');","                }","                ctx.disconnect();","            }","        };","        var method = (options && options.direct) ? 'direct' : 'pool';","        return config.$npm.connect[method](ctx)","            .then(db => {","                ctx.connect(db);","                self.client = db.client;","                extend(ctx, self);","                return self;","            });","    };","","    /**","     * @method Database.query","     *","     * @description","     * Executes a generic query request that expects the return data according to parameter `qrm`.","     *","     * @param {String|Object} query","     * Query to be executed, which can any of the following types:","     * - A non-empty query string","     * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","     * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","     * - {@link QueryFile} object","     *","     * @param {array|value} [values]","     * Query formatting parameters.","     *","     * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","     * - a single value - to replace all `$1` occurrences","     * - an array of values - to replace all `$1`, `$2`, ... variables","     * - an object - to apply $[Named Parameters] formatting","     *","     * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","     * and `values` is not `null` or `undefined`, it is automatically set within such object,","     * as an override for its internal `values`.","     *","     * @param {queryResult} [qrm=queryResult.any]","     * {@link queryResult Query Result Mask}","     *","     * @returns {external:Promise}","     * A promise object that represents the query result.","     *","     * When the query result is an array, it is extended with hidden property `duration` -","     * number of milliseconds it took the client to execute the query.","     */","    this.query = function (query, values, qrm) {","        var self = this, ctx = createContext();","        return config.$npm.connect.pool(ctx)","            .then(db => {","                ctx.connect(db);","                return config.$npm.query.call(self, ctx, query, values, qrm);","            })","            .then(data => {","                ctx.disconnect();","                return data;","            })","            .catch(error => {","                ctx.disconnect();","                return $p.reject(error);","            });","    };","","    /**","     * @member {object} Database.$config","     * @readonly","     * @description","     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.","     *","     * Properties available in the object:","     * - `pgp` - instance of the entire library after initialization","     * - `options` - the library's {@link module:pg-promise Initialization Options} object","     * - `promiseLib` - instance of the promise library that's used","     * - `promise` - generic promise interface that uses `promiseLib` via 3 basic methods:","     *   - `promise((resolve, reject)=>{})` - to create a new promise","     *   - `promise.resolve(value)` - to resolve with a value","     *   - `promise.reject(value)` - to reject with a value","     * - `version` - this library's version","     * - `$npm` _(hidden property)_ - internal module cache","     *","     * @example","     *","     * // Using the promise protocol as configured by pg-promise:","     *","     * var $p = db.$config.promise;","     *","     * var resolvedPromise = $p.resolve('some data');","     * var rejectedPromise = $p.reject('some reason');","     *","     * var newPromise = $p((resolve, reject) => {","     *     // call either resolve(data) or reject(reason) here","     * });","     */","    $npm.utils.addReadProp(this, '$config', config, true);","","    extend(createContext(), this); // extending root protocol;","","    function createContext() {","        return new $npm.Context(cn, dc, config.options);","    }","","    function transform(value, cb, thisArg) {","        if (typeof cb === 'function') {","            value = value.then(data => {","                return cb.call(thisArg, data);","            });","        }","        return value;","    }","","    ////////////////////////////////////////////////////","    // Injects additional methods into an access object,","    // extending the protocol's base method 'query'.","    function extend(ctx, obj) {","","        /**","         * @method Database.none","         * @description","         * Executes a query that expects no data to be returned.","         * If the query returns any kind of data, the method rejects.","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @returns {external:Promise}","         * A promise object that represents the query result:","         * - When no records are returned, it resolves with `null`.","         * - When any data is returned, it rejects with {@link errors.QueryResultError QueryResultError}:","         *   - `.message` = `No return data was expected.`","         *   - `.code` = {@link errors.queryResultErrorCode.notEmpty queryResultErrorCode.notEmpty}","         */","        obj.none = function (query, values) {","            return obj.query.call(this, query, values, $npm.result.none);","        };","","        /**","         * @method Database.one","         * @description","         * Executes a query that expects exactly one row of data.","         * When 0 or more than 1 rows are returned, the method rejects.","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @param {function} [cb]","         * Value transformation callback, to allow in-line value change.","         * When specified, the return value replaces the original resolved value.","         *","         * The function takes only one parameter - value resolved from the query.","         *","         * @param {} [thisArg]","         * Value to use as `this` when executing the transformation callback.","         *","         * @returns {external:Promise}","         * A promise object that represents the query result:","         * - When 1 row is returned, it resolves with that row as a single object.","         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:","         *   - `.message` = `No data returned from the query.`","         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}","         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:","         *   - `.message` = `Multiple rows were not expected.`","         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}","         *","         * @see","         * {@link Database.oneOrNone oneOrNone}","         *","         * @example","         *","         * // a query with in-line value transformation:","         * db.one('INSERT INTO Events VALUES($1) RETURNING id', [123], event => event.id)","         *     .then(data=> {","         *         // data = a new event id, rather than an object with it","         *     });","         *","         * @example","         *","         * // a query with in-line value transformation + conversion:","         * db.one('SELECT count(*) FROM Users', [], c => +c.count)","         *     .then(count=> {","         *         // count = a proper integer value, rather than an object with a string","         *     });","         *","         */","        obj.one = function (query, values, cb, thisArg) {","            var v = obj.query.call(this, query, values, $npm.result.one);","            return transform(v, cb, thisArg);","        };","","        /**","         * @method Database.many","         * @description","         * Executes a query that expects one or more rows.","         * When the query returns no rows, the method rejects.","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @returns {external:Promise}","         * A promise object that represents the query result:","         * - When 1 or more rows are returned, it resolves with the array of rows. The array is extended with","         *   hidden property `duration` - number of milliseconds it took the client to execute the query.","         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:","         *   - `.message` = `No data returned from the query.`","         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}","         */","        obj.many = function (query, values) {","            return obj.query.call(this, query, values, $npm.result.many);","        };","","        /**","         * @method Database.oneOrNone","         * @description","         * Executes a query that expects 0 or 1 rows.","         * When the query returns more than 1 row, the method rejects.","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @param {function} [cb]","         * Value transformation callback, to allow in-line value change.","         * When specified, the return value replaces the original resolved value.","         *","         * The function takes only one parameter - value resolved from the query.","         *","         * @param {} [thisArg]","         * Value to use as `this` when executing the transformation callback.","         *","         * @returns {external:Promise}","         * A promise object that represents the query result:","         * - When no rows are returned, it resolves with `null`.","         * - When 1 row is returned, it resolves with that row as a single object.","         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:","         *   - `.message` = `Multiple rows were not expected.`","         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}","         *","         * @see","         * {@link Database.one one},","         * {@link Database.none none},","         * {@link Database.manyOrNone manyOrNone}","         *","         * @example","         *","         * // a query with in-line value transformation:","         * db.oneOrNone('SELECT id FROM Events WHERE type = $1', ['entry'], e => e && e.id)","         *     .then(data=> {","         *         // data = the event id or null (rather than object or null)","         *     });","         *","         */","        obj.oneOrNone = function (query, values, cb, thisArg) {","            var v = obj.query.call(this, query, values, $npm.result.one | $npm.result.none);","            return transform(v, cb, thisArg);","        };","","        /**","         * @method Database.manyOrNone","         * @description","         * Executes a query that expects any number of rows.","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @returns {external:Promise}","         * A promise object that represents the query result:","         * - When no rows are returned, it resolves with an empty array.","         * - When 1 or more rows are returned, it resolves with the array of rows.","         *","         * The resolved array is extended with hidden property `duration` - number of milliseconds","         * it took the client to execute the query.","         *","         * @see","         * {@link Database.any any},","         * {@link Database.many many},","         * {@link Database.none none}","         *","         */","        obj.manyOrNone = function (query, values) {","            return obj.query.call(this, query, values, $npm.result.many | $npm.result.none);","        };","","        /**","         * @method Database.any","         * @description","         * Executes a query that expects any number of rows.","         * This is simply a shorter alias for method {@link Database.manyOrNone manyOrNone}.","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @returns {external:Promise}","         * A promise object that represents the query result:","         * - When no rows are returned, it resolves with an empty array.","         * - When 1 or more rows are returned, it resolves with the array of rows.","         *","         * The resolved array is extended with hidden property `duration` - number of milliseconds","         * it took the client to execute the query.","         *","         * @see","         * {@link Database.manyOrNone manyOrNone},","         * {@link Database.map map},","         * {@link Database.each each}","         *","         */","        obj.any = function (query, values) {","            return obj.query.call(this, query, values, $npm.result.any);","        };","","        /**","         * @method Database.result","         * @description","         * Executes a query without any expectation for the return data, to resolve with the","         * original $[Result] object when successful.","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @param {function} [cb]","         * Value transformation callback, to allow in-line value change.","         * When specified, the return value replaces the original resolved value.","         *","         * The function takes only one parameter - value resolved from the query.","         *","         * @param {} [thisArg]","         * Value to use as `this` when executing the transformation callback.","         *","         * @returns {external:Promise}","         * A promise object that represents the query result:","         * - resolves with the original $[Result] object, extended with property `duration` -","         *   number of milliseconds it took the client to execute the query.","         *","         * @example","         *","         * // use of value transformation:","         * // deleting rows and returning the number of rows deleted","         * db.result('DELETE FROM Events WHERE id = $1', [123], r => r.rowCount)","         *     .then(data=> {","         *         // data = number of rows that were deleted","         *     });","         *","         * @example","         *","         * // use of value transformation:","         * // getting only column details from a table","         * db.result('SELECT * FROM Users LIMIT 0', null, r => r.fields)","         *     .then(data=> {","         *         // data = array of column descriptors","         *     });","         *","         */","        obj.result = function (query, values, cb, thisArg) {","            var v = obj.query.call(this, query, values, $npm.special.cache.resultQuery);","            return transform(v, cb, thisArg);","        };","","        /**","         * @method Database.stream","         * @description","         * Custom data streaming, with the help of $[pg-query-stream].","         *","         * This method doesn't work with the $[Native Bindings], and if option `pgNative`","         * is set, it will reject with `Streaming doesn't work with Native Bindings.`","         *","         * @param {QueryStream} qs","         * Stream object of type $[QueryStream].","         *","         * @param {Database.streamInitCB} initCB","         * Stream initialization callback.","         *","         * It is invoked with the same `this` context as the calling method.","         *","         * @returns {external:Promise}","         * Result of the streaming operation.","         *","         * Once the streaming has finished successfully, the method resolves with","         * `{processed, duration}`:","         * - `processed` - total number of rows processed;","         * - `duration` - streaming duration, in milliseconds.","         *","         * Possible rejections messages:","         * - `Invalid or missing stream object.`","         * - `Invalid stream state.`","         * - `Invalid or missing stream initialization callback.`","         */","        obj.stream = function (qs, init) {","            return obj.query.call(this, qs, init, $npm.special.cache.streamQuery);","        };","","        /**","         * @method Database.func","         * @description","         * Executes a query against a database function by its name: `SELECT * FROM funcName(values)`.","         *","         * @param {string} funcName","         * Name of the function to be executed.","         *","         * @param {array|value} [values]","         * Parameters for the function - one value or an array of values.","         *","         * @param {queryResult} [qrm=queryResult.any] - {@link queryResult Query Result Mask}.","         *","         * @returns {external:Promise}","         *","         * A promise object as returned from method {@link Database.query query}, according to parameter `qrm`.","         *","         * @see","         * {@link Database.query query},","         * {@link Database.proc proc}","         */","        obj.func = function (funcName, values, qrm) {","            return obj.query.call(this, {","                funcName: funcName","            }, values, qrm);","        };","","        /**","         * @method Database.proc","         * @description","         * Executes a query against a stored procedure via its name: `select * from procName(values)`,","         * expecting back 0 or 1 rows.","         *","         * The method simply forwards into {@link Database.func func}`(procName, values, queryResult.one|queryResult.none)`.","         *","         * @param {string} procName","         * Name of the stored procedure to be executed.","         *","         * @param {array|value} [values]","         * Parameters for the procedure - one value or an array of values.","         *","         * @param {function} [cb]","         * Value transformation callback, to allow in-line value change.","         * When specified, the return value replaces the original resolved value.","         *","         * The function takes only one parameter - value resolved from the query.","         *","         * @param {} [thisArg]","         * Value to use as `this` when executing the transformation callback.","         *","         * @returns {external:Promise}","         *","         * It calls {@link Database.func func}(`procName`, `values`, `queryResult.one|queryResult.none`),","         * and then returns the same result as method {@link Database.oneOrNone oneOrNone}.","         *","         * @see","         * {@link Database.oneOrNone oneOrNone},","         * {@link Database.func func}","         */","        obj.proc = function (procName, values, cb, thisArg) {","            var v = obj.func.call(this, procName, values, $npm.result.one | $npm.result.none);","            return transform(v, cb, thisArg);","        };","","        /**","         * @method Database.map","         * @description","         * Creates a new array with the results of calling a provided function on every element in the array of rows","         * resolved by method {@link Database.any any}.","         *","         * It is a convenience method to reduce the following code:","         *","         * ```js","         * db.any(query, values)","         *     .then(data => {","         *         return data.map((row, index, data) => {","         *              // return a new element","         *         });","         *     });","         * ```","         *","         * In addition to much shorter code, it offers the following benefits:","         *","         * - Use of a custom iterator has a much better performance than the standard {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map Array.map}","         * - Automatic `this` context through the database protocol","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} values","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @param {function} cb","         * Function that produces an element of the new array, taking three arguments:","         * - `row` - the current row object being processed in the array","         * - `index` - the index of the current row being processed in the array","         * - `data` - the original array of rows resolved by method {@link Database.any any}","         *","         * @param {} [thisArg]","         * Value to use as `this` when executing the callback.","         *","         * @returns {external:Promise}","         * Resolves with the new array of values returned from the callback. The array is extended with","         * hidden property `duration` - number of milliseconds it took the client to execute the query.","         *","         * @see","         * {@link Database.any any},","         * {@link Database.each each},","         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map Array.map}","         *","         * @example","         *","         * db.map('SELECT id FROM Users WHERE status = $1', ['active'], row => row.id)","         *     .then(data => {","         *         // data = array of active user id-s","         *     })","         *     .catch(error => {","         *        // error","         *     });","         *","         * @example","         *","         * db.tx(t => {","         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], row => {","         *        return t.none('UPDATE Events SET checked = $1 WHERE userId = $2', [true, row.id]);","         *     }).then(t.batch);","         * })","         *     .then(data => {","         *         // success","         *     })","         *     .catch(error => {","         *         // error","         *     });","         *","         * @example","         *","         * // Build a list of active users, each with the list of user events:","         * db.task(t => {","         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], user => {","         *         return t.any('SELECT * FROM Events WHERE userId = $1', user.id)","         *             .then(events=> {","         *                 user.events = events;","         *                 return user;","         *             });","         *     }).then(t.batch);","         * })","         *     .then(data => {","         *         // success","         *     })","         *     .catch(error => {","         *         // error","         *     });","         *","         */","        obj.map = function (query, values, cb, thisArg) {","            return obj.any.call(this, query, values)","                .then(data => {","                    var result = $arr.map(data, cb, thisArg);","                    $npm.utils.addReadProp(result, 'duration', data.duration, true);","                    return result;","                });","        };","","        /**","         * @method Database.each","         * @description","         * Executes a provided function once per array element, for an array of rows resolved by method {@link Database.any any}.","         *","         * It is a convenience method to reduce the following code:","         *","         * ```js","         * db.any(query, values)","         *     .then(data => {","         *         data.forEach((row, index, data) => {","         *              // process the row","         *         });","         *         return data;","         *     });","         * ```","         *","         * In addition to much shorter code, it offers the following benefits:","         *","         * - Use of a custom iterator has a much better performance than the regular {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach Array.forEach}","         * - Automatic `this` context through the database protocol","         *","         * @param {String|Object} query","         * Query to be executed, which can any of the following types:","         * - A non-empty query string","         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object","         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object","         * - {@link QueryFile} object","         *","         * @param {array|value} [values]","         * Query formatting parameters.","         *","         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:","         * - a single value - to replace all `$1` occurrences","         * - an array of values - to replace all `$1`, `$2`, ... variables","         * - an object - to apply $[Named Parameters] formatting","         *","         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),","         * and `values` is not `null` or `undefined`, it is automatically set within such object,","         * as an override for its internal `values`.","         *","         * @param {function} cb","         * Function to execute for each row, taking three arguments:","         * - `row` - the current row object being processed in the array","         * - `index` - the index of the current row being processed in the array","         * - `data` - the array of rows resolved by method {@link Database.any any}","         *","         * @param {} [thisArg]","         * Value to use as `this` when executing the callback.","         *","         * @returns {external:Promise}","         * Resolves with the original array of rows, extended with hidden property `duration` -","         * number of milliseconds it took the client to execute the query.","         *","         * @see","         * {@link Database.any any},","         * {@link Database.map map},","         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach Array.forEach}","         *","         * @example","         *","         * db.each('SELECT id, code, name FROM Events', [], row => {","         *     row.code = +row.code; // leading `+` is short for `parseInt()`","         * })","         *     .then(data => {","         *         // data = array of events, with 'code' converted into integer","         *     })","         *     .catch(error => {","         *         // error","         *     });","         *","         */","        obj.each = function (query, values, cb, thisArg) {","            return obj.any.call(this, query, values)","                .then(data => {","                    $arr.forEach(data, cb, thisArg);","                    return data;","                });","        };","","        /**","         * @method Database.task","         * @description","         * Executes a callback function (or $[ES6 generator]) with an automatically managed connection.","         *","         * This method should be used whenever executing more than one query at once, so the allocated connection","         * is reused between all queries, and released only after the task has finished.","         *","         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods","         * {@link Task.batch batch}, {@link Task.page page}, {@link Task.sequence sequence}, plus property {@link Task.ctx ctx} -","         * the task context object.","         *","         * See class {@link Task} for more details.","         *","         * @param {} tag/cb","         * When the method takes only one parameter, it must be the callback function (or $[ES6 generator]) for the task.","         * However, when calling the method with 2 parameters, the first one is always the `tag` - traceable context for the","         * task (see $[tags]).","         *","         * @param {function|generator} [cb]","         * Task callback function (or $[ES6 generator]), if it is not `undefined`, or else the callback is expected to","         * be passed in as the first parameter.","         *","         * @returns {external:Promise}","         *","         * A promise object that represents the result from the callback function.","         *","         * @see","         * {@link Task},","         * {@link Database.tx tx},","         * $[tags]","         *","         * @example","         *","         * // using the regular callback syntax:","         * db.task(t => {","         *         // t.ctx = task context object","         *","         *         return t.one('SELECT id FROM Users WHERE name = $1', 'John')","         *             .then(user=> {","         *                 return t.any('SELECT * FROM Events WHERE userId = $1', user.id);","         *             });","         *     })","         *     .then(data => {","         *         // success","         *         // data = as returned from the task's callback","         *     })","         *     .catch(error => {","         *         // error","         *     });","         *","         * @example","         *","         * // using the ES6 arrow syntax:","         * db.task(t => {","         *         // t.ctx = task context object","         *         ","         *         return t.one('SELECT id FROM Users WHERE name = $1', 'John')","         *             .then(user=> {","         *                 return t.any('SELECT * FROM Events WHERE userId = $1', user.id);","         *             });","         *     })","         *     .then(data=> {","         *         // success","         *         // data = as returned from the task's callback","         *     })","         *     .catch(error=> {","         *         // error","         *     });","         *","         * @example","         *","         * // using an ES6 generator for the callback:","         * db.task(function * (t) {","         *         // t.ctx = task context object","         *","         *         let user = yield t.one('SELECT id FROM Users WHERE name = $1', 'John');","         *         return yield t.any('SELECT * FROM Events WHERE userId = $1', user.id);","         *     })","         *     .then(data => {","         *         // success","         *         // data = as returned from the task's callback","         *     })","         *     .catch(error => {","         *         // error","         *     });","         *","         */","        obj.task = function (p1, p2) {","            return taskProcessor.call(this, p1, p2, false);","        };","","        /**","         * @method Database.tx","         * @description","         * Executes a callback function (or $[ES6 generator]) as a transaction.","         *","         * A transaction simply wraps a regular {@link Database.task task} in automatic queries:","         * - it executes `BEGIN` just before invoking the callback function","         * - it executes `COMMIT`, if the callback didn't throw any error or return a rejected promise","         * - it executes `ROLLBACK`, if the callback did throw an error or return a rejected promise","         *","         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods","         * {@link Task.batch batch}, {@link Task.page page}, {@link Task.sequence sequence}, plus property {@link Task.ctx ctx} -","         * the transaction context object.","         *","         * See class {@link Task} for more details.","         *","         * Note that transactions should be chosen over tasks only where they are necessary, because unlike regular tasks,","         * transactions are blocking operations, and must be used with caution.","         *","         * @param {} tag/cb","         * When the method takes only one parameter, it must be the callback function (or $[ES6 generator]) for the transaction.","         * However, when calling the method with 2 parameters, the first one is always the `tag` - traceable context for the","         * transaction (see $[tags]).","         *","         * @param {function|generator} [cb]","         * Transaction callback function (or $[ES6 generator]), if it is not `undefined`, or else the callback is expected to be","         * passed in as the first parameter.","         *","         * @returns {external:Promise}","         *","         * A promise object that represents the result from the callback function.","         *","         * @see","         * {@link Task},","         * {@link Database.task},","         * $[tags]","         *","         * @example","         *","         * // using the regular callback syntax:","         * db.tx(t => {","         *         // t.ctx = transaction context object","         *","         *         return t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25])","         *             .then(user=> {","         *                 return t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']);","         *             });","         *     })","         *     .then(data => {","         *         // success","         *         // data = as returned from the transaction's callback","         *     })","         *     .catch(error => {","         *         // error","         *     });","         *","         * @example","         *","         * // using the ES6 arrow syntax:","         * db.tx(t=> {","         *         // t.ctx = transaction context object","         *         ","         *         return t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25])","         *             .then(user=> {","         *                 return t.batch([","         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']),","         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'login'])","         *                 ]);","         *             });","         *     })","         *     .then(data=> {","         *         // success","         *         // data = as returned from the transaction's callback","         *     })","         *     .catch(error=> {","         *         // error","         *     });","         *","         * @example","         *","         * // using an ES6 generator for the callback:","         * db.tx(function * (t) {","         *         // t.ctx = transaction context object","         *","         *         let user = yield t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25]);","         *         return yield t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']);","         *     })","         *     .then(data => {","         *         // success","         *         // data = as returned from the transaction's callback","         *     })","         *     .catch(error => {","         *         // error","         *     });","         *","         */","        obj.tx = function (p1, p2) {","            return taskProcessor.call(this, p1, p2, true);","        };","","        // Task method;","        // Resolves with result from the callback function;","        function taskProcessor(p1, p2, isTX) {","","            var tag, // tag object/value;","                taskCtx = ctx.clone(); // task context object;","","            if (isTX) {","                taskCtx.txLevel = taskCtx.txLevel >= 0 ? (taskCtx.txLevel + 1) : 0;","            }","","            if (this !== obj) {","                taskCtx.context = this; // calling context object;","            }","","            taskCtx.cb = p1; // callback function;","","            // allow inserting a tag in front of the callback","            // function, for better code readability;","            if (p2 !== undefined) {","                tag = p1; // overriding any default tag;","                taskCtx.cb = p2;","            }","","            var cb = taskCtx.cb;","","            if (typeof cb !== 'function') {","                return $p.reject(new TypeError('Callback function is required for the ' + (isTX ? 'transaction.' : 'task.')));","            }","","            if (tag === undefined) {","                if (cb.tag !== undefined) {","                    // use the default tag associated with the task:","                    tag = cb.tag;","                } else {","                    if (cb.name) {","                        tag = cb.name; // use the function name as tag;","                    }","                }","            }","","            var tsk = new config.$npm.task(taskCtx, tag, isTX, config); // eslint-disable-line","","            extend(taskCtx, tsk);","","            if (taskCtx.db) {","                // reuse existing connection;","                $npm.utils.addReadProp(tsk.ctx, 'isFresh', taskCtx.db.isFresh);","                return config.$npm.task.exec(taskCtx, tsk, isTX, config);","            }","","            // connection required;","            return config.$npm.connect.pool(taskCtx)","                .then(db => {","                    taskCtx.connect(db);","                    $npm.utils.addReadProp(tsk.ctx, 'isFresh', db.isFresh);","                    return config.$npm.task.exec(taskCtx, tsk, isTX, config);","                })","                .then(data => {","                    taskCtx.disconnect();","                    return data;","                })","                .catch(error => {","                    taskCtx.disconnect();","                    return $p.reject(error);","                });","        }","","        // lock all default properties to read-only,","        // to prevent override by the client.","        $npm.utils.lock(obj, false, ctx.options);","","        // extend the protocol;","        $npm.events.extend(ctx.options, obj, ctx.dc);","","        // freeze the protocol permanently;","        $npm.utils.lock(obj, true, ctx.options);","    }","","}","","var jsHandled, nativeHandled, dbObjects = {};","","function checkForDuplicates(cn, config) {","    var cnKey = normalizeConnection(cn);","    if (cnKey in dbObjects) {","        if (!config.options.noWarnings) {","            $npm.con.warn('WARNING: Creating a duplicate database object for the same connection.\\n%s\\n',","                $npm.utils.getLocalStack(5));","        }","    } else {","        dbObjects[cnKey] = true;","    }","}","","/**"," * For connections that are objects it reorders the keys alphabetically,"," * and then serializes the result into a JSON string."," *"," * @param {string|object} cn - connection string or object"," *"," * @private"," */","function normalizeConnection(cn) {","    if (typeof cn === 'object') {","        var obj = {}, keys = Object.keys(cn).sort();","        $arr.forEach(keys, name => {","            obj[name] = cn[name];","        });","        cn = obj;","    }","    return JSON.stringify(cn);","}","","function setErrorHandler(config) {","    // we do not do code coverage specific to Native Bindings:","    // istanbul ignore if","    if (config.options.pgNative) {","        if (!nativeHandled) {","            config.pgp.pg.on('error', onError);","            nativeHandled = true;","        }","    } else {","        if (!jsHandled) {","            config.pgp.pg.on('error', onError);","            jsHandled = true;","        }","    }","}","","// this event only happens when the connection is lost physically,","// which cannot be tested automatically; removing from coverage:","// istanbul ignore next","function onError(err, client) {","    var ctx = client.$ctx;","    $npm.events.error(ctx.options, err, {","        cn: $npm.utils.getSafeConnection(ctx.cn),","        dc: ctx.dc","    });","}","","module.exports = config => {","    var npm = config.$npm;","    npm.connect = npm.connect || $npm.connect(config);","    npm.query = npm.query || $npm.query(config);","    npm.task = npm.task || $npm.task(config);","    return Database;","};","","/**"," * @callback Database.streamInitCB"," * @description"," * Stream initialization callback, used by {@link Database.stream}."," *"," * @param {external:Stream} stream"," * Stream object to initialize streaming."," *"," * @example"," * var QueryStream = require('pg-query-stream');"," * var JSONStream = require('JSONStream');"," *"," * // you can also use pgp.as.format(query, values, options)"," * // to format queries properly, via pg-promise;"," * var qs = new QueryStream('select * from users');"," *"," * db.stream(qs, stream => {"," *         // initiate streaming into the console:"," *         stream.pipe(JSONStream.stringify()).pipe(process.stdout);"," *     })"," *     .then(data => {"," *         console.log(\"Total rows processed:\", data.processed,"," *           \"Duration in milliseconds:\", data.duration);"," *     })"," *     .catch(error => {"," *         // error;"," *     });"," */","","/**"," * @external Stream"," * @see https://nodejs.org/api/stream.html"," */",""],"l":{"3":1,"15":1,"96":1,"98":0,"99":0,"101":0,"171":0,"172":0,"173":0,"176":0,"177":0,"179":0,"183":0,"184":0,"186":0,"189":0,"190":0,"192":0,"193":0,"194":0,"195":0,"233":0,"234":0,"235":0,"237":0,"238":0,"241":0,"242":0,"245":0,"246":0,"280":0,"282":0,"284":1,"285":0,"288":1,"289":0,"290":0,"291":0,"294":0,"300":1,"334":0,"335":0,"402":0,"403":0,"404":0,"440":0,"441":0,"500":0,"501":0,"502":0,"543":0,"544":0,"586":0,"587":0,"648":0,"649":0,"650":0,"682":0,"683":0,"707":0,"708":0,"745":0,"746":0,"747":0,"853":0,"854":0,"856":0,"857":0,"858":0,"934":0,"935":0,"937":0,"938":0,"1030":0,"1031":0,"1130":0,"1131":0,"1136":1,"1138":0,"1141":0,"1142":0,"1145":0,"1146":0,"1149":0,"1153":0,"1154":0,"1155":0,"1158":0,"1160":0,"1161":0,"1164":0,"1165":0,"1167":0,"1169":0,"1170":0,"1175":0,"1177":0,"1179":0,"1181":0,"1182":0,"1186":0,"1188":0,"1189":0,"1190":0,"1193":0,"1194":0,"1197":0,"1198":0,"1204":0,"1207":0,"1210":0,"1215":1,"1217":1,"1218":0,"1219":0,"1220":0,"1221":0,"1225":0,"1237":1,"1238":0,"1239":0,"1240":0,"1241":0,"1243":0,"1245":0,"1248":1,"1251":0,"1252":1,"1253":1,"1254":1,"1257":0,"1258":0,"1259":0,"1267":1,"1268":1,"1269":1,"1275":1,"1276":0,"1277":0,"1278":0,"1279":0,"1280":0}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/special.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/special.js","s":{"1":1,"2":2,"3":2,"4":1,"5":1},"b":{},"f":{"1":2},"fnMap":{"1":{"name":"SpecialQuery","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":28}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":8,"column":1}},"2":{"start":{"line":6,"column":4},"end":{"line":6,"column":38}},"3":{"start":{"line":7,"column":4},"end":{"line":7,"column":38}},"4":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"5":{"start":{"line":15,"column":0},"end":{"line":18,"column":2}}},"branchMap":{},"code":["'use strict';","","/////////////////////////////","// Special Query type;","function SpecialQuery(type) {","    this.isStream = type === 'stream';","    this.isResult = type === 'result';","}","","var cache = {","    resultQuery: new SpecialQuery('result'),","    streamQuery: new SpecialQuery('stream')","};","","module.exports = {","    SpecialQuery: SpecialQuery,","    cache: cache","};",""],"l":{"5":1,"6":2,"7":2,"10":1,"15":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/query.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/query.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":1,"109":0,"110":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0],"26":[0,0],"27":[0,0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"$query","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":49}}},"2":{"name":"getContext","line":193,"loc":{"start":{"line":193,"column":8},"end":{"line":193,"column":30}}},"3":{"name":"notifyReject","line":211,"loc":{"start":{"line":211,"column":8},"end":{"line":211,"column":32}}},"4":{"name":"(anonymous_4)","line":226,"loc":{"start":{"line":226,"column":11},"end":{"line":226,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":13,"column":2}},"2":{"start":{"line":15,"column":0},"end":{"line":21,"column":44}},"3":{"start":{"line":23,"column":0},"end":{"line":23,"column":49}},"4":{"start":{"line":27,"column":0},"end":{"line":223,"column":1}},"5":{"start":{"line":29,"column":4},"end":{"line":29,"column":38}},"6":{"start":{"line":31,"column":4},"end":{"line":36,"column":5}},"7":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"8":{"start":{"line":33,"column":12},"end":{"line":33,"column":70}},"9":{"start":{"line":35,"column":8},"end":{"line":35,"column":32}},"10":{"start":{"line":38,"column":4},"end":{"line":42,"column":51}},"11":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"12":{"start":{"line":45,"column":8},"end":{"line":45,"column":59}},"13":{"start":{"line":48,"column":4},"end":{"line":80,"column":5}},"14":{"start":{"line":49,"column":8},"end":{"line":79,"column":9}},"15":{"start":{"line":50,"column":12},"end":{"line":50,"column":28}},"16":{"start":{"line":51,"column":12},"end":{"line":56,"column":13}},"17":{"start":{"line":52,"column":16},"end":{"line":52,"column":36}},"18":{"start":{"line":53,"column":16},"end":{"line":53,"column":35}},"19":{"start":{"line":55,"column":16},"end":{"line":55,"column":36}},"20":{"start":{"line":58,"column":12},"end":{"line":78,"column":13}},"21":{"start":{"line":59,"column":16},"end":{"line":59,"column":30}},"22":{"start":{"line":60,"column":16},"end":{"line":60,"column":39}},"23":{"start":{"line":62,"column":16},"end":{"line":74,"column":17}},"24":{"start":{"line":63,"column":20},"end":{"line":63,"column":40}},"25":{"start":{"line":65,"column":20},"end":{"line":73,"column":21}},"26":{"start":{"line":66,"column":24},"end":{"line":66,"column":61}},"27":{"start":{"line":67,"column":24},"end":{"line":67,"column":44}},"28":{"start":{"line":69,"column":24},"end":{"line":72,"column":25}},"29":{"start":{"line":70,"column":28},"end":{"line":70,"column":66}},"30":{"start":{"line":71,"column":28},"end":{"line":71,"column":48}},"31":{"start":{"line":75,"column":16},"end":{"line":77,"column":17}},"32":{"start":{"line":76,"column":20},"end":{"line":76,"column":42}},"33":{"start":{"line":82,"column":4},"end":{"line":94,"column":5}},"34":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"35":{"start":{"line":84,"column":12},"end":{"line":84,"column":95}},"36":{"start":{"line":86,"column":8},"end":{"line":93,"column":9}},"37":{"start":{"line":87,"column":12},"end":{"line":87,"column":35}},"38":{"start":{"line":88,"column":12},"end":{"line":92,"column":13}},"39":{"start":{"line":89,"column":16},"end":{"line":89,"column":27}},"40":{"start":{"line":91,"column":16},"end":{"line":91,"column":27}},"41":{"start":{"line":96,"column":4},"end":{"line":104,"column":5}},"42":{"start":{"line":97,"column":8},"end":{"line":103,"column":9}},"43":{"start":{"line":98,"column":12},"end":{"line":98,"column":34}},"44":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"45":{"start":{"line":101,"column":16},"end":{"line":101,"column":78}},"46":{"start":{"line":106,"column":4},"end":{"line":122,"column":5}},"47":{"start":{"line":107,"column":8},"end":{"line":121,"column":9}},"48":{"start":{"line":109,"column":12},"end":{"line":113,"column":13}},"49":{"start":{"line":110,"column":16},"end":{"line":110,"column":78}},"50":{"start":{"line":112,"column":16},"end":{"line":112,"column":67}},"51":{"start":{"line":115,"column":12},"end":{"line":118,"column":13}},"52":{"start":{"line":116,"column":16},"end":{"line":116,"column":72}},"53":{"start":{"line":117,"column":16},"end":{"line":117,"column":55}},"54":{"start":{"line":119,"column":12},"end":{"line":119,"column":77}},"55":{"start":{"line":120,"column":12},"end":{"line":120,"column":28}},"56":{"start":{"line":124,"column":4},"end":{"line":222,"column":7}},"57":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"58":{"start":{"line":127,"column":12},"end":{"line":127,"column":19}},"59":{"start":{"line":129,"column":8},"end":{"line":129,"column":53}},"60":{"start":{"line":130,"column":8},"end":{"line":132,"column":9}},"61":{"start":{"line":131,"column":12},"end":{"line":131,"column":19}},"62":{"start":{"line":133,"column":8},"end":{"line":133,"column":31}},"63":{"start":{"line":134,"column":8},"end":{"line":191,"column":9}},"64":{"start":{"line":135,"column":12},"end":{"line":184,"column":15}},"65":{"start":{"line":136,"column":16},"end":{"line":136,"column":25}},"66":{"start":{"line":137,"column":16},"end":{"line":144,"column":17}},"67":{"start":{"line":138,"column":20},"end":{"line":138,"column":83}},"68":{"start":{"line":139,"column":20},"end":{"line":139,"column":91}},"69":{"start":{"line":140,"column":20},"end":{"line":143,"column":21}},"70":{"start":{"line":141,"column":24},"end":{"line":141,"column":90}},"71":{"start":{"line":142,"column":24},"end":{"line":142,"column":43}},"72":{"start":{"line":145,"column":16},"end":{"line":180,"column":17}},"73":{"start":{"line":146,"column":20},"end":{"line":146,"column":32}},"74":{"start":{"line":148,"column":20},"end":{"line":179,"column":21}},"75":{"start":{"line":149,"column":24},"end":{"line":149,"column":38}},"76":{"start":{"line":151,"column":24},"end":{"line":151,"column":43}},"77":{"start":{"line":152,"column":24},"end":{"line":152,"column":46}},"78":{"start":{"line":153,"column":24},"end":{"line":178,"column":25}},"79":{"start":{"line":154,"column":28},"end":{"line":166,"column":29}},"80":{"start":{"line":156,"column":32},"end":{"line":156,"column":99}},"81":{"start":{"line":158,"column":32},"end":{"line":165,"column":33}},"82":{"start":{"line":160,"column":36},"end":{"line":160,"column":103}},"83":{"start":{"line":162,"column":36},"end":{"line":164,"column":37}},"84":{"start":{"line":163,"column":40},"end":{"line":163,"column":55}},"85":{"start":{"line":169,"column":28},"end":{"line":177,"column":29}},"86":{"start":{"line":170,"column":32},"end":{"line":174,"column":33}},"87":{"start":{"line":171,"column":36},"end":{"line":171,"column":48}},"88":{"start":{"line":173,"column":36},"end":{"line":173,"column":80}},"89":{"start":{"line":176,"column":32},"end":{"line":176,"column":97}},"90":{"start":{"line":181,"column":16},"end":{"line":183,"column":17}},"91":{"start":{"line":182,"column":20},"end":{"line":182,"column":34}},"92":{"start":{"line":190,"column":12},"end":{"line":190,"column":22},"skip":true},"93":{"start":{"line":193,"column":8},"end":{"line":207,"column":9}},"94":{"start":{"line":194,"column":12},"end":{"line":194,"column":23}},"95":{"start":{"line":195,"column":12},"end":{"line":199,"column":13}},"96":{"start":{"line":196,"column":16},"end":{"line":196,"column":39}},"97":{"start":{"line":198,"column":16},"end":{"line":198,"column":82}},"98":{"start":{"line":200,"column":12},"end":{"line":206,"column":14}},"99":{"start":{"line":209,"column":8},"end":{"line":209,"column":23}},"100":{"start":{"line":211,"column":8},"end":{"line":221,"column":9}},"101":{"start":{"line":212,"column":12},"end":{"line":212,"column":39}},"102":{"start":{"line":213,"column":12},"end":{"line":220,"column":13}},"103":{"start":{"line":214,"column":16},"end":{"line":216,"column":17}},"104":{"start":{"line":215,"column":20},"end":{"line":215,"column":40}},"105":{"start":{"line":217,"column":16},"end":{"line":217,"column":55}},"106":{"start":{"line":218,"column":16},"end":{"line":218,"column":30}},"107":{"start":{"line":219,"column":16},"end":{"line":219,"column":28}},"108":{"start":{"line":225,"column":0},"end":{"line":229,"column":2}},"109":{"start":{"line":226,"column":4},"end":{"line":228,"column":6}},"110":{"start":{"line":227,"column":8},"end":{"line":227,"column":66}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"3":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":32},"end":{"line":42,"column":38}},{"start":{"line":42,"column":41},"end":{"line":42,"column":50}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"6":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":14}},{"start":{"line":48,"column":18},"end":{"line":48,"column":43}}]},"7":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"8":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":12}},{"start":{"line":51,"column":12},"end":{"line":51,"column":12}}]},"9":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":12}},{"start":{"line":58,"column":12},"end":{"line":58,"column":12}}]},"10":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":16},"end":{"line":62,"column":16}},{"start":{"line":62,"column":16},"end":{"line":62,"column":16}}]},"11":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":20},"end":{"line":65,"column":20}},{"start":{"line":65,"column":20},"end":{"line":65,"column":20}}]},"12":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":24},"end":{"line":69,"column":24}},{"start":{"line":69,"column":24},"end":{"line":69,"column":24}}]},"13":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":16},"end":{"line":75,"column":16}},{"start":{"line":75,"column":16},"end":{"line":75,"column":16}}]},"14":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":20},"end":{"line":75,"column":50}},{"start":{"line":75,"column":54},"end":{"line":75,"column":80}}]},"15":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"16":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]},"17":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":12},"end":{"line":83,"column":25}},{"start":{"line":83,"column":29},"end":{"line":83,"column":54}}]},"18":{"line":84,"type":"cond-expr","locations":[{"start":{"line":84,"column":43},"end":{"line":84,"column":67}},{"start":{"line":84,"column":70},"end":{"line":84,"column":93}}]},"19":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"20":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":12}},{"start":{"line":88,"column":12},"end":{"line":88,"column":12}}]},"21":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":4},"end":{"line":96,"column":4}},{"start":{"line":96,"column":4},"end":{"line":96,"column":4}}]},"22":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":14}},{"start":{"line":96,"column":18},"end":{"line":96,"column":27}}]},"23":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]},"24":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":100,"column":12}},{"start":{"line":100,"column":12},"end":{"line":100,"column":12}}]},"25":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":16},"end":{"line":100,"column":37}},{"start":{"line":100,"column":41},"end":{"line":100,"column":68}},{"start":{"line":100,"column":72},"end":{"line":100,"column":79}},{"start":{"line":100,"column":83},"end":{"line":100,"column":90}}]},"26":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":106,"column":4}},{"start":{"line":106,"column":4},"end":{"line":106,"column":4}}]},"27":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":14}},{"start":{"line":106,"column":19},"end":{"line":106,"column":32}},{"start":{"line":106,"column":36},"end":{"line":106,"column":42}}]},"28":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":12}},{"start":{"line":109,"column":12},"end":{"line":109,"column":12}}]},"29":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"30":{"line":116,"type":"cond-expr","locations":[{"start":{"line":116,"column":38},"end":{"line":116,"column":53}},{"start":{"line":116,"column":56},"end":{"line":116,"column":71}}]},"31":{"line":119,"type":"cond-expr","locations":[{"start":{"line":119,"column":41},"end":{"line":119,"column":42}},{"start":{"line":119,"column":45},"end":{"line":119,"column":76}}]},"32":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":8},"end":{"line":126,"column":8}},{"start":{"line":126,"column":8},"end":{"line":126,"column":8}}]},"33":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8}},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]},"34":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":16},"end":{"line":137,"column":16}},{"start":{"line":137,"column":16},"end":{"line":137,"column":16}}]},"35":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":20},"end":{"line":140,"column":20}},{"start":{"line":140,"column":20},"end":{"line":140,"column":20}}]},"36":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":30},"end":{"line":142,"column":33}},{"start":{"line":142,"column":37},"end":{"line":142,"column":42}}]},"37":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":16},"end":{"line":145,"column":16}},{"start":{"line":145,"column":16},"end":{"line":145,"column":16}}]},"38":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":20},"end":{"line":148,"column":20}},{"start":{"line":148,"column":20},"end":{"line":148,"column":20}}]},"39":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":24},"end":{"line":153,"column":24}},{"start":{"line":153,"column":24},"end":{"line":153,"column":24}}]},"40":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":28},"end":{"line":154,"column":28}},{"start":{"line":154,"column":28},"end":{"line":154,"column":28}}]},"41":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":32},"end":{"line":154,"column":39}},{"start":{"line":154,"column":43},"end":{"line":154,"column":64}}]},"42":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":32},"end":{"line":158,"column":32}},{"start":{"line":158,"column":32},"end":{"line":158,"column":32}}]},"43":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":36},"end":{"line":162,"column":36}},{"start":{"line":162,"column":36},"end":{"line":162,"column":36}}]},"44":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":28},"end":{"line":169,"column":28}},{"start":{"line":169,"column":28},"end":{"line":169,"column":28}}]},"45":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":32},"end":{"line":170,"column":32}},{"start":{"line":170,"column":32},"end":{"line":170,"column":32}}]},"46":{"line":173,"type":"cond-expr","locations":[{"start":{"line":173,"column":68},"end":{"line":173,"column":72}},{"start":{"line":173,"column":75},"end":{"line":173,"column":79}}]},"47":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":16},"end":{"line":181,"column":16}},{"start":{"line":181,"column":16},"end":{"line":181,"column":16}}]},"48":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":195,"column":12}},{"start":{"line":195,"column":12},"end":{"line":195,"column":12}}]},"49":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":12},"end":{"line":213,"column":12}},{"start":{"line":213,"column":12},"end":{"line":213,"column":12}}]},"50":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":16},"end":{"line":214,"column":16}},{"start":{"line":214,"column":16},"end":{"line":214,"column":16}}]}},"code":["'use strict';","","var $npm = {","    utils: require('./utils'),","    special: require('./special'),","    QueryFile: require('./queryFile'),","    formatting: require('./formatting'),","    result: require('./result'),","    errors: require('./errors'),","    events: require('./events'),","    stream: require('./stream'),","    types: require('./types')","};","","var QueryResultError = $npm.errors.QueryResultError,","    InternalError = $npm.utils.InternalError,","    ExternalQuery = $npm.types.ExternalQuery,","    PreparedStatement = $npm.types.PreparedStatement,","    ParameterizedQuery = $npm.types.ParameterizedQuery,","    SpecialQuery = $npm.special.SpecialQuery,","    qrec = $npm.errors.queryResultErrorCode;","","var badMask = $npm.result.one | $npm.result.many; // the combination isn't supported;","","//////////////////////////////","// Generic query method;","function $query(ctx, query, values, qrm, config) {","","    var isResult, $p = config.promise;","","    if (qrm instanceof SpecialQuery) {","        if (qrm.isStream) {","            return $npm.stream.call(this, ctx, query, values, config);","        }","        isResult = qrm.isResult;","    }","","    var error, isFunc,","        opt = ctx.options,","        pgFormatting = opt.pgFormatting,","        capSQL = opt.capSQL,","        params = pgFormatting ? values : undefined;","","    if (!query) {","        error = new TypeError('Empty or undefined query.');","    }","","    if (!error && typeof query === 'object') {","        if (query instanceof $npm.QueryFile) {","            query.prepare();","            if (query.error) {","                error = query.error;","                query = query.file;","            } else {","                query = query.query;","            }","        } else {","            if ('funcName' in query) {","                isFunc = true;","                query = query.funcName; // query is a function name;","            } else {","                if (query instanceof ExternalQuery) {","                    pgFormatting = true;","                } else {","                    if ('name' in query) {","                        query = new PreparedStatement(query);","                        pgFormatting = true;","                    } else {","                        if ('text' in query) {","                            query = new ParameterizedQuery(query);","                            pgFormatting = true;","                        }","                    }","                }","                if (query instanceof ExternalQuery && !$npm.utils.isNull(values)) {","                    query.values = values;","                }","            }","        }","    }","","    if (!error) {","        if (!pgFormatting && !$npm.utils.isText(query)) {","            error = new TypeError(isFunc ? 'Invalid function name.' : 'Invalid query format.');","        }","        if (query instanceof ExternalQuery) {","            var qp = query.parse();","            if (qp instanceof Error) {","                error = qp;","            } else {","                query = qp;","            }","        }","    }","","    if (!error && !isResult) {","        if ($npm.utils.isNull(qrm)) {","            qrm = $npm.result.any; // default query result;","        } else {","            if (qrm !== parseInt(qrm) || (qrm & badMask) === badMask || qrm < 1 || qrm > 6) {","                error = new TypeError('Invalid Query Result Mask specified.');","            }","        }","    }","","    if (!error && (!pgFormatting || isFunc)) {","        try {","            // use 'pg-promise' implementation of values formatting;","            if (isFunc) {","                query = $npm.formatting.formatFunction(query, values, capSQL);","            } else {","                query = $npm.formatting.formatQuery(query, values);","            }","        } catch (e) {","            if (isFunc) {","                var prefix = capSQL ? 'SELECT * FROM' : 'select * from';","                query = prefix + ' ' + query + '(...)';","            }","            error = e instanceof Error ? e : new $npm.utils.InternalError(e);","            params = values;","        }","    }","","    return $p((resolve, reject) => {","","        if (notifyReject()) {","            return;","        }","        error = $npm.events.query(opt, getContext());","        if (notifyReject()) {","            return;","        }","        var start = Date.now();","        try {","            ctx.db.client.query(query, params, (err, result) => {","                var data;","                if (!err) {","                    $npm.utils.addReadProp(result, 'duration', Date.now() - start);","                    $npm.utils.addReadProp(result.rows, 'duration', result.duration, true);","                    if (result.rows.length) {","                        err = $npm.events.receive(opt, result.rows, result, getContext());","                        err = err || error;","                    }","                }","                if (err) {","                    error = err;","                } else {","                    if (isResult) {","                        data = result; // raw object requested (Result type);","                    } else {","                        data = result.rows;","                        var len = data.length;","                        if (len) {","                            if (len > 1 && qrm & $npm.result.one) {","                                // one row was expected, but returned multiple;","                                error = new QueryResultError(qrec.multiple, result, query, params);","                            } else {","                                if (!(qrm & ($npm.result.one | $npm.result.many))) {","                                    // no data should have been returned;","                                    error = new QueryResultError(qrec.notEmpty, result, query, params);","                                } else {","                                    if (!(qrm & $npm.result.many)) {","                                        data = data[0];","                                    }","                                }","                            }","                        } else {","                            // no data returned;","                            if (qrm & $npm.result.none) {","                                if (qrm & $npm.result.one) {","                                    data = null;","                                } else {","                                    data = qrm & $npm.result.many ? data : null;","                                }","                            } else {","                                error = new QueryResultError(qrec.noData, result, query, params);","                            }","                        }","                    }","                }","                if (!notifyReject()) {","                    resolve(data);","                }","            });","        } catch (e) {","            // this can only happen as a result of an internal failure within node-postgres,","            // like during a sudden loss of communications, which is impossible to reproduce","            // automatically, so removing it from the test coverage:","            // istanbul ignore next","            error = e;","        }","","        function getContext() {","            var client;","            if (ctx.db) {","                client = ctx.db.client;","            } else {","                error = new Error('Loose request outside an expired connection.');","            }","            return {","                client: client,","                dc: ctx.dc,","                query: query,","                params: params,","                ctx: ctx.ctx","            };","        }","","        notifyReject();","","        function notifyReject() {","            var context = getContext();","            if (error) {","                if (error instanceof InternalError) {","                    error = error.error;","                }","                $npm.events.error(opt, error, context);","                reject(error);","                return true;","            }","        }","    });","}","","module.exports = config => {","    return function (ctx, query, values, qrm) {","        return $query.call(this, ctx, query, values, qrm, config);","    };","};",""],"l":{"3":1,"15":1,"23":1,"27":1,"29":0,"31":0,"32":0,"33":0,"35":0,"38":0,"44":0,"45":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"55":0,"58":0,"59":0,"60":0,"62":0,"63":0,"65":0,"66":0,"67":0,"69":0,"70":0,"71":0,"75":0,"76":0,"82":0,"83":0,"84":0,"86":0,"87":0,"88":0,"89":0,"91":0,"96":0,"97":0,"98":0,"100":0,"101":0,"106":0,"107":0,"109":0,"110":0,"112":0,"115":0,"116":0,"117":0,"119":0,"120":0,"124":0,"126":0,"127":0,"129":0,"130":0,"131":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"145":0,"146":0,"148":0,"149":0,"151":0,"152":0,"153":0,"154":0,"156":0,"158":0,"160":0,"162":0,"163":0,"169":0,"170":0,"171":0,"173":0,"176":0,"181":0,"182":0,"190":1,"193":1,"194":0,"195":0,"196":0,"198":0,"200":0,"209":0,"211":1,"212":0,"213":0,"214":0,"215":0,"217":0,"218":0,"219":0,"225":1,"226":0,"227":0}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/stream.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":1,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"$stream","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":42}}},"2":{"name":"onError","line":85,"loc":{"start":{"line":85,"column":8},"end":{"line":85,"column":28}}},"3":{"name":"getError","line":92,"loc":{"start":{"line":92,"column":4},"end":{"line":92,"column":25}}},"4":{"name":"getContext","line":96,"loc":{"start":{"line":96,"column":4},"end":{"line":96,"column":26}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":6,"column":2}},"2":{"start":{"line":11,"column":0},"end":{"line":112,"column":1}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":28}},"4":{"start":{"line":17,"column":4},"end":{"line":19,"column":5},"skip":true},"5":{"start":{"line":18,"column":8},"end":{"line":18,"column":85},"skip":true},"6":{"start":{"line":20,"column":4},"end":{"line":23,"column":5}},"7":{"start":{"line":22,"column":8},"end":{"line":22,"column":77}},"8":{"start":{"line":24,"column":4},"end":{"line":27,"column":5}},"9":{"start":{"line":26,"column":8},"end":{"line":26,"column":61}},"10":{"start":{"line":28,"column":4},"end":{"line":31,"column":5}},"11":{"start":{"line":30,"column":8},"end":{"line":30,"column":94}},"12":{"start":{"line":32,"column":4},"end":{"line":32,"column":61}},"13":{"start":{"line":33,"column":4},"end":{"line":37,"column":5}},"14":{"start":{"line":34,"column":8},"end":{"line":34,"column":32}},"15":{"start":{"line":35,"column":8},"end":{"line":35,"column":60}},"16":{"start":{"line":36,"column":8},"end":{"line":36,"column":32}},"17":{"start":{"line":38,"column":4},"end":{"line":38,"column":40}},"18":{"start":{"line":39,"column":4},"end":{"line":61,"column":5}},"19":{"start":{"line":40,"column":8},"end":{"line":40,"column":41}},"20":{"start":{"line":41,"column":8},"end":{"line":41,"column":30}},"21":{"start":{"line":42,"column":8},"end":{"line":56,"column":10}},"22":{"start":{"line":43,"column":12},"end":{"line":55,"column":15}},"23":{"start":{"line":44,"column":16},"end":{"line":53,"column":17}},"24":{"start":{"line":45,"column":20},"end":{"line":45,"column":41}},"25":{"start":{"line":46,"column":20},"end":{"line":46,"column":47}},"26":{"start":{"line":47,"column":20},"end":{"line":49,"column":21}},"27":{"start":{"line":48,"column":24},"end":{"line":48,"column":91}},"28":{"start":{"line":50,"column":20},"end":{"line":52,"column":21}},"29":{"start":{"line":51,"column":24},"end":{"line":51,"column":39}},"30":{"start":{"line":54,"column":16},"end":{"line":54,"column":39}},"31":{"start":{"line":57,"column":8},"end":{"line":57,"column":27}},"32":{"start":{"line":58,"column":8},"end":{"line":58,"column":34}},"33":{"start":{"line":60,"column":8},"end":{"line":60,"column":20}},"34":{"start":{"line":62,"column":4},"end":{"line":68,"column":5}},"35":{"start":{"line":64,"column":8},"end":{"line":64,"column":30}},"36":{"start":{"line":65,"column":8},"end":{"line":65,"column":32}},"37":{"start":{"line":66,"column":8},"end":{"line":66,"column":60}},"38":{"start":{"line":67,"column":8},"end":{"line":67,"column":32}},"39":{"start":{"line":69,"column":4},"end":{"line":90,"column":7}},"40":{"start":{"line":70,"column":8},"end":{"line":80,"column":11}},"41":{"start":{"line":71,"column":12},"end":{"line":71,"column":34}},"42":{"start":{"line":72,"column":12},"end":{"line":79,"column":13}},"43":{"start":{"line":73,"column":16},"end":{"line":73,"column":31}},"44":{"start":{"line":75,"column":16},"end":{"line":78,"column":19}},"45":{"start":{"line":81,"column":8},"end":{"line":84,"column":11}},"46":{"start":{"line":82,"column":12},"end":{"line":82,"column":34}},"47":{"start":{"line":83,"column":12},"end":{"line":83,"column":25}},"48":{"start":{"line":85,"column":8},"end":{"line":89,"column":9}},"49":{"start":{"line":86,"column":12},"end":{"line":86,"column":28}},"50":{"start":{"line":87,"column":12},"end":{"line":87,"column":60}},"51":{"start":{"line":88,"column":12},"end":{"line":88,"column":22}},"52":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"53":{"start":{"line":93,"column":8},"end":{"line":93,"column":67}},"54":{"start":{"line":96,"column":4},"end":{"line":110,"column":5}},"55":{"start":{"line":97,"column":8},"end":{"line":97,"column":19}},"56":{"start":{"line":98,"column":8},"end":{"line":102,"column":9}},"57":{"start":{"line":99,"column":12},"end":{"line":99,"column":35}},"58":{"start":{"line":101,"column":12},"end":{"line":101,"column":78}},"59":{"start":{"line":103,"column":8},"end":{"line":109,"column":10}},"60":{"start":{"line":114,"column":0},"end":{"line":114,"column":25}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4},"skip":true},{"start":{"line":17,"column":4},"end":{"line":17,"column":4},"skip":true}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"4":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":19}},{"start":{"line":24,"column":23},"end":{"line":24,"column":49}}]},"5":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"6":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"7":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":16}},{"start":{"line":44,"column":16},"end":{"line":44,"column":16}}]},"8":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":20},"end":{"line":44,"column":24}},{"start":{"line":44,"column":28},"end":{"line":44,"column":39}}]},"9":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":20},"end":{"line":47,"column":20}},{"start":{"line":47,"column":20},"end":{"line":47,"column":20}}]},"10":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":20},"end":{"line":50,"column":20}},{"start":{"line":50,"column":20},"end":{"line":50,"column":20}}]},"11":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"12":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":72,"column":12}},{"start":{"line":72,"column":12},"end":{"line":72,"column":12}}]},"13":{"line":93,"type":"cond-expr","locations":[{"start":{"line":93,"column":55},"end":{"line":93,"column":62}},{"start":{"line":93,"column":65},"end":{"line":93,"column":66}}]},"14":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]}},"code":["'use strict';","","var $npm = {","    events: require('./events'),","    utils: require('./utils')","};","","////////////////////////////////////////////","// Streams query data into any destination,","// with the help of pg-query-stream library.","function $stream(ctx, qs, initCB, config) {","","    var $p = config.promise;","","    // istanbul ignore next:","    // we do not provide code coverage for the Native Bindings specifics","    if (ctx.options.pgNative) {","        return $p.reject(new Error('Streaming doesn\\'t work with Native Bindings.'));","    }","    if (!$npm.utils.isObject(qs, ['state', '_reading'])) {","        // stream object wasn't passed in correctly;","        return $p.reject(new TypeError('Invalid or missing stream object.'));","    }","    if (qs._reading || qs.state !== 'initialized') {","        // stream object is in the wrong state;","        return $p.reject(new Error('Invalid stream state.'));","    }","    if (typeof initCB !== 'function') {","        // parameter `initCB` must be passed as the initialization callback;","        return $p.reject(new TypeError('Invalid or missing stream initialization callback.'));","    }","    var error = $npm.events.query(ctx.options, getContext());","    if (error) {","        error = getError(error);","        $npm.events.error(ctx.options, error, getContext());","        return $p.reject(error);","    }","    var stream, fetch, start, nRows = 0;","    try {","        stream = ctx.db.client.query(qs);","        fetch = stream._fetch;","        stream._fetch = (size, func) => {","            fetch.call(stream, size, (err, rows) => {","                if (!err && rows.length) {","                    nRows += rows.length;","                    var context = getContext();","                    if (!error) {","                        error = $npm.events.receive(ctx.options, rows, undefined, context);","                    }","                    if (error) {","                        stream.close();","                    }","                }","                return func(err, rows);","            });","        };","        start = Date.now();","        initCB.call(this, stream); // the stream must be initialized during the call;","    } catch (err) {","        error = err;","    }","    if (error) {","        // error thrown by initCB();","        stream._fetch = fetch;","        error = getError(error);","        $npm.events.error(ctx.options, error, getContext());","        return $p.reject(error);","    }","    return $p((resolve, reject) => {","        stream.once('end', () => {","            stream._fetch = fetch;","            if (error) {","                onError(error);","            } else {","                resolve({","                    processed: nRows, // total number of rows processed;","                    duration: Date.now() - start // duration, in milliseconds;","                });","            }","        });","        stream.once('error', err => {","            stream._fetch = fetch;","            onError(err);","        });","        function onError(e) {","            e = getError(e);","            $npm.events.error(ctx.options, e, getContext());","            reject(e);","        }","    });","","    function getError(e) {","        return e instanceof $npm.utils.InternalError ? e.error : e;","    }","","    function getContext() {","        var client;","        if (ctx.db) {","            client = ctx.db.client;","        } else {","            error = new Error('Loose request outside an expired connection.');","        }","        return {","            client: client,","            dc: ctx.dc,","            query: qs.text,","            params: qs.values,","            ctx: ctx.ctx","        };","    }","","}","","module.exports = $stream;",""],"l":{"3":1,"11":1,"13":0,"17":1,"18":1,"20":0,"22":0,"24":0,"26":0,"28":0,"30":0,"32":0,"33":0,"34":0,"35":0,"36":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0,"51":0,"54":0,"57":0,"58":0,"60":0,"62":0,"64":0,"65":0,"66":0,"67":0,"69":0,"70":0,"71":0,"72":0,"73":0,"75":0,"81":0,"82":0,"83":0,"85":1,"86":0,"87":0,"88":0,"92":1,"93":0,"96":1,"97":0,"98":0,"99":0,"101":0,"103":0,"114":1}},"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/task.js":{"path":"/home/travis/build/npmtest/node-npmtest-pg-promise/node_modules/pg-promise/lib/task.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":1,"66":0,"67":1,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"Task","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":38}}},"2":{"name":"(anonymous_2)","line":115,"loc":{"start":{"line":115,"column":17},"end":{"line":115,"column":47}}},"3":{"name":"(anonymous_3)","line":134,"loc":{"start":{"line":134,"column":17},"end":{"line":134,"column":39}}},"4":{"name":"(anonymous_4)","line":151,"loc":{"start":{"line":151,"column":16},"end":{"line":151,"column":47}}},"5":{"name":"(anonymous_5)","line":169,"loc":{"start":{"line":169,"column":20},"end":{"line":169,"column":58}}},"6":{"name":"callback","line":182,"loc":{"start":{"line":182,"column":4},"end":{"line":182,"column":24}}},"7":{"name":"update","line":204,"loc":{"start":{"line":204,"column":4},"end":{"line":204,"column":44}}},"8":{"name":"(anonymous_8)","line":251,"loc":{"start":{"line":251,"column":28},"end":{"line":251,"column":46}},"skip":true},"9":{"name":"(anonymous_9)","line":258,"loc":{"start":{"line":258,"column":16},"end":{"line":258,"column":34}},"skip":true},"10":{"name":"begin","line":264,"loc":{"start":{"line":264,"column":4},"end":{"line":264,"column":21}}},"11":{"name":"commit","line":271,"loc":{"start":{"line":271,"column":4},"end":{"line":271,"column":22}}},"12":{"name":"rollback","line":275,"loc":{"start":{"line":275,"column":4},"end":{"line":275,"column":24}}},"13":{"name":"exec","line":279,"loc":{"start":{"line":279,"column":4},"end":{"line":279,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":10,"column":2}},"2":{"start":{"line":49,"column":0},"end":{"line":173,"column":1}},"3":{"start":{"line":103,"column":4},"end":{"line":103,"column":28}},"4":{"start":{"line":105,"column":4},"end":{"line":105,"column":51}},"5":{"start":{"line":107,"column":4},"end":{"line":109,"column":5}},"6":{"start":{"line":108,"column":8},"end":{"line":108,"column":65}},"7":{"start":{"line":111,"column":4},"end":{"line":111,"column":49}},"8":{"start":{"line":112,"column":4},"end":{"line":112,"column":51}},"9":{"start":{"line":115,"column":4},"end":{"line":120,"column":6}},"10":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"11":{"start":{"line":117,"column":12},"end":{"line":117,"column":95}},"12":{"start":{"line":119,"column":8},"end":{"line":119,"column":69}},"13":{"start":{"line":134,"column":4},"end":{"line":136,"column":6}},"14":{"start":{"line":135,"column":8},"end":{"line":135,"column":61}},"15":{"start":{"line":151,"column":4},"end":{"line":153,"column":6}},"16":{"start":{"line":152,"column":8},"end":{"line":152,"column":69}},"17":{"start":{"line":169,"column":4},"end":{"line":171,"column":6}},"18":{"start":{"line":170,"column":8},"end":{"line":170,"column":80}},"19":{"start":{"line":177,"column":0},"end":{"line":297,"column":2}},"20":{"start":{"line":179,"column":4},"end":{"line":179,"column":28}},"21":{"start":{"line":182,"column":4},"end":{"line":201,"column":5}},"22":{"start":{"line":183,"column":8},"end":{"line":183,"column":32}},"23":{"start":{"line":184,"column":8},"end":{"line":186,"column":9}},"24":{"start":{"line":185,"column":12},"end":{"line":185,"column":39}},"25":{"start":{"line":187,"column":8},"end":{"line":196,"column":9}},"26":{"start":{"line":188,"column":12},"end":{"line":188,"column":39}},"27":{"start":{"line":190,"column":12},"end":{"line":194,"column":15}},"28":{"start":{"line":195,"column":12},"end":{"line":195,"column":34}},"29":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"30":{"start":{"line":198,"column":12},"end":{"line":198,"column":26}},"31":{"start":{"line":200,"column":8},"end":{"line":200,"column":34}},"32":{"start":{"line":204,"column":4},"end":{"line":219,"column":5}},"33":{"start":{"line":205,"column":8},"end":{"line":205,"column":24}},"34":{"start":{"line":206,"column":8},"end":{"line":213,"column":9}},"35":{"start":{"line":207,"column":12},"end":{"line":207,"column":59}},"36":{"start":{"line":209,"column":12},"end":{"line":209,"column":34}},"37":{"start":{"line":210,"column":12},"end":{"line":210,"column":32}},"38":{"start":{"line":211,"column":12},"end":{"line":211,"column":30}},"39":{"start":{"line":212,"column":12},"end":{"line":212,"column":37}},"40":{"start":{"line":214,"column":8},"end":{"line":218,"column":11}},"41":{"start":{"line":221,"column":4},"end":{"line":223,"column":36}},"42":{"start":{"line":225,"column":4},"end":{"line":225,"column":17}},"43":{"start":{"line":227,"column":4},"end":{"line":262,"column":5}},"44":{"start":{"line":229,"column":8},"end":{"line":229,"column":40}},"45":{"start":{"line":230,"column":8},"end":{"line":261,"column":19}},"46":{"start":{"line":232,"column":20},"end":{"line":254,"column":31}},"47":{"start":{"line":234,"column":28},"end":{"line":234,"column":42}},"48":{"start":{"line":235,"column":28},"end":{"line":235,"column":43}},"49":{"start":{"line":236,"column":28},"end":{"line":236,"column":44}},"50":{"start":{"line":238,"column":28},"end":{"line":238,"column":46}},"51":{"start":{"line":239,"column":28},"end":{"line":239,"column":46}},"52":{"start":{"line":242,"column":32},"end":{"line":245,"column":33}},"53":{"start":{"line":243,"column":36},"end":{"line":243,"column":64}},"54":{"start":{"line":244,"column":36},"end":{"line":244,"column":50}},"55":{"start":{"line":246,"column":32},"end":{"line":246,"column":63}},"56":{"start":{"line":247,"column":32},"end":{"line":247,"column":59}},"57":{"start":{"line":252,"column":32},"end":{"line":252,"column":61},"skip":true},"58":{"start":{"line":253,"column":32},"end":{"line":253,"column":57},"skip":true},"59":{"start":{"line":259,"column":20},"end":{"line":259,"column":49},"skip":true},"60":{"start":{"line":260,"column":20},"end":{"line":260,"column":45},"skip":true},"61":{"start":{"line":264,"column":4},"end":{"line":269,"column":5}},"62":{"start":{"line":265,"column":8},"end":{"line":267,"column":9}},"63":{"start":{"line":266,"column":12},"end":{"line":266,"column":66}},"64":{"start":{"line":268,"column":8},"end":{"line":268,"column":42}},"65":{"start":{"line":271,"column":4},"end":{"line":273,"column":5}},"66":{"start":{"line":272,"column":8},"end":{"line":272,"column":51}},"67":{"start":{"line":275,"column":4},"end":{"line":277,"column":5}},"68":{"start":{"line":276,"column":8},"end":{"line":276,"column":57}},"69":{"start":{"line":279,"column":4},"end":{"line":284,"column":5}},"70":{"start":{"line":280,"column":8},"end":{"line":282,"column":9}},"71":{"start":{"line":281,"column":12},"end":{"line":281,"column":85}},"72":{"start":{"line":283,"column":8},"end":{"line":283,"column":58}},"73":{"start":{"line":287,"column":4},"end":{"line":295,"column":11}},"74":{"start":{"line":289,"column":12},"end":{"line":289,"column":38}},"75":{"start":{"line":290,"column":12},"end":{"line":290,"column":24}},"76":{"start":{"line":293,"column":12},"end":{"line":293,"column":40}},"77":{"start":{"line":294,"column":12},"end":{"line":294,"column":36}},"78":{"start":{"line":299,"column":0},"end":{"line":310,"column":2}},"79":{"start":{"line":300,"column":4},"end":{"line":300,"column":26}},"80":{"start":{"line":305,"column":4},"end":{"line":305,"column":48},"skip":true},"81":{"start":{"line":307,"column":4},"end":{"line":307,"column":48}},"82":{"start":{"line":308,"column":4},"end":{"line":308,"column":56}},"83":{"start":{"line":309,"column":4},"end":{"line":309,"column":16}}},"branchMap":{"1":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"2":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":8}},{"start":{"line":116,"column":8},"end":{"line":116,"column":8}}]},"3":{"line":117,"type":"cond-expr","locations":[{"start":{"line":117,"column":68},"end":{"line":117,"column":82}},{"start":{"line":117,"column":85},"end":{"line":117,"column":92}}]},"4":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":8},"end":{"line":184,"column":8}},{"start":{"line":184,"column":8},"end":{"line":184,"column":8}}]},"5":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":8},"end":{"line":197,"column":8}},{"start":{"line":197,"column":8},"end":{"line":197,"column":8}}]},"6":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":12},"end":{"line":197,"column":18}},{"start":{"line":197,"column":22},"end":{"line":197,"column":55}}]},"7":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":8},"end":{"line":206,"column":8}},{"start":{"line":206,"column":8},"end":{"line":206,"column":8}}]},"8":{"line":214,"type":"cond-expr","locations":[{"start":{"line":214,"column":16},"end":{"line":214,"column":36}},{"start":{"line":214,"column":39},"end":{"line":214,"column":55}}]},"9":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":4},"end":{"line":227,"column":4}},{"start":{"line":227,"column":4},"end":{"line":227,"column":4}}]},"10":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":32},"end":{"line":242,"column":32}},{"start":{"line":242,"column":32},"end":{"line":242,"column":32}}]},"11":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":8},"end":{"line":265,"column":8}},{"start":{"line":265,"column":8},"end":{"line":265,"column":8}}]},"12":{"line":265,"type":"binary-expr","locations":[{"start":{"line":265,"column":12},"end":{"line":265,"column":24}},{"start":{"line":265,"column":28},"end":{"line":265,"column":78}}]},"13":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":8},"end":{"line":280,"column":8}},{"start":{"line":280,"column":8},"end":{"line":280,"column":8}}]},"14":{"line":281,"type":"cond-expr","locations":[{"start":{"line":281,"column":38},"end":{"line":281,"column":58}},{"start":{"line":281,"column":61},"end":{"line":281,"column":67}}]},"15":{"line":283,"type":"cond-expr","locations":[{"start":{"line":283,"column":33},"end":{"line":283,"column":50}},{"start":{"line":283,"column":53},"end":{"line":283,"column":56}}]},"16":{"line":305,"type":"binary-expr","locations":[{"start":{"line":305,"column":16},"end":{"line":305,"column":25},"skip":true},{"start":{"line":305,"column":29},"end":{"line":305,"column":47},"skip":true}]},"17":{"line":307,"type":"binary-expr","locations":[{"start":{"line":307,"column":16},"end":{"line":307,"column":25}},{"start":{"line":307,"column":29},"end":{"line":307,"column":47}}]},"18":{"line":308,"type":"binary-expr","locations":[{"start":{"line":308,"column":15},"end":{"line":308,"column":23}},{"start":{"line":308,"column":27},"end":{"line":308,"column":55}}]}},"code":["'use strict';","","var $npm = {","    spex: require('spex'),","    utils: require('./utils'),","    mode: require('./txMode'),","    events: require('./events'),","    query: require('./query'),","    async: require('./async')","};","","/**"," * @interface Task"," * @extends Database"," * @description"," * Extends {@link Database} for an automatic connection session, with methods for executing multiple database queries."," * The type isn't available directly, it can only be created via methods {@link Database.task} and {@link Database.tx}."," *"," * When executing more than one request at a time, one should allocate and release the connection only once,"," * while executing all the required queries within the same connection session. More importantly, a transaction"," * can only work within a single connection."," *"," * This is an interface for tasks/transactions to implement a connection session, during which you can"," * execute multiple queries against the same connection that's released automatically when the task/transaction is finished."," *"," * @see"," * {@link Task.ctx ctx},"," * {@link Task.batch batch},"," * {@link Task.sequence sequence},"," * {@link Task.page page}"," *"," * @example"," * db.task(t => {"," *       // t = task protocol context;"," *       // t.ctx = task config + state context;"," *       return t.one(\"select * from users where id=$1\", 123)"," *           .then(user => {"," *               return t.any(\"select * from events where login=$1\", user.name);"," *           });"," *   })"," * .then(events => {"," *       // success;"," *   })"," * .catch(error => {"," *       // error;"," *   });"," *"," */","function Task(ctx, tag, isTX, config) {","","    /**","     * @member {object} Task.ctx","     * @description","     * Task/Transaction Context object - contains individual properties for each task/transaction.","     *","     * ```js","     * db.task(t => {","     *    // t.ctx = task context object","     * });","     * ```","     *","     * ```js","     * db.tx(t => {","     *    // t.ctx = transaction context object","     * });","     * ```","     *","     * Properties `context`, `dc`, `isTX`, `tag`, `start` and `isFresh` are set before the callback,","     * while properties `finish`, `success` and `result` are set after the callback has returned.","     *","     * @property {object} context","     * If the operation was invoked with an object context - `task.call(obj,...)` or","     * `tx.call(obj,...)`, this property is set with the context object that was passed in.","     *","     * @property {} dc","     * _Database Context_ that was used when creating the database object. See {@link Database}.","     *","     * @property {boolean} isTX","     * Indicates whether this task represents a transaction.","     *","     * @property {} tag","     * Tag value as it was passed into the task. See methods {@link Database.task task} and {@link Database.tx tx}.","     *","     * @property {date} start","     * Date/Time of when this task or transaction started the execution.","     *","     * @property {boolean} isFresh","     * Indicates when a fresh physical connection is being used.","     *","     * @property {date} finish","     * Once the operation has finished, this property is set to the Data/Time of when it happened.","     *","     * @property {boolean} success","     * Once the operation has finished, this property indicates whether it was successful.","     *","     * @property {} result","     * Once the operation has finished, this property contains the result, depending on property `success`:","     * - data resolved by the operation, if `success` = `true`","     * - error / rejection reason, if `success` = `false`","     *","     * @see event {@link event:query query}","     */","    this.ctx = ctx.ctx = {}; // task context object;","","    $npm.utils.addReadProp(this.ctx, 'isTX', isTX);","","    if ('context' in ctx) {","        $npm.utils.addReadProp(this.ctx, 'context', ctx.context);","    }","","    $npm.utils.addReadProp(this.ctx, 'tag', tag);","    $npm.utils.addReadProp(this.ctx, 'dc', ctx.dc);","","    // generic query method;","    this.query = function (query, values, qrm) {","        if (!ctx.db) {","            throw new Error('Unexpected call outside of ' + (isTX ? 'transaction.' : 'task.'));","        }","        return config.$npm.query.call(this, ctx, query, values, qrm);","    };","","    /**","     * @method Task.batch","     * @description","     * **Alternative Syntax:** `batch(values, {cb})` &#8658; `Promise`","     *","     * Settles a predefined array of mixed values by redirecting to method $[spex.batch].","     *","     * For complete method documentation see $[spex.batch].","     * @param {array} values","     * @param {function} [cb]","     * @returns {external:Promise}","     */","    this.batch = function (values, cb) {","        return config.$npm.spex.batch.call(this, values, cb);","    };","","    /**","     * @method Task.page","     * @description","     * **Alternative Syntax:** `page(source, {dest, limit})` &#8658; `Promise`","     *","     * Resolves a dynamic sequence of arrays/pages with mixed values, by redirecting to method $[spex.page].","     *","     * For complete method documentation see $[spex.page].","     * @param {function} source","     * @param {function} [dest]","     * @param {number} [limit=0]","     * @returns {external:Promise}","     */","    this.page = function (source, dest, limit) {","        return config.$npm.spex.page.call(this, source, dest, limit);","    };","","    /**","     * @method Task.sequence","     * @description","     * **Alternative Syntax:** `sequence(source, {dest, limit, track})` &#8658; `Promise`","     *","     * Resolves a dynamic sequence of mixed values by redirecting to method $[spex.sequence].","     *","     * For complete method documentation see $[spex.sequence].","     * @param {function} source","     * @param {function} [dest]","     * @param {number} [limit=0]","     * @param {boolean} [track=false]","     * @returns {external:Promise}","     */","    this.sequence = function (source, dest, limit, track) {","        return config.$npm.spex.sequence.call(this, source, dest, limit, track);","    };","","}","","//////////////////////////","// Executes a task;","Task.exec = (ctx, obj, isTX, config) => {","","    var $p = config.promise;","","    // callback invocation helper;","    function callback() {","        var result, cb = ctx.cb;","        if (cb.constructor.name === 'GeneratorFunction') {","            cb = config.$npm.async(cb);","        }","        try {","            result = cb.call(obj, obj); // invoking the callback function;","        } catch (err) {","            $npm.events.error(ctx.options, err, {","                client: ctx.db.client,","                dc: ctx.dc,","                ctx: ctx.ctx","            });","            return $p.reject(err); // reject with the error;","        }","        if (result && typeof result.then === 'function') {","            return result; // result is a valid promise object;","        }","        return $p.resolve(result);","    }","","    // updates the task context and notifies the client;","    function update(start, success, result) {","        var c = ctx.ctx;","        if (start) {","            $npm.utils.addReadProp(c, 'start', new Date());","        } else {","            c.finish = new Date();","            c.success = success;","            c.result = result;","            $npm.utils.lock(c, true);","        }","        (isTX ? $npm.events.transact : $npm.events.task)(ctx.options, {","            client: ctx.db.client,","            dc: ctx.dc,","            ctx: c","        });","    }","","    var cbData, cbReason, success,","        spName, // Save-Point Name;","        capSQL = ctx.options.capSQL; // capitalize sql;","","    update(true);","","    if (isTX) {","        // executing a transaction;","        spName = 'level_' + ctx.txLevel;","        return begin()","            .then(() => {","                    return callback()","                        .then(data => {","                            cbData = data; // save callback data;","                            success = true;","                            return commit();","                        }, reason => {","                            cbReason = reason; // save callback failure reason;","                            return rollback();","                        })","                        .then(() => {","                                if (success) {","                                    update(false, true, cbData);","                                    return cbData;","                                }","                                update(false, false, cbReason);","                                return $p.reject(cbReason);","                            },","                            // istanbul ignore next: either `commit` or `rollback` has failed, which is","                            // impossible to replicate in a test environment, so skipping from the test;","                            function (reason) {","                                update(false, false, reason);","                                return $p.reject(reason);","                            });","                },","                // istanbul ignore next: `begin` has failed, which is impossible","                // to replicate in a test environment, so skipping from the test;","                function (reason) {","                    update(false, false, reason);","                    return $p.reject(reason);","                });","    }","","    function begin() {","        if (!ctx.txLevel && ctx.cb.txMode instanceof $npm.mode.TransactionMode) {","            return exec(ctx.cb.txMode.begin(capSQL), 'savepoint');","        }","        return exec('begin', 'savepoint');","    }","","    function commit() {","        return exec('commit', 'release savepoint');","    }","","    function rollback() {","        return exec('rollback', 'rollback to savepoint');","    }","","    function exec(top, nested) {","        if (ctx.txLevel) {","            return obj.none((capSQL ? nested.toUpperCase() : nested) + ' ' + spName);","        }","        return obj.none(capSQL ? top.toUpperCase() : top);","    }","","    // executing a task;","    return callback()","        .then(data => {","            update(false, true, data);","            return data;","        })","        .catch(error => {","            update(false, false, error);","            return $p.reject(error);","        });","","};","","module.exports = config => {","    var npm = config.$npm;","","    // istanbul ignore next:","    // we keep 'npm.query' initialization here, even though it is always","    // pre-initialized by the 'database' module, for integrity purpose. ","    npm.query = npm.query || $npm.query(config);","","    npm.async = npm.async || $npm.async(config);","    npm.spex = npm.spex || $npm.spex(config.promiseLib);","    return Task;","};",""],"l":{"3":1,"49":1,"103":0,"105":0,"107":0,"108":0,"111":0,"112":0,"115":0,"116":0,"117":0,"119":0,"134":0,"135":0,"151":0,"152":0,"169":0,"170":0,"177":1,"179":0,"182":1,"183":0,"184":0,"185":0,"187":0,"188":0,"190":0,"195":0,"197":0,"198":0,"200":0,"204":1,"205":0,"206":0,"207":0,"209":0,"210":0,"211":0,"212":0,"214":0,"221":0,"225":0,"227":0,"229":0,"230":0,"232":0,"234":0,"235":0,"236":0,"238":0,"239":0,"242":0,"243":0,"244":0,"246":0,"247":0,"252":1,"253":1,"259":1,"260":1,"264":1,"265":0,"266":0,"268":0,"271":1,"272":0,"275":1,"276":0,"279":1,"280":0,"281":0,"283":0,"287":0,"289":0,"290":0,"293":0,"294":0,"299":1,"300":0,"305":1,"307":0,"308":0,"309":0}}}